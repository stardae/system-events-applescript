#!/usr/bin/env node

const { execFile } = require('child_process');
const { promisify } = require('util');

const execFileAsync = promisify(execFile);

console.error("System Events AppleScript MCP server starting...");

// Constants
const APPLESCRIPT_TIMEOUT = 10000; // 10 seconds
const MAX_RETRIES = 3;
const RETRY_DELAY = 1000; // 1 second

// Universal type caster for AppleScript values
function universalCast(value) {
  if (value === null || value === undefined) return null;
  
  const str = String(value).trim();
  if (str === '') return '';
  
  // Boolean
  const lower = str.toLowerCase();
  if (['true', 'yes'].includes(lower)) return true;
  if (['false', 'no'].includes(lower)) return false;
  
  // Number
  if (/^-?\d+(\.\d+)?$/.test(str)) {
    const num = Number(str);
    return Number.isInteger(num) ? num : num;
  }
  
  // List/Record - anything in braces, return as-is for AppleScript
  if (str.startsWith('{') && str.endsWith('}')) {
    return str; // AppleScript will handle the parsing
  }
  
  // Auto-detect comma-separated values that should be lists/rectangles
  if (str.includes(',') && !str.startsWith('{')) {
    const parts = str.split(',').map(p => p.trim());
    
    // Rectangle pattern: 4 numbers (x, y, width, height)
    if (parts.length === 4 && parts.every(p => /^-?\d+(\.\d+)?$/.test(p))) {
      return `{${str}}`; // Add brackets for rectangle
    }
    
    // Generic list: 2+ comma-separated values
    if (parts.length >= 2) {
      return `{${str}}`; // Add brackets for list
    }
  }
  
  // Date patterns
  if (str.startsWith('date "') || /^\d{4}-\d{2}-\d{2}/.test(str)) {
    return `date "${str}"`;
  }
  
  // String - remove quotes if present
  if ((str.startsWith('"') && str.endsWith('"')) || 
      (str.startsWith("'") && str.endsWith("'"))) {
    return str.slice(1, -1);
  }
  
  return str;
}

// Cast and escape for AppleScript injection
function castAndEscape(value) {
  const casted = universalCast(value);
  
  // If it's a string that doesn't start with {, escape it
  if (typeof casted === 'string' && !casted.startsWith('{') && !casted.startsWith('date')) {
    return escapeForAppleScript(casted);
  }
  
  // Numbers, booleans, and AppleScript literals go as-is
  return casted;
}

// Helper function to escape strings for AppleScript
function escapeForAppleScript(str) {
  if (typeof str !== "string") return str;
  return str
    .replace(/\\/g, "\\\\") // Escape backslashes first
    .replace(/"/g, '\"') // Then escape double quotes
    .replace(/\n/g, "\\n") // Escape newlines
    .replace(/\r/g, "\\r"); // Escape carriage returns
}

// Test if System Events is available
async function checkSystemEventsAvailable() {
  try {
    const script = 'tell application "System Events" to return "available"';
    const result = await executeAppleScript(script);
    return result === "available";
  } catch (error) {
    return false;
  }
}

// Execute AppleScript with retry logic
async function executeAppleScript(script, retries = MAX_RETRIES) {
  for (let attempt = 0; attempt <= retries; attempt++) {
    try {
      const { stdout, stderr } = await execFileAsync(
        "osascript",
        ["-e", script],
        {
          timeout: APPLESCRIPT_TIMEOUT,
          maxBuffer: 1024 * 1024, // 1MB buffer
        },
      );
      if (stderr) {
        console.error("AppleScript stderr:", stderr);
      }
      return stdout.trim();
    } catch (error) {
      if (attempt === retries) {
        console.error("AppleScript execution error after retries:", error);
        throw new Error(`AppleScript error: ${error.message}`);
      }
      await new Promise((resolve) =>
        setTimeout(resolve, RETRY_DELAY * Math.pow(2, attempt)),
      );
    }
  }
}

// MCP server implementation
class SystemEventsMCPServer {
  constructor() {
    this.initialized = false;
    this.setupStdio();
  }

  setupStdio() {
    process.stdin.setEncoding('utf8');
    
    let buffer = '';
    process.stdin.on('data', (data) => {
      buffer += data;
      const lines = buffer.split('\n');
      buffer = lines.pop() || ''; // Keep incomplete line in buffer
      
      lines.forEach(line => {
        if (line.trim()) {
          this.handleMessage(line.trim());
        }
      });
    });
  }

  async handleMessage(data) {
    try {
      const request = JSON.parse(data);
      console.error("Received request:", request.method, request.id);
      
      if (request.method === 'initialize') {
        await this.handleInitialize(request);
      } else if (request.method === 'initialized') {
        await this.handleInitialized(request);
      } else if (request.method === 'tools/list') {
        await this.handleToolsList(request);
      } else if (request.method === 'tools/call') {
        await this.handleToolsCall(request);
      } else {
        console.error("Unknown method:", request.method);
      }
    } catch (error) {
      console.error("Error processing message:", error);
    }
  }

  async handleInitialize(request) {
    console.error("Handling initialize request");
    const response = {
      jsonrpc: '2.0',
      id: request.id,
      result: {
        protocolVersion: '2024-11-05',
        capabilities: {
          tools: {}
        },
        serverInfo: {
          name: 'systemevents-applescript',
          version: '0.1.0'
        }
      }
    };
    this.sendResponse(response);
  }

  async handleInitialized(request) {
    console.error("Handling initialized notification");
    this.initialized = true;
  }

  async handleToolsList(request) {
    console.error("Handling tools/list request");
    const response = {
      jsonrpc: '2.0',
      id: request.id,
      result: {
        tools: [
          {
  name: 'open_file',
  description: 'Open a document. (file input)',
  inputSchema: {
    type: 'object',
    properties: {
      direct_parameter_required_file: {
        type: 'string',
        description: 'The file(s) to be opened.'
      }
    },
    required: ['direct_parameter_required_file'],
    additionalProperties: false
  }
},
          {
  name: 'open_file',
  description: 'Open a document. (file input)',
  inputSchema: {
    type: 'object',
    properties: {
      direct_parameter_required_list_of_file: {
        type: 'string',
        description: 'The file(s) to be opened.'
      }
    },
    required: ['direct_parameter_required_list_of_file'],
    additionalProperties: false
  }
},
          {
  name: 'close_for_window_of_process',
  description: 'Close a window of process.',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      },
      saving_optional_save_options: {
        type: 'string',
        description: 'Should changes be saved before closing?'
      },
      saving_in_optional_file: {
        type: 'string',
        description: 'The file in which to save the document, if so.'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'close_for_document',
  description: 'Close a document.',
  inputSchema: {
    type: 'object',
    properties: {
      target_document_required_string: {
        type: 'string',
        description: 'The document object to access (e.g., \"front document\", \"document 1\")'
      },
      saving_optional_save_options: {
        type: 'string',
        description: 'Should changes be saved before closing?'
      },
      saving_in_optional_file: {
        type: 'string',
        description: 'The file in which to save the document, if so.'
      }
    },
    required: ['target_document_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'save_for_window_of_process',
  description: 'Save a window of process.',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      },
      inParam_optional_file: {
        type: 'string',
        description: 'The file in which to save the document.'
      },
      as_optional_saveable_file_format: {
        type: 'string',
        description: 'The file format to use.'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'save_for_document',
  description: 'Save a document.',
  inputSchema: {
    type: 'object',
    properties: {
      target_document_required_string: {
        type: 'string',
        description: 'The document object to access (e.g., \"front document\", \"document 1\")'
      },
      inParam_optional_file: {
        type: 'string',
        description: 'The file in which to save the document.'
      },
      as_optional_saveable_file_format: {
        type: 'string',
        description: 'The file format to use.'
      }
    },
    required: ['target_document_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'print_file',
  description: 'Print a document. (file input)',
  inputSchema: {
    type: 'object',
    properties: {
      direct_parameter_required_list_of_file: {
        type: 'string',
        description: 'The file(s), document(s), or window(s) to be printed.'
      },
      with_properties_optional_print_settings: {
        type: 'string',
        description: 'The print settings to use.'
      },
      print_dialog_optional_boolean: {
        type: 'boolean',
        description: 'Should the application show the print dialog?'
      }
    },
    required: ['direct_parameter_required_list_of_file'],
    additionalProperties: false
  }
},
          {
  name: 'print_for_window_of_process',
  description: 'Print a window of process.',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      },
      with_properties_optional_print_settings: {
        type: 'string',
        description: 'The print settings to use.'
      },
      print_dialog_optional_boolean: {
        type: 'boolean',
        description: 'Should the application show the print dialog?'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'print_for_document',
  description: 'Print a document.',
  inputSchema: {
    type: 'object',
    properties: {
      target_document_required_string: {
        type: 'string',
        description: 'The document object to access (e.g., \"front document\", \"document 1\")'
      },
      with_properties_optional_print_settings: {
        type: 'string',
        description: 'The print settings to use.'
      },
      print_dialog_optional_boolean: {
        type: 'boolean',
        description: 'Should the application show the print dialog?'
      }
    },
    required: ['target_document_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'quit',
  description: 'Quit the application.',
  inputSchema: {
    type: 'object',
    properties: {
      saving_optional_save_options: {
        type: 'string',
        description: 'Should changes be saved before quitting?'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'count_security_preferences_object',
  description: 'Return the number of elements of a particular class within a security preferences object.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_classic_domain_object',
  description: 'Return the number of elements of a particular class within a Classic domain object.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_xml_attribute_of_xml_element',
  description: 'Return the number of elements of a particular class within a XML attribute of XML element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_xml_element_required_string: {
        type: 'string',
        description: 'The XML element object to access (e.g., \"front XML element\", \"XML element 1\")'
      }
    },
    required: ['target_xml_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_browser_of_ui_element',
  description: 'Return the number of elements of a particular class within a browser of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_pop_over_of_ui_element',
  description: 'Return the number of elements of a particular class within a pop over of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_slider_of_ui_element',
  description: 'Return the number of elements of a particular class within a slider of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_appearance_preferences_object',
  description: 'Return the number of elements of a particular class within a appearance preferences object.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_busy_indicator_of_ui_element',
  description: 'Return the number of elements of a particular class within a busy indicator of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_dock_preferences_object',
  description: 'Return the number of elements of a particular class within a dock preferences object.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_group_of_ui_element',
  description: 'Return the number of elements of a particular class within a group of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_radio_group_of_ui_element',
  description: 'Return the number of elements of a particular class within a radio group of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_scripting_result_object',
  description: 'Return the number of elements of a particular class within a scripting result object.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_cd_and_dvd_preferences_object',
  description: 'Return the number of elements of a particular class within a CD and DVD preferences object.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_screen_saver_preferences_object',
  description: 'Return the number of elements of a particular class within a screen saver preferences object.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_table_of_ui_element',
  description: 'Return the number of elements of a particular class within a table of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_radio_button_of_radio_group',
  description: 'Return the number of elements of a particular class within a radio button of radio group.',
  inputSchema: {
    type: 'object',
    properties: {
      target_radio_group_required_string: {
        type: 'string',
        description: 'The radio group object to access (e.g., \"front radio group\", \"radio group 1\")'
      }
    },
    required: ['target_radio_group_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_grow_area_of_ui_element',
  description: 'Return the number of elements of a particular class within a grow area of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_scripting_enumeration_of_scripting_suite',
  description: 'Return the number of elements of a particular class within a scripting enumeration of scripting suite.',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      }
    },
    required: ['target_scripting_suite_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_scroll_bar_of_ui_element',
  description: 'Return the number of elements of a particular class within a scroll bar of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_scripting_property_of_scripting_class',
  description: 'Return the number of elements of a particular class within a scripting property of scripting class.',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_class_required_string: {
        type: 'string',
        description: 'The scripting class object to access (e.g., \"front scripting class\", \"scripting class 1\")'
      }
    },
    required: ['target_scripting_class_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_attribute_of_ui_element',
  description: 'Return the number of elements of a particular class within a attribute of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_menu_bar_item_of_menu_bar',
  description: 'Return the number of elements of a particular class within a menu bar item of menu bar.',
  inputSchema: {
    type: 'object',
    properties: {
      target_menu_bar_required_string: {
        type: 'string',
        description: 'The menu bar object to access (e.g., \"front menu bar\", \"menu bar 1\")'
      }
    },
    required: ['target_menu_bar_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_list_of_ui_element',
  description: 'Return the number of elements of a particular class within a list of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_disk',
  description: 'Return the number of elements of a particular class within a disk.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_location_of_network_preferences_object',
  description: 'Return the number of elements of a particular class within a location of network preferences object.',
  inputSchema: {
    type: 'object',
    properties: {
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      }
    },
    required: ['target_network_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_alias_of_disk',
  description: 'Return the number of elements of a particular class within a alias.',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_static_text_of_group',
  description: 'Return the number of elements of a particular class within a static text of group.',
  inputSchema: {
    type: 'object',
    properties: {
      target_group_required_string: {
        type: 'string',
        description: 'The group object to access (e.g., \"front group\", \"group 1\")'
      }
    },
    required: ['target_group_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_scripting_definition_object',
  description: 'Return the number of elements of a particular class within a scripting definition object.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_service_of_location',
  description: 'Return the number of elements of a particular class within a service of location.',
  inputSchema: {
    type: 'object',
    properties: {
      target_location_required_string: {
        type: 'string',
        description: 'The location object to access (e.g., \"front location\", \"location 1\")'
      }
    },
    required: ['target_location_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_screen_saver',
  description: 'Return the number of elements of a particular class within a screen saver.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_menu_item_of_menu',
  description: 'Return the number of elements of a particular class within a menu item of menu.',
  inputSchema: {
    type: 'object',
    properties: {
      target_menu_required_string: {
        type: 'string',
        description: 'The menu object to access (e.g., \"front menu\", \"menu 1\")'
      }
    },
    required: ['target_menu_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_local_domain_object',
  description: 'Return the number of elements of a particular class within a local domain object.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_text_area_of_ui_element',
  description: 'Return the number of elements of a particular class within a text area of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_value_indicator_of_scroll_bar',
  description: 'Return the number of elements of a particular class within a value indicator of scroll bar.',
  inputSchema: {
    type: 'object',
    properties: {
      target_scroll_bar_required_string: {
        type: 'string',
        description: 'The scroll bar object to access (e.g., \"front scroll bar\", \"scroll bar 1\")'
      }
    },
    required: ['target_scroll_bar_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_progress_indicator_of_ui_element',
  description: 'Return the number of elements of a particular class within a progress indicator of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_scripting_element_of_scripting_class',
  description: 'Return the number of elements of a particular class within a scripting element of scripting class.',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_class_required_string: {
        type: 'string',
        description: 'The scripting class object to access (e.g., \"front scripting class\", \"scripting class 1\")'
      }
    },
    required: ['target_scripting_class_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_drawer_of_ui_element',
  description: 'Return the number of elements of a particular class within a drawer of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_tab_group_of_ui_element',
  description: 'Return the number of elements of a particular class within a tab group of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_system_domain_object',
  description: 'Return the number of elements of a particular class within a system domain object.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_window_of_process',
  description: 'Return the number of elements of a particular class within a window of process.',
  inputSchema: {
    type: 'object',
    properties: {
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_network_preferences_object',
  description: 'Return the number of elements of a particular class within a network preferences object.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_outline_of_ui_element',
  description: 'Return the number of elements of a particular class within a outline of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_pop_up_button_of_ui_element',
  description: 'Return the number of elements of a particular class within a pop up button of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_splitter_group_of_ui_element',
  description: 'Return the number of elements of a particular class within a splitter group of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_action_of_ui_element',
  description: 'Return the number of elements of a particular class within a action of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_disk_item_of_alias',
  description: 'Return the number of elements of a particular class within a disk item.',
  inputSchema: {
    type: 'object',
    properties: {
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      }
    },
    required: ['target_alias_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_file_package_of_alias',
  description: 'Return the number of elements of a particular class within a file package.',
  inputSchema: {
    type: 'object',
    properties: {
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      }
    },
    required: ['target_alias_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_process',
  description: 'Return the number of elements of a particular class within a process.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_scripting_parameter_of_scripting_command',
  description: 'Return the number of elements of a particular class within a scripting parameter of scripting command.',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_command_required_string: {
        type: 'string',
        description: 'The scripting command object to access (e.g., \"front scripting command\", \"scripting command 1\")'
      }
    },
    required: ['target_scripting_command_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_insertion_preference',
  description: 'Return the number of elements of a particular class within a insertion preference.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_scripting_class_of_scripting_suite',
  description: 'Return the number of elements of a particular class within a scripting class of scripting suite.',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      }
    },
    required: ['target_scripting_suite_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_configuration_of_service',
  description: 'Return the number of elements of a particular class within a configuration of service.',
  inputSchema: {
    type: 'object',
    properties: {
      target_service_required_string: {
        type: 'string',
        description: 'The service object to access (e.g., \"front service\", \"service 1\")'
      }
    },
    required: ['target_service_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_ui_element_of_window',
  description: 'Return the number of elements of a particular class within a UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      }
    },
    required: ['target_window_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_property_list_item',
  description: 'Return the number of elements of a particular class within a property list item.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_domain',
  description: 'Return the number of elements of a particular class within a domain.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_menu_bar_of_process',
  description: 'Return the number of elements of a particular class within a menu bar of process.',
  inputSchema: {
    type: 'object',
    properties: {
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_color_well_of_ui_element',
  description: 'Return the number of elements of a particular class within a color well of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_scripting_command_of_scripting_suite',
  description: 'Return the number of elements of a particular class within a scripting command of scripting suite.',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      }
    },
    required: ['target_scripting_suite_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_button_of_scroll_bar',
  description: 'Return the number of elements of a particular class within a button of scroll bar.',
  inputSchema: {
    type: 'object',
    properties: {
      target_scroll_bar_required_string: {
        type: 'string',
        description: 'The scroll bar object to access (e.g., \"front scroll bar\", \"scroll bar 1\")'
      }
    },
    required: ['target_scroll_bar_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_application_process',
  description: 'Return the number of elements of a particular class within a application process.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_toolbar_of_ui_element',
  description: 'Return the number of elements of a particular class within a toolbar of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_desktop',
  description: 'Return the number of elements of a particular class within a desktop.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_user_domain_object',
  description: 'Return the number of elements of a particular class within a user domain object.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_image_of_static_text',
  description: 'Return the number of elements of a particular class within a image of static text.',
  inputSchema: {
    type: 'object',
    properties: {
      target_static_text_required_string: {
        type: 'string',
        description: 'The static text object to access (e.g., \"front static text\", \"static text 1\")'
      }
    },
    required: ['target_static_text_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_login_item',
  description: 'Return the number of elements of a particular class within a login item.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_user',
  description: 'Return the number of elements of a particular class within a user.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_relevance_indicator_of_ui_element',
  description: 'Return the number of elements of a particular class within a relevance indicator of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_scripting_suite_of_scripting_definition_object',
  description: 'Return the number of elements of a particular class within a scripting suite of scripting definition object.',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_xml_element_of_xml_data',
  description: 'Return the number of elements of a particular class within a XML element of XML data.',
  inputSchema: {
    type: 'object',
    properties: {
      target_xml_data_required_string: {
        type: 'string',
        description: 'The XML data object to access (e.g., \"front XML data\", \"XML data 1\")'
      }
    },
    required: ['target_xml_data_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_print_settings',
  description: 'Return the number of elements of a particular class within a print settings.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_xml_file',
  description: 'Return the number of elements of a particular class within a XML file.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_menu_of_menu_bar',
  description: 'Return the number of elements of a particular class within a menu of menu bar.',
  inputSchema: {
    type: 'object',
    properties: {
      target_menu_bar_required_string: {
        type: 'string',
        description: 'The menu bar object to access (e.g., \"front menu bar\", \"menu bar 1\")'
      }
    },
    required: ['target_menu_bar_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_combo_box_of_ui_element',
  description: 'Return the number of elements of a particular class within a combo box of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_xml_data',
  description: 'Return the number of elements of a particular class within a XML data.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_sheet_of_ui_element',
  description: 'Return the number of elements of a particular class within a sheet of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_text_field_of_ui_element',
  description: 'Return the number of elements of a particular class within a text field of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_scripting_enumerator_of_scripting_enumeration',
  description: 'Return the number of elements of a particular class within a scripting enumerator of scripting enumeration.',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_enumeration_required_string: {
        type: 'string',
        description: 'The scripting enumeration object to access (e.g., \"front scripting enumeration\", \"scripting enumeration 1\")'
      }
    },
    required: ['target_scripting_enumeration_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_interface_of_network_preferences_object',
  description: 'Return the number of elements of a particular class within a interface of network preferences object.',
  inputSchema: {
    type: 'object',
    properties: {
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      }
    },
    required: ['target_network_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_row_of_ui_element',
  description: 'Return the number of elements of a particular class within a row of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_document',
  description: 'Return the number of elements of a particular class within a document.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_incrementor_of_ui_element',
  description: 'Return the number of elements of a particular class within a incrementor of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_file_of_alias',
  description: 'Return the number of elements of a particular class within a file.',
  inputSchema: {
    type: 'object',
    properties: {
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      }
    },
    required: ['target_alias_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_folder_of_alias',
  description: 'Return the number of elements of a particular class within a folder.',
  inputSchema: {
    type: 'object',
    properties: {
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      }
    },
    required: ['target_alias_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_network_domain_object',
  description: 'Return the number of elements of a particular class within a network domain object.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_desk_accessory_process',
  description: 'Return the number of elements of a particular class within a desk accessory process.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_scroll_area_of_ui_element',
  description: 'Return the number of elements of a particular class within a scroll area of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_column_of_ui_element',
  description: 'Return the number of elements of a particular class within a column of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_property_list_file',
  description: 'Return the number of elements of a particular class within a property list file.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'count_menu_button_of_ui_element',
  description: 'Return the number of elements of a particular class within a menu button of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_splitter_of_ui_element',
  description: 'Return the number of elements of a particular class within a splitter of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      }
    },
    required: ['target_ui_element_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'count_checkbox_of_group',
  description: 'Return the number of elements of a particular class within a checkbox of group.',
  inputSchema: {
    type: 'object',
    properties: {
      target_group_required_string: {
        type: 'string',
        description: 'The group object to access (e.g., \"front group\", \"group 1\")'
      }
    },
    required: ['target_group_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'delete_for_disk',
  description: 'Delete a disk.',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'delete_for_alias_of_disk',
  description: 'Delete a alias.',
  inputSchema: {
    type: 'object',
    properties: {
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'delete_for_file_package_of_alias_of_disk',
  description: 'Delete a file package.',
  inputSchema: {
    type: 'object',
    properties: {
      target_file_package_required_string: {
        type: 'string',
        description: 'The file package object to access (e.g., \"front file package\", \"file package 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_file_package_required_string', 'target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'delete_for_folder_of_alias_of_disk',
  description: 'Delete a folder.',
  inputSchema: {
    type: 'object',
    properties: {
      target_folder_required_string: {
        type: 'string',
        description: 'The folder object to access (e.g., \"front folder\", \"folder 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_folder_required_string', 'target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'duplicate',
  description: 'Copy an object.',
  inputSchema: {
    type: 'object',
    properties: {
      direct_parameter_required_specifier: {
        type: 'string',
        description: 'The object(s) to copy.'
      },
      to_optional_location_specifier: {
        type: 'string',
        description: 'The location for the new copy or copies.'
      },
      with_properties_optional_record: {
        type: 'string',
        description: 'Properties to set in the new copy or copies right away.'
      }
    },
    required: ['direct_parameter_required_specifier'],
    additionalProperties: false
  }
},
          {
  name: 'exists',
  description: 'Verify that an object exists.',
  inputSchema: {
    type: 'object',
    properties: {
      direct_parameter_required_any: {
        type: 'string',
        description: 'The object(s) to check.'
      }
    },
    required: ['direct_parameter_required_any'],
    additionalProperties: false
  }
},
          {
  name: 'make_security_preferences_object',
  description: 'Create a new security preferences object.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      },
      with_properties_optional_integer_log_out_when_inactive_interval: {
        type: 'number',
        description: 'Optional log out when inactive interval property: The interval of inactivity after which the computer will log out'
      },
      with_properties_optional_boolean_automatic_login: {
        type: 'boolean',
        description: 'Optional automatic login property: Is automatic login allowed?'
      },
      with_properties_optional_boolean_log_out_when_inactive: {
        type: 'boolean',
        description: 'Optional log out when inactive property: Will the computer log out when inactive?'
      },
      with_properties_optional_boolean_require_password_to_wake: {
        type: 'boolean',
        description: 'Optional require password to wake property: Is a password required to wake the computer from sleep or screen saver?'
      },
      with_properties_optional_boolean_require_password_to_unlock: {
        type: 'boolean',
        description: 'Optional require password to unlock property: Is a password required to unlock secure preferences?'
      },
      with_properties_optional_boolean_secure_virtual_memory: {
        type: 'boolean',
        description: 'Optional secure virtual memory property: Is secure virtual memory being used?'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_classic_domain_object',
  description: 'Create a new Classic domain object.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_xml_attribute_of_xml_element',
  description: 'Create a new XML attribute of XML element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_xml_element: {
        type: 'string',
        description: 'The XML element location where the XML attribute should be created (e.g., \"XML element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      },
      with_properties_optional_missing_value_value: {
        type: 'string',
        description: 'Optional value property: the value of the XML attribute'
      }
    },
    required: ['at_required_location_specifier_xml_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_browser_of_ui_element',
  description: 'Create a new browser of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the browser should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_pop_over_of_ui_element',
  description: 'Create a new pop over of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the pop over should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_slider_of_ui_element',
  description: 'Create a new slider of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the slider should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_appearance_preferences_object',
  description: 'Create a new appearance preferences object.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      },
      with_properties_optional_integer_recent_applications_limit: {
        type: 'number',
        description: 'Optional recent applications limit property: the number of recent applications to track'
      },
      with_properties_optional_fontsmoothingstyles_font_smoothing_style: {
        type: 'string',
        description: 'Optional font smoothing style property: the method used for smoothing fonts'
      },
      with_properties_optional_appearances_appearance: {
        type: 'string',
        description: 'Optional appearance property: the overall look of buttons, menus and windows'
      },
      with_properties_optional_integer_recent_servers_limit: {
        type: 'number',
        description: 'Optional recent servers limit property: the number of recent servers to track'
      },
      with_properties_optional_scrollpagebehaviors_scroll_bar_action: {
        type: 'string',
        description: 'Optional scroll bar action property: the action performed by clicking the scroll bar'
      },
      with_properties_optional_boolean_smooth_scrolling: {
        type: 'boolean',
        description: 'Optional smooth scrolling property: Is smooth scrolling used?'
      },
      with_properties_optional_integer_recent_documents_limit: {
        type: 'number',
        description: 'Optional recent documents limit property: the number of recent documents to track'
      },
      with_properties_optional_boolean_font_smoothing: {
        type: 'boolean',
        description: 'Optional font smoothing property: Is font smoothing on?'
      },
      with_properties_optional_missing_value_highlight_color: {
        type: 'string',
        description: 'Optional highlight color property: color used for hightlighting selected text and lists'
      },
      with_properties_optional_boolean_dark_mode: {
        type: 'boolean',
        description: 'Optional dark mode property: use dark menu bar and dock'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_busy_indicator_of_ui_element',
  description: 'Create a new busy indicator of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the busy indicator should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_dock_preferences_object',
  description: 'Create a new dock preferences object.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      },
      with_properties_optional_boolean_minimize_into_application: {
        type: 'boolean',
        description: 'Optional minimize into application property: minimize window into its application?'
      },
      with_properties_optional_boolean_autohide: {
        type: 'boolean',
        description: 'Optional autohide property: is autohiding the dock on or off?'
      },
      with_properties_optional_real_magnification_size: {
        type: 'number',
        description: 'Optional magnification size property: maximum magnification size when magnification is on (between 0.0 (minimum) and 1.0 (maximum))'
      },
      with_properties_optional_dpbh_double_click_behavior: {
        type: 'string',
        description: 'Optional double click behavior property: behaviour when double clicking window a title bar'
      },
      with_properties_optional_boolean_autohide_menu_bar: {
        type: 'boolean',
        description: 'Optional autohide menu bar property: is autohiding the menu bar on or off?'
      },
      with_properties_optional_dpef_minimize_effect: {
        type: 'string',
        description: 'Optional minimize effect property: minimization effect'
      },
      with_properties_optional_boolean_magnification: {
        type: 'boolean',
        description: 'Optional magnification property: is magnification on or off?'
      },
      with_properties_optional_dpls_screen_edge: {
        type: 'string',
        description: 'Optional screen edge property: location on screen'
      },
      with_properties_optional_boolean_show_recents: {
        type: 'boolean',
        description: 'Optional show recents property: show recent applications?'
      },
      with_properties_optional_boolean_show_indicators: {
        type: 'boolean',
        description: 'Optional show indicators property: show indicators for open applications?'
      },
      with_properties_optional_real_dock_size: {
        type: 'number',
        description: 'Optional dock size property: size/height of the items (between 0.0 (minimum) and 1.0 (maximum))'
      },
      with_properties_optional_boolean_animate: {
        type: 'boolean',
        description: 'Optional animate property: is the animation of opening applications on or off?'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_group_of_ui_element',
  description: 'Create a new group of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the group should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_radio_group_of_ui_element',
  description: 'Create a new radio group of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the radio group should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_scripting_result_object',
  description: 'Create a new scripting result object.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_cd_and_dvd_preferences_object',
  description: 'Create a new CD and DVD preferences object.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_screen_saver_preferences_object',
  description: 'Create a new screen saver preferences object.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      },
      with_properties_optional_boolean_main_screen_only: {
        type: 'boolean',
        description: 'Optional main screen only property: should the screen saver be shown only on the main screen?'
      },
      with_properties_optional_integer_delay_interval: {
        type: 'number',
        description: 'Optional delay interval property: number of seconds of idle time before the screen saver starts; zero for never'
      },
      with_properties_optional_boolean_show_clock: {
        type: 'boolean',
        description: 'Optional show clock property: should a clock appear over the screen saver?'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_table_of_ui_element',
  description: 'Create a new table of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the table should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_radio_button_of_radio_group',
  description: 'Create a new radio button of radio group.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_radio_group: {
        type: 'string',
        description: 'The radio group location where the radio button should be created (e.g., \"radio group 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_radio_group'],
    additionalProperties: false
  }
},
          {
  name: 'make_grow_area_of_ui_element',
  description: 'Create a new grow area of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the grow area should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_scripting_enumeration_of_scripting_suite',
  description: 'Create a new scripting enumeration of scripting suite.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_scripting_suite: {
        type: 'string',
        description: 'The scripting suite location where the scripting enumeration should be created (e.g., \"scripting suite 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_scripting_suite'],
    additionalProperties: false
  }
},
          {
  name: 'make_scroll_bar_of_ui_element',
  description: 'Create a new scroll bar of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the scroll bar should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_scripting_property_of_scripting_class',
  description: 'Create a new scripting property of scripting class.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_scripting_class: {
        type: 'string',
        description: 'The scripting class location where the scripting property should be created (e.g., \"scripting class 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_scripting_class'],
    additionalProperties: false
  }
},
          {
  name: 'make_attribute_of_ui_element',
  description: 'Create a new attribute of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the attribute should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      },
      with_properties_optional_missing_value_value: {
        type: 'string',
        description: 'Optional value property: the current value of the attribute'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_menu_bar_item_of_menu_bar',
  description: 'Create a new menu bar item of menu bar.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_menu_bar: {
        type: 'string',
        description: 'The menu bar location where the menu bar item should be created (e.g., \"menu bar 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_menu_bar'],
    additionalProperties: false
  }
},
          {
  name: 'make_list_of_ui_element',
  description: 'Create a new list of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the list should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_disk',
  description: 'Create a new disk.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      },
      with_properties_optional_boolean_ignore_privileges: {
        type: 'boolean',
        description: 'Optional ignore privileges property: Ignore permissions on this disk?'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_location_of_network_preferences_object',
  description: 'Create a new location of network preferences object.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_network_preferences_object: {
        type: 'string',
        description: 'The network preferences object location where the location should be created (e.g., \"network preferences object 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      },
      with_properties_optional_text_name: {
        type: 'string',
        description: 'Optional name property: the name of the location'
      }
    },
    required: ['at_required_location_specifier_network_preferences_object'],
    additionalProperties: false
  }
},
          {
  name: 'make_alias_of_disk',
  description: 'Create a new alias.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_disk: {
        type: 'string',
        description: 'The disk location where the alias should be created (e.g., \"disk 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      },
      with_properties_optional_missing_value_file_type: {
        type: 'string',
        description: 'Optional file type property: the OSType identifying the type of data contained in the alias'
      },
      with_properties_optional_boolean_stationery: {
        type: 'boolean',
        description: 'Optional stationery property: Is the alias a stationery pad?'
      },
      with_properties_optional_missing_value_default_application: {
        type: 'string',
        description: 'Optional default application property: the application that will launch if the alias is opened'
      },
      with_properties_optional_missing_value_creator_type: {
        type: 'string',
        description: 'Optional creator type property: the OSType identifying the application that created the alias'
      }
    },
    required: ['at_required_location_specifier_disk'],
    additionalProperties: false
  }
},
          {
  name: 'make_static_text_of_group',
  description: 'Create a new static text of group.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_group: {
        type: 'string',
        description: 'The group location where the static text should be created (e.g., \"group 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_group'],
    additionalProperties: false
  }
},
          {
  name: 'make_scripting_definition_object',
  description: 'Create a new scripting definition object.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_service_of_location',
  description: 'Create a new service of location.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_location: {
        type: 'string',
        description: 'The location location where the service should be created (e.g., \"location 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      },
      with_properties_optional_configuration_current_configuration: {
        type: 'string',
        description: 'Optional current configuration property: the currently selected configuration'
      },
      with_properties_optional_text_name: {
        type: 'string',
        description: 'Optional name property: the name of the service'
      }
    },
    required: ['at_required_location_specifier_location'],
    additionalProperties: false
  }
},
          {
  name: 'make_screen_saver',
  description: 'Create a new screen saver.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      },
      with_properties_optional_text_picture_display_style: {
        type: 'string',
        description: 'Optional picture display style property: effect to use when displaying picture-based screen savers (slideshow, collage, or mosaic)'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_menu_item_of_menu',
  description: 'Create a new menu item of menu.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_menu: {
        type: 'string',
        description: 'The menu location where the menu item should be created (e.g., \"menu 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_menu'],
    additionalProperties: false
  }
},
          {
  name: 'make_local_domain_object',
  description: 'Create a new local domain object.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_text_area_of_ui_element',
  description: 'Create a new text area of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the text area should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_value_indicator_of_scroll_bar',
  description: 'Create a new value indicator of scroll bar.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_scroll_bar: {
        type: 'string',
        description: 'The scroll bar location where the value indicator should be created (e.g., \"scroll bar 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_scroll_bar'],
    additionalProperties: false
  }
},
          {
  name: 'make_progress_indicator_of_ui_element',
  description: 'Create a new progress indicator of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the progress indicator should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_scripting_element_of_scripting_class',
  description: 'Create a new scripting element of scripting class.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_scripting_class: {
        type: 'string',
        description: 'The scripting class location where the scripting element should be created (e.g., \"scripting class 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_scripting_class'],
    additionalProperties: false
  }
},
          {
  name: 'make_drawer_of_ui_element',
  description: 'Create a new drawer of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the drawer should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_tab_group_of_ui_element',
  description: 'Create a new tab group of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the tab group should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_system_domain_object',
  description: 'Create a new system domain object.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_window_of_process',
  description: 'Create a new window of process.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_process: {
        type: 'string',
        description: 'The process location where the window should be created (e.g., \"process 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      },
      with_properties_optional_missing_value_value: {
        type: 'string',
        description: 'Optional value property: the current value of the window'
      },
      with_properties_optional_missing_value_position: {
        type: 'string',
        description: 'Optional position property: the position of the window'
      },
      with_properties_optional_integer_index: {
        type: 'number',
        description: 'Optional index property: The index of the window, ordered front to back.'
      },
      with_properties_optional_missing_value_size: {
        type: 'string',
        description: 'Optional size property: the size of the window'
      },
      with_properties_optional_rectangle_bounds: {
        type: 'string',
        description: 'Optional bounds property: The bounding rectangle of the window.'
      },
      with_properties_optional_boolean_miniaturized: {
        type: 'boolean',
        description: 'Optional miniaturized property: Is the window minimized right now?'
      },
      with_properties_optional_missing_value_selected: {
        type: 'string',
        description: 'Optional selected property: Is the window selected?'
      },
      with_properties_optional_boolean_zoomed: {
        type: 'boolean',
        description: 'Optional zoomed property: Is the window zoomed right now?'
      },
      with_properties_optional_missing_value_focused: {
        type: 'string',
        description: 'Optional focused property: Is the focus on this window?'
      },
      with_properties_optional_boolean_visible: {
        type: 'boolean',
        description: 'Optional visible property: Is the window visible right now?'
      }
    },
    required: ['at_required_location_specifier_process'],
    additionalProperties: false
  }
},
          {
  name: 'make_network_preferences_object',
  description: 'Create a new network preferences object.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      },
      with_properties_optional_location_current_location: {
        type: 'string',
        description: 'Optional current location property: the current location'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_outline_of_ui_element',
  description: 'Create a new outline of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the outline should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_pop_up_button_of_ui_element',
  description: 'Create a new pop up button of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the pop up button should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_splitter_group_of_ui_element',
  description: 'Create a new splitter group of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the splitter group should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_action_of_ui_element',
  description: 'Create a new action of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the action should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_disk_item_of_alias',
  description: 'Create a new disk item.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_alias: {
        type: 'string',
        description: 'The alias location where the disk item should be created (e.g., \"alias 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      },
      with_properties_optional_date_modification_date: {
        type: 'string',
        description: 'Optional modification date property: the date on which the disk item was last modified'
      },
      with_properties_optional_boolean_visible: {
        type: 'boolean',
        description: 'Optional visible property: Is the disk item visible?'
      },
      with_properties_optional_text_name: {
        type: 'string',
        description: 'Optional name property: the name of the disk item'
      }
    },
    required: ['at_required_location_specifier_alias'],
    additionalProperties: false
  }
},
          {
  name: 'make_file_package_of_alias',
  description: 'Create a new file package.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_alias: {
        type: 'string',
        description: 'The alias location where the file package should be created (e.g., \"alias 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_alias'],
    additionalProperties: false
  }
},
          {
  name: 'make_process',
  description: 'Create a new process.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      },
      with_properties_optional_boolean_frontmost: {
        type: 'boolean',
        description: 'Optional frontmost property: Is the process the frontmost process'
      },
      with_properties_optional_missing_value_visible: {
        type: 'string',
        description: 'Optional visible property: Is the process\' layer visible?'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_scripting_parameter_of_scripting_command',
  description: 'Create a new scripting parameter of scripting command.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_scripting_command: {
        type: 'string',
        description: 'The scripting command location where the scripting parameter should be created (e.g., \"scripting command 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_scripting_command'],
    additionalProperties: false
  }
},
          {
  name: 'make_insertion_preference',
  description: 'Create a new insertion preference.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      },
      with_properties_optional_missing_value_custom_script: {
        type: 'string',
        description: 'Optional custom script property: AppleScript to launch or activate on the insertion of media'
      },
      with_properties_optional_missing_value_custom_application: {
        type: 'string',
        description: 'Optional custom application property: application to launch or activate on the insertion of media'
      },
      with_properties_optional_dhac_insertion_action: {
        type: 'string',
        description: 'Optional insertion action property: action to perform on media insertion'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_scripting_class_of_scripting_suite',
  description: 'Create a new scripting class of scripting suite.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_scripting_suite: {
        type: 'string',
        description: 'The scripting suite location where the scripting class should be created (e.g., \"scripting suite 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_scripting_suite'],
    additionalProperties: false
  }
},
          {
  name: 'make_configuration_of_service',
  description: 'Create a new configuration of service.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_service: {
        type: 'string',
        description: 'The service location where the configuration should be created (e.g., \"service 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      },
      with_properties_optional_text_account_name: {
        type: 'string',
        description: 'Optional account name property: the name used to authenticate'
      }
    },
    required: ['at_required_location_specifier_service'],
    additionalProperties: false
  }
},
          {
  name: 'make_ui_element_of_window',
  description: 'Create a new UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_window: {
        type: 'string',
        description: 'The window location where the UI element should be created (e.g., \"window 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      },
      with_properties_optional_missing_value_selected: {
        type: 'string',
        description: 'Optional selected property: Is the UI element selected?'
      },
      with_properties_optional_missing_value_position: {
        type: 'string',
        description: 'Optional position property: the position of the UI element'
      },
      with_properties_optional_missing_value_focused: {
        type: 'string',
        description: 'Optional focused property: Is the focus on this UI element?'
      },
      with_properties_optional_missing_value_size: {
        type: 'string',
        description: 'Optional size property: the size of the UI element'
      },
      with_properties_optional_missing_value_value: {
        type: 'string',
        description: 'Optional value property: the current value of the UI element'
      }
    },
    required: ['at_required_location_specifier_window'],
    additionalProperties: false
  }
},
          {
  name: 'make_property_list_item',
  description: 'Create a new property list item.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      },
      with_properties_optional_missing_value_value: {
        type: 'string',
        description: 'Optional value property: the value of the property list item'
      },
      with_properties_optional_text_text: {
        type: 'string',
        description: 'Optional text property: the text representation of the property list data'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_domain',
  description: 'Create a new domain.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_menu_bar_of_process',
  description: 'Create a new menu bar of process.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_process: {
        type: 'string',
        description: 'The process location where the menu bar should be created (e.g., \"process 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_process'],
    additionalProperties: false
  }
},
          {
  name: 'make_color_well_of_ui_element',
  description: 'Create a new color well of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the color well should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_scripting_command_of_scripting_suite',
  description: 'Create a new scripting command of scripting suite.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_scripting_suite: {
        type: 'string',
        description: 'The scripting suite location where the scripting command should be created (e.g., \"scripting suite 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_scripting_suite'],
    additionalProperties: false
  }
},
          {
  name: 'make_button_of_scroll_bar',
  description: 'Create a new button of scroll bar.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_scroll_bar: {
        type: 'string',
        description: 'The scroll bar location where the button should be created (e.g., \"scroll bar 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_scroll_bar'],
    additionalProperties: false
  }
},
          {
  name: 'make_application_process',
  description: 'Create a new application process.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_toolbar_of_ui_element',
  description: 'Create a new toolbar of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the toolbar should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_desktop',
  description: 'Create a new desktop.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      },
      with_properties_optional_missing_value_pictures_folder: {
        type: 'string',
        description: 'Optional pictures folder property: path to folder containing pictures for changing desktop background'
      },
      with_properties_optional_real_change_interval: {
        type: 'number',
        description: 'Optional change interval property: number of seconds to wait between changing the desktop picture'
      },
      with_properties_optional_boolean_random_order: {
        type: 'boolean',
        description: 'Optional random order property: turn on for random ordering of changing desktop pictures'
      },
      with_properties_optional_integer_picture_rotation: {
        type: 'number',
        description: 'Optional picture rotation property: never, using interval, using login, after sleep'
      },
      with_properties_optional_missing_value_picture: {
        type: 'string',
        description: 'Optional picture property: path to file used as desktop picture'
      },
      with_properties_optional_dynamic_style_dynamic_style: {
        type: 'string',
        description: 'Optional dynamic style property: desktop picture dynamic style'
      },
      with_properties_optional_boolean_translucent_menu_bar: {
        type: 'boolean',
        description: 'Optional translucent menu bar property: indicates whether the menu bar is translucent'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_user_domain_object',
  description: 'Create a new user domain object.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_image_of_static_text',
  description: 'Create a new image of static text.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_static_text: {
        type: 'string',
        description: 'The static text location where the image should be created (e.g., \"static text 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_static_text'],
    additionalProperties: false
  }
},
          {
  name: 'make_login_item',
  description: 'Create a new login item.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      },
      with_properties_optional_boolean_hidden: {
        type: 'boolean',
        description: 'Optional hidden property: Is the Login Item hidden when launched?'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_user',
  description: 'Create a new user.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      },
      with_properties_optional_missing_value_picture_path: {
        type: 'string',
        description: 'Optional picture path property: path to user\'s picture. Can be set for current user only!'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_relevance_indicator_of_ui_element',
  description: 'Create a new relevance indicator of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the relevance indicator should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_scripting_suite_of_scripting_definition_object',
  description: 'Create a new scripting suite of scripting definition object.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_scripting_definition_object: {
        type: 'string',
        description: 'The scripting definition object location where the scripting suite should be created (e.g., \"scripting definition object 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_scripting_definition_object'],
    additionalProperties: false
  }
},
          {
  name: 'make_xml_element_of_xml_data',
  description: 'Create a new XML element of XML data.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_xml_data: {
        type: 'string',
        description: 'The XML data location where the XML element should be created (e.g., \"XML data 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      },
      with_properties_optional_missing_value_value: {
        type: 'string',
        description: 'Optional value property: the value of the XML element'
      }
    },
    required: ['at_required_location_specifier_xml_data'],
    additionalProperties: false
  }
},
          {
  name: 'make_print_settings',
  description: 'Create a new print settings.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      },
      with_properties_optional_integer_copies: {
        type: 'number',
        description: 'Optional copies property: the number of copies of a document to be printed'
      },
      with_properties_optional_text_fax_number: {
        type: 'string',
        description: 'Optional fax number property: for fax number'
      },
      with_properties_optional_integer_pages_down: {
        type: 'number',
        description: 'Optional pages down property: number of logical pages laid out down a physical page'
      },
      with_properties_optional_text_target_printer: {
        type: 'string',
        description: 'Optional target printer property: for target printer'
      },
      with_properties_optional_integer_ending_page: {
        type: 'number',
        description: 'Optional ending page property: the last page of the document to be printed'
      },
      with_properties_optional_integer_pages_across: {
        type: 'number',
        description: 'Optional pages across property: number of logical pages laid across a physical page'
      },
      with_properties_optional_integer_starting_page: {
        type: 'number',
        description: 'Optional starting page property: the first page of the document to be printed'
      },
      with_properties_optional_date_requested_print_time: {
        type: 'string',
        description: 'Optional requested print time property: the time at which the desktop printer should print the document'
      },
      with_properties_optional_boolean_collating: {
        type: 'boolean',
        description: 'Optional collating property: Should printed copies be collated?'
      },
      with_properties_optional_enum_error_handling: {
        type: 'string',
        description: 'Optional error handling property: how errors are handled'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_xml_file',
  description: 'Create a new XML file.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_menu_of_menu_bar',
  description: 'Create a new menu of menu bar.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_menu_bar: {
        type: 'string',
        description: 'The menu bar location where the menu should be created (e.g., \"menu bar 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_menu_bar'],
    additionalProperties: false
  }
},
          {
  name: 'make_combo_box_of_ui_element',
  description: 'Create a new combo box of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the combo box should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_xml_data',
  description: 'Create a new XML data.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      },
      with_properties_optional_text_name: {
        type: 'string',
        description: 'Optional name property: the name of the XML data'
      },
      with_properties_optional_text_text: {
        type: 'string',
        description: 'Optional text property: the text representation of the XML data'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_sheet_of_ui_element',
  description: 'Create a new sheet of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the sheet should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_text_field_of_ui_element',
  description: 'Create a new text field of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the text field should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_scripting_enumerator_of_scripting_enumeration',
  description: 'Create a new scripting enumerator of scripting enumeration.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_scripting_enumeration: {
        type: 'string',
        description: 'The scripting enumeration location where the scripting enumerator should be created (e.g., \"scripting enumeration 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_scripting_enumeration'],
    additionalProperties: false
  }
},
          {
  name: 'make_interface_of_network_preferences_object',
  description: 'Create a new interface of network preferences object.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_network_preferences_object: {
        type: 'string',
        description: 'The network preferences object location where the interface should be created (e.g., \"network preferences object 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      },
      with_properties_optional_text_duplex: {
        type: 'string',
        description: 'Optional duplex property: the duplex setting  half | full | full with flow control'
      },
      with_properties_optional_integer_speed: {
        type: 'number',
        description: 'Optional speed property: ethernet speed 10 | 100 | 1000'
      },
      with_properties_optional_integer_mtu: {
        type: 'number',
        description: 'Optional mtu property: the packet size'
      },
      with_properties_optional_boolean_automatic: {
        type: 'boolean',
        description: 'Optional automatic property: configure the interface speed, duplex, and mtu automatically?'
      }
    },
    required: ['at_required_location_specifier_network_preferences_object'],
    additionalProperties: false
  }
},
          {
  name: 'make_row_of_ui_element',
  description: 'Create a new row of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the row should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_document',
  description: 'Create a new document.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_incrementor_of_ui_element',
  description: 'Create a new incrementor of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the incrementor should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_file_of_alias',
  description: 'Create a new file.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_alias: {
        type: 'string',
        description: 'The alias location where the file should be created (e.g., \"alias 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      },
      with_properties_optional_missing_value_file_type: {
        type: 'string',
        description: 'Optional file type property: the OSType identifying the type of data contained in the file'
      },
      with_properties_optional_boolean_stationery: {
        type: 'boolean',
        description: 'Optional stationery property: Is the file a stationery pad?'
      },
      with_properties_optional_missing_value_default_application: {
        type: 'string',
        description: 'Optional default application property: the application that will launch if the file is opened'
      },
      with_properties_optional_missing_value_creator_type: {
        type: 'string',
        description: 'Optional creator type property: the OSType identifying the application that created the file'
      }
    },
    required: ['at_required_location_specifier_alias'],
    additionalProperties: false
  }
},
          {
  name: 'make_folder_of_alias',
  description: 'Create a new folder.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_alias: {
        type: 'string',
        description: 'The alias location where the folder should be created (e.g., \"alias 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_alias'],
    additionalProperties: false
  }
},
          {
  name: 'make_network_domain_object',
  description: 'Create a new network domain object.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_desk_accessory_process',
  description: 'Create a new desk accessory process.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_scroll_area_of_ui_element',
  description: 'Create a new scroll area of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the scroll area should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_column_of_ui_element',
  description: 'Create a new column of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the column should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_property_list_file',
  description: 'Create a new property list file.',
  inputSchema: {
    type: 'object',
    properties: {
      at_optional_location_specifier: {
        type: 'string',
        description: 'The location at which to insert the object.'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'make_menu_button_of_ui_element',
  description: 'Create a new menu button of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the menu button should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_splitter_of_ui_element',
  description: 'Create a new splitter of UI element.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_ui_element: {
        type: 'string',
        description: 'The UI element location where the splitter should be created (e.g., \"UI element 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'make_checkbox_of_group',
  description: 'Create a new checkbox of group.',
  inputSchema: {
    type: 'object',
    properties: {
      at_required_location_specifier_group: {
        type: 'string',
        description: 'The group location where the checkbox should be created (e.g., \"group 1\")'
      },
      with_data_optional_any: {
        type: 'string',
        description: 'The initial contents of the object.'
      }
    },
    required: ['at_required_location_specifier_group'],
    additionalProperties: false
  }
},
          {
  name: 'move_for_disk_item_of_alias_of_disk',
  description: 'Move a disk item to a new location.',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_item_required_string: {
        type: 'string',
        description: 'The disk item object to access (e.g., \"front disk item\", \"disk item 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      },
      to_required_location_specifier: {
        type: 'string',
        description: 'The new location for the object(s).'
      }
    },
    required: ['target_disk_item_required_string', 'target_alias_required_string', 'target_disk_required_string', 'to_required_location_specifier'],
    additionalProperties: false
  }
},
          {
  name: 'get_name_of_application',
  description: 'Get The name of the application.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_frontmost_of_application',
  description: 'Get Is this the active application?',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_version_of_application',
  description: 'Get The version number of the application.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_name_of_document',
  description: 'Get Its name. of document',
  inputSchema: {
    type: 'object',
    properties: {
      target_document_required_string: {
        type: 'string',
        description: 'The document object to access (e.g., \"front document\", \"document 1\")'
      }
    },
    required: ['target_document_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_modified_of_document',
  description: 'Get Has it been modified since the last save? of document',
  inputSchema: {
    type: 'object',
    properties: {
      target_document_required_string: {
        type: 'string',
        description: 'The document object to access (e.g., \"front document\", \"document 1\")'
      }
    },
    required: ['target_document_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_file_of_document',
  description: 'Get Its location on disk, if it has one. of document',
  inputSchema: {
    type: 'object',
    properties: {
      target_document_required_string: {
        type: 'string',
        description: 'The document object to access (e.g., \"front document\", \"document 1\")'
      }
    },
    required: ['target_document_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_name_of_window_of_process',
  description: 'Get The title of the window.',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_id_of_window_of_process',
  description: 'Get The unique identifier of the window.',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_index_of_window_of_process',
  description: 'Get The index of the window, ordered front to back.',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_index_of_window_of_process',
  description: 'Set The index of the window, ordered front to back.',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      },
      value_required_integer: {
        type: 'number',
        description: 'New value for The index of the window, ordered front to back.'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string', 'value_required_integer'],
    additionalProperties: false
  }
},
          {
  name: 'get_bounds_of_window_of_process',
  description: 'Get The bounding rectangle of the window.',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_bounds_of_window_of_process',
  description: 'Set The bounding rectangle of the window.',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      },
      value_required_rectangle: {
        type: 'string',
        description: 'New value for The bounding rectangle of the window.'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string', 'value_required_rectangle'],
    additionalProperties: false
  }
},
          {
  name: 'get_closeable_of_window_of_process',
  description: 'Get Does the window have a close button?',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_miniaturizable_of_window_of_process',
  description: 'Get Does the window have a minimize button?',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_miniaturized_of_window_of_process',
  description: 'Get Is the window minimized right now?',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_miniaturized_of_window_of_process',
  description: 'Set Is the window minimized right now?',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for Is the window minimized right now?'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_resizable_of_window_of_process',
  description: 'Get Can the window be resized?',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_visible_of_window_of_process',
  description: 'Get Is the window visible right now?',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_visible_of_window_of_process',
  description: 'Set Is the window visible right now?',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for Is the window visible right now?'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_zoomable_of_window_of_process',
  description: 'Get Does the window have a zoom button?',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_zoomed_of_window_of_process',
  description: 'Get Is the window zoomed right now?',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_zoomed_of_window_of_process',
  description: 'Set Is the window zoomed right now?',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for Is the window zoomed right now?'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_document_of_window_of_process',
  description: 'Get The document whose contents are displayed in the window.',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'abort_transaction',
  description: 'Discard the results of a bounded update session with one or more files.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'begin_transaction',
  description: 'Begin a bounded update session with one or more files.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'end_transaction',
  description: 'Apply the results of a bounded update session with one or more files.',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_quit_delay_of_application',
  description: 'Get the time in seconds the application will idle before quitting; if set to zero, idle time will not cause the application to quit',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'set_quit_delay_of_application',
  description: 'Set the time in seconds the application will idle before quitting; if set to zero, idle time will not cause the application to quit',
  inputSchema: {
    type: 'object',
    properties: {
      value_required_integer: {
        type: 'number',
        description: 'New value for the time in seconds the application will idle before quitting; if set to zero, idle time will not cause the application to quit'
      }
    },
    required: ['value_required_integer'],
    additionalProperties: false
  }
},
          {
  name: 'get_script_menu_enabled_of_application',
  description: 'Get Is the Script menu installed in the menu bar? of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_current_user_of_application',
  description: 'Get the currently logged in user of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_full_name_of_user',
  description: 'Get user\'s full name',
  inputSchema: {
    type: 'object',
    properties: {
      target_user_required_string: {
        type: 'string',
        description: 'The user object to access (e.g., \"front user\", \"user 1\")'
      }
    },
    required: ['target_user_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_home_directory_of_user',
  description: 'Get path to user\'s home directory',
  inputSchema: {
    type: 'object',
    properties: {
      target_user_required_string: {
        type: 'string',
        description: 'The user object to access (e.g., \"front user\", \"user 1\")'
      }
    },
    required: ['target_user_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_name_of_user',
  description: 'Get user\'s short name',
  inputSchema: {
    type: 'object',
    properties: {
      target_user_required_string: {
        type: 'string',
        description: 'The user object to access (e.g., \"front user\", \"user 1\")'
      }
    },
    required: ['target_user_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_picture_path_of_user',
  description: 'Get path to user\'s picture. Can be set for current user only!',
  inputSchema: {
    type: 'object',
    properties: {
      target_user_required_string: {
        type: 'string',
        description: 'The user object to access (e.g., \"front user\", \"user 1\")'
      }
    },
    required: ['target_user_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_picture_path_of_user',
  description: 'Set path to user\'s picture. Can be set for current user only!',
  inputSchema: {
    type: 'object',
    properties: {
      target_user_required_string: {
        type: 'string',
        description: 'The user object to access (e.g., \"front user\", \"user 1\")'
      },
      value_required_text: {
        type: 'string',
        description: 'New value for path to user\'s picture. Can be set for current user only!'
      }
    },
    required: ['target_user_required_string', 'value_required_text'],
    additionalProperties: false
  }
},
          {
  name: 'get_appearance_preferences_of_application',
  description: 'Get a collection of appearance preferences of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'set_appearance_preferences_of_application',
  description: 'Set a collection of appearance preferences of application',
  inputSchema: {
    type: 'object',
    properties: {
      value_required_appearance_preferences_object: {
        type: 'string',
        description: 'New value for a collection of appearance preferences'
      }
    },
    required: ['value_required_appearance_preferences_object'],
    additionalProperties: false
  }
},
          {
  name: 'get_appearance_of_appearance_preferences_object',
  description: 'Get the overall look of buttons, menus and windows of appearance preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_appearance_preferences_object_required_string: {
        type: 'string',
        description: 'The appearance preferences object object to access (e.g., \"front appearance preferences object\", \"appearance preferences object 1\")'
      }
    },
    required: ['target_appearance_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_appearance_of_appearance_preferences_object',
  description: 'Set the overall look of buttons, menus and windows of appearance preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_appearance_preferences_object_required_string: {
        type: 'string',
        description: 'The appearance preferences object object to access (e.g., \"front appearance preferences object\", \"appearance preferences object 1\")'
      },
      value_required_appearances: {
        type: 'string',
        description: 'New value for the overall look of buttons, menus and windows'
      }
    },
    required: ['target_appearance_preferences_object_required_string', 'value_required_appearances'],
    additionalProperties: false
  }
},
          {
  name: 'get_font_smoothing_of_appearance_preferences_object',
  description: 'Get Is font smoothing on? of appearance preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_appearance_preferences_object_required_string: {
        type: 'string',
        description: 'The appearance preferences object object to access (e.g., \"front appearance preferences object\", \"appearance preferences object 1\")'
      }
    },
    required: ['target_appearance_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_font_smoothing_of_appearance_preferences_object',
  description: 'Set Is font smoothing on? of appearance preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_appearance_preferences_object_required_string: {
        type: 'string',
        description: 'The appearance preferences object object to access (e.g., \"front appearance preferences object\", \"appearance preferences object 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for Is font smoothing on?'
      }
    },
    required: ['target_appearance_preferences_object_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_font_smoothing_limit_of_appearance_preferences_object',
  description: 'Get the font size at or below which font smoothing is turned off of appearance preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_appearance_preferences_object_required_string: {
        type: 'string',
        description: 'The appearance preferences object object to access (e.g., \"front appearance preferences object\", \"appearance preferences object 1\")'
      }
    },
    required: ['target_appearance_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_font_smoothing_style_of_appearance_preferences_object',
  description: 'Get the method used for smoothing fonts of appearance preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_appearance_preferences_object_required_string: {
        type: 'string',
        description: 'The appearance preferences object object to access (e.g., \"front appearance preferences object\", \"appearance preferences object 1\")'
      }
    },
    required: ['target_appearance_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_font_smoothing_style_of_appearance_preferences_object',
  description: 'Set the method used for smoothing fonts of appearance preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_appearance_preferences_object_required_string: {
        type: 'string',
        description: 'The appearance preferences object object to access (e.g., \"front appearance preferences object\", \"appearance preferences object 1\")'
      },
      value_required_fontsmoothingstyles: {
        type: 'string',
        description: 'New value for the method used for smoothing fonts'
      }
    },
    required: ['target_appearance_preferences_object_required_string', 'value_required_fontsmoothingstyles'],
    additionalProperties: false
  }
},
          {
  name: 'get_highlight_color_of_appearance_preferences_object',
  description: 'Get color used for hightlighting selected text and lists of appearance preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_appearance_preferences_object_required_string: {
        type: 'string',
        description: 'The appearance preferences object object to access (e.g., \"front appearance preferences object\", \"appearance preferences object 1\")'
      }
    },
    required: ['target_appearance_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_highlight_color_of_appearance_preferences_object',
  description: 'Set color used for hightlighting selected text and lists of appearance preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_appearance_preferences_object_required_string: {
        type: 'string',
        description: 'The appearance preferences object object to access (e.g., \"front appearance preferences object\", \"appearance preferences object 1\")'
      },
      value_required_highlightcolors: {
        type: 'string',
        description: 'New value for color used for hightlighting selected text and lists'
      }
    },
    required: ['target_appearance_preferences_object_required_string', 'value_required_highlightcolors'],
    additionalProperties: false
  }
},
          {
  name: 'get_recent_applications_limit_of_appearance_preferences_object',
  description: 'Get the number of recent applications to track of appearance preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_appearance_preferences_object_required_string: {
        type: 'string',
        description: 'The appearance preferences object object to access (e.g., \"front appearance preferences object\", \"appearance preferences object 1\")'
      }
    },
    required: ['target_appearance_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_recent_applications_limit_of_appearance_preferences_object',
  description: 'Set the number of recent applications to track of appearance preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_appearance_preferences_object_required_string: {
        type: 'string',
        description: 'The appearance preferences object object to access (e.g., \"front appearance preferences object\", \"appearance preferences object 1\")'
      },
      value_required_integer: {
        type: 'number',
        description: 'New value for the number of recent applications to track'
      }
    },
    required: ['target_appearance_preferences_object_required_string', 'value_required_integer'],
    additionalProperties: false
  }
},
          {
  name: 'get_recent_documents_limit_of_appearance_preferences_object',
  description: 'Get the number of recent documents to track of appearance preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_appearance_preferences_object_required_string: {
        type: 'string',
        description: 'The appearance preferences object object to access (e.g., \"front appearance preferences object\", \"appearance preferences object 1\")'
      }
    },
    required: ['target_appearance_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_recent_documents_limit_of_appearance_preferences_object',
  description: 'Set the number of recent documents to track of appearance preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_appearance_preferences_object_required_string: {
        type: 'string',
        description: 'The appearance preferences object object to access (e.g., \"front appearance preferences object\", \"appearance preferences object 1\")'
      },
      value_required_integer: {
        type: 'number',
        description: 'New value for the number of recent documents to track'
      }
    },
    required: ['target_appearance_preferences_object_required_string', 'value_required_integer'],
    additionalProperties: false
  }
},
          {
  name: 'get_recent_servers_limit_of_appearance_preferences_object',
  description: 'Get the number of recent servers to track of appearance preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_appearance_preferences_object_required_string: {
        type: 'string',
        description: 'The appearance preferences object object to access (e.g., \"front appearance preferences object\", \"appearance preferences object 1\")'
      }
    },
    required: ['target_appearance_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_recent_servers_limit_of_appearance_preferences_object',
  description: 'Set the number of recent servers to track of appearance preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_appearance_preferences_object_required_string: {
        type: 'string',
        description: 'The appearance preferences object object to access (e.g., \"front appearance preferences object\", \"appearance preferences object 1\")'
      },
      value_required_integer: {
        type: 'number',
        description: 'New value for the number of recent servers to track'
      }
    },
    required: ['target_appearance_preferences_object_required_string', 'value_required_integer'],
    additionalProperties: false
  }
},
          {
  name: 'get_scroll_bar_action_of_appearance_preferences_object',
  description: 'Get the action performed by clicking the scroll bar of appearance preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_appearance_preferences_object_required_string: {
        type: 'string',
        description: 'The appearance preferences object object to access (e.g., \"front appearance preferences object\", \"appearance preferences object 1\")'
      }
    },
    required: ['target_appearance_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_scroll_bar_action_of_appearance_preferences_object',
  description: 'Set the action performed by clicking the scroll bar of appearance preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_appearance_preferences_object_required_string: {
        type: 'string',
        description: 'The appearance preferences object object to access (e.g., \"front appearance preferences object\", \"appearance preferences object 1\")'
      },
      value_required_scrollpagebehaviors: {
        type: 'string',
        description: 'New value for the action performed by clicking the scroll bar'
      }
    },
    required: ['target_appearance_preferences_object_required_string', 'value_required_scrollpagebehaviors'],
    additionalProperties: false
  }
},
          {
  name: 'get_smooth_scrolling_of_appearance_preferences_object',
  description: 'Get Is smooth scrolling used? of appearance preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_appearance_preferences_object_required_string: {
        type: 'string',
        description: 'The appearance preferences object object to access (e.g., \"front appearance preferences object\", \"appearance preferences object 1\")'
      }
    },
    required: ['target_appearance_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_smooth_scrolling_of_appearance_preferences_object',
  description: 'Set Is smooth scrolling used? of appearance preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_appearance_preferences_object_required_string: {
        type: 'string',
        description: 'The appearance preferences object object to access (e.g., \"front appearance preferences object\", \"appearance preferences object 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for Is smooth scrolling used?'
      }
    },
    required: ['target_appearance_preferences_object_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_dark_mode_of_appearance_preferences_object',
  description: 'Get use dark menu bar and dock of appearance preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_appearance_preferences_object_required_string: {
        type: 'string',
        description: 'The appearance preferences object object to access (e.g., \"front appearance preferences object\", \"appearance preferences object 1\")'
      }
    },
    required: ['target_appearance_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_dark_mode_of_appearance_preferences_object',
  description: 'Set use dark menu bar and dock of appearance preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_appearance_preferences_object_required_string: {
        type: 'string',
        description: 'The appearance preferences object object to access (e.g., \"front appearance preferences object\", \"appearance preferences object 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for use dark menu bar and dock'
      }
    },
    required: ['target_appearance_preferences_object_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_cd_and_dvd_preferences_of_application',
  description: 'Get the preferences for the current user when a CD or DVD is inserted of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'set_cd_and_dvd_preferences_of_application',
  description: 'Set the preferences for the current user when a CD or DVD is inserted of application',
  inputSchema: {
    type: 'object',
    properties: {
      value_required_cd_and_dvd_preferences_object: {
        type: 'string',
        description: 'New value for the preferences for the current user when a CD or DVD is inserted'
      }
    },
    required: ['value_required_cd_and_dvd_preferences_object'],
    additionalProperties: false
  }
},
          {
  name: 'get_blank_cd_of_cd_and_dvd_preferences_object',
  description: 'Get the blank CD insertion preference of CD and DVD preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_cd_and_dvd_preferences_object_required_string: {
        type: 'string',
        description: 'The CD and DVD preferences object object to access (e.g., \"front CD and DVD preferences object\", \"CD and DVD preferences object 1\")'
      }
    },
    required: ['target_cd_and_dvd_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_blank_dvd_of_cd_and_dvd_preferences_object',
  description: 'Get the blank DVD insertion preference of CD and DVD preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_cd_and_dvd_preferences_object_required_string: {
        type: 'string',
        description: 'The CD and DVD preferences object object to access (e.g., \"front CD and DVD preferences object\", \"CD and DVD preferences object 1\")'
      }
    },
    required: ['target_cd_and_dvd_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_blank_bd_of_cd_and_dvd_preferences_object',
  description: 'Get the blank BD insertion preference of CD and DVD preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_cd_and_dvd_preferences_object_required_string: {
        type: 'string',
        description: 'The CD and DVD preferences object object to access (e.g., \"front CD and DVD preferences object\", \"CD and DVD preferences object 1\")'
      }
    },
    required: ['target_cd_and_dvd_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_music_cd_of_cd_and_dvd_preferences_object',
  description: 'Get the music CD insertion preference of CD and DVD preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_cd_and_dvd_preferences_object_required_string: {
        type: 'string',
        description: 'The CD and DVD preferences object object to access (e.g., \"front CD and DVD preferences object\", \"CD and DVD preferences object 1\")'
      }
    },
    required: ['target_cd_and_dvd_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_picture_cd_of_cd_and_dvd_preferences_object',
  description: 'Get the picture CD insertion preference of CD and DVD preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_cd_and_dvd_preferences_object_required_string: {
        type: 'string',
        description: 'The CD and DVD preferences object object to access (e.g., \"front CD and DVD preferences object\", \"CD and DVD preferences object 1\")'
      }
    },
    required: ['target_cd_and_dvd_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_video_dvd_of_cd_and_dvd_preferences_object',
  description: 'Get the video DVD insertion preference of CD and DVD preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_cd_and_dvd_preferences_object_required_string: {
        type: 'string',
        description: 'The CD and DVD preferences object object to access (e.g., \"front CD and DVD preferences object\", \"CD and DVD preferences object 1\")'
      }
    },
    required: ['target_cd_and_dvd_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_video_bd_of_cd_and_dvd_preferences_object',
  description: 'Get the video BD insertion preference of CD and DVD preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_cd_and_dvd_preferences_object_required_string: {
        type: 'string',
        description: 'The CD and DVD preferences object object to access (e.g., \"front CD and DVD preferences object\", \"CD and DVD preferences object 1\")'
      }
    },
    required: ['target_cd_and_dvd_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_custom_application_of_insertion_preference',
  description: 'Get application to launch or activate on the insertion of media of insertion preference',
  inputSchema: {
    type: 'object',
    properties: {
      target_insertion_preference_required_string: {
        type: 'string',
        description: 'The insertion preference object to access (e.g., \"front insertion preference\", \"insertion preference 1\")'
      }
    },
    required: ['target_insertion_preference_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_custom_application_of_insertion_preference',
  description: 'Set application to launch or activate on the insertion of media of insertion preference',
  inputSchema: {
    type: 'object',
    properties: {
      target_insertion_preference_required_string: {
        type: 'string',
        description: 'The insertion preference object to access (e.g., \"front insertion preference\", \"insertion preference 1\")'
      },
      value_required_text: {
        type: 'string',
        description: 'New value for application to launch or activate on the insertion of media'
      }
    },
    required: ['target_insertion_preference_required_string', 'value_required_text'],
    additionalProperties: false
  }
},
          {
  name: 'get_custom_script_of_insertion_preference',
  description: 'Get AppleScript to launch or activate on the insertion of media of insertion preference',
  inputSchema: {
    type: 'object',
    properties: {
      target_insertion_preference_required_string: {
        type: 'string',
        description: 'The insertion preference object to access (e.g., \"front insertion preference\", \"insertion preference 1\")'
      }
    },
    required: ['target_insertion_preference_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_custom_script_of_insertion_preference',
  description: 'Set AppleScript to launch or activate on the insertion of media of insertion preference',
  inputSchema: {
    type: 'object',
    properties: {
      target_insertion_preference_required_string: {
        type: 'string',
        description: 'The insertion preference object to access (e.g., \"front insertion preference\", \"insertion preference 1\")'
      },
      value_required_text: {
        type: 'string',
        description: 'New value for AppleScript to launch or activate on the insertion of media'
      }
    },
    required: ['target_insertion_preference_required_string', 'value_required_text'],
    additionalProperties: false
  }
},
          {
  name: 'get_insertion_action_of_insertion_preference',
  description: 'Get action to perform on media insertion of insertion preference',
  inputSchema: {
    type: 'object',
    properties: {
      target_insertion_preference_required_string: {
        type: 'string',
        description: 'The insertion preference object to access (e.g., \"front insertion preference\", \"insertion preference 1\")'
      }
    },
    required: ['target_insertion_preference_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_insertion_action_of_insertion_preference',
  description: 'Set action to perform on media insertion of insertion preference',
  inputSchema: {
    type: 'object',
    properties: {
      target_insertion_preference_required_string: {
        type: 'string',
        description: 'The insertion preference object to access (e.g., \"front insertion preference\", \"insertion preference 1\")'
      },
      value_required_dhac: {
        type: 'string',
        description: 'New value for action to perform on media insertion'
      }
    },
    required: ['target_insertion_preference_required_string', 'value_required_dhac'],
    additionalProperties: false
  }
},
          {
  name: 'get_current_desktop_of_application',
  description: 'Get the primary desktop of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_name_of_desktop',
  description: 'Get name of the desktop',
  inputSchema: {
    type: 'object',
    properties: {
      target_desktop_required_string: {
        type: 'string',
        description: 'The desktop object to access (e.g., \"front desktop\", \"desktop 1\")'
      }
    },
    required: ['target_desktop_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_id_of_desktop',
  description: 'Get unique identifier of the desktop',
  inputSchema: {
    type: 'object',
    properties: {
      target_desktop_required_string: {
        type: 'string',
        description: 'The desktop object to access (e.g., \"front desktop\", \"desktop 1\")'
      }
    },
    required: ['target_desktop_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_change_interval_of_desktop',
  description: 'Get number of seconds to wait between changing the desktop picture',
  inputSchema: {
    type: 'object',
    properties: {
      target_desktop_required_string: {
        type: 'string',
        description: 'The desktop object to access (e.g., \"front desktop\", \"desktop 1\")'
      }
    },
    required: ['target_desktop_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_change_interval_of_desktop',
  description: 'Set number of seconds to wait between changing the desktop picture',
  inputSchema: {
    type: 'object',
    properties: {
      target_desktop_required_string: {
        type: 'string',
        description: 'The desktop object to access (e.g., \"front desktop\", \"desktop 1\")'
      },
      value_required_real: {
        type: 'number',
        description: 'New value for number of seconds to wait between changing the desktop picture'
      }
    },
    required: ['target_desktop_required_string', 'value_required_real'],
    additionalProperties: false
  }
},
          {
  name: 'get_display_name_of_desktop',
  description: 'Get name of display on which this desktop appears',
  inputSchema: {
    type: 'object',
    properties: {
      target_desktop_required_string: {
        type: 'string',
        description: 'The desktop object to access (e.g., \"front desktop\", \"desktop 1\")'
      }
    },
    required: ['target_desktop_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_picture_of_desktop',
  description: 'Get path to file used as desktop picture',
  inputSchema: {
    type: 'object',
    properties: {
      target_desktop_required_string: {
        type: 'string',
        description: 'The desktop object to access (e.g., \"front desktop\", \"desktop 1\")'
      }
    },
    required: ['target_desktop_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_picture_of_desktop',
  description: 'Set path to file used as desktop picture',
  inputSchema: {
    type: 'object',
    properties: {
      target_desktop_required_string: {
        type: 'string',
        description: 'The desktop object to access (e.g., \"front desktop\", \"desktop 1\")'
      },
      value_required_text: {
        type: 'string',
        description: 'New value for path to file used as desktop picture'
      }
    },
    required: ['target_desktop_required_string', 'value_required_text'],
    additionalProperties: false
  }
},
          {
  name: 'get_picture_rotation_of_desktop',
  description: 'Get never, using interval, using login, after sleep of desktop',
  inputSchema: {
    type: 'object',
    properties: {
      target_desktop_required_string: {
        type: 'string',
        description: 'The desktop object to access (e.g., \"front desktop\", \"desktop 1\")'
      }
    },
    required: ['target_desktop_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_picture_rotation_of_desktop',
  description: 'Set never, using interval, using login, after sleep of desktop',
  inputSchema: {
    type: 'object',
    properties: {
      target_desktop_required_string: {
        type: 'string',
        description: 'The desktop object to access (e.g., \"front desktop\", \"desktop 1\")'
      },
      value_required_integer: {
        type: 'number',
        description: 'New value for never, using interval, using login, after sleep'
      }
    },
    required: ['target_desktop_required_string', 'value_required_integer'],
    additionalProperties: false
  }
},
          {
  name: 'get_pictures_folder_of_desktop',
  description: 'Get path to folder containing pictures for changing desktop background',
  inputSchema: {
    type: 'object',
    properties: {
      target_desktop_required_string: {
        type: 'string',
        description: 'The desktop object to access (e.g., \"front desktop\", \"desktop 1\")'
      }
    },
    required: ['target_desktop_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_pictures_folder_of_desktop',
  description: 'Set path to folder containing pictures for changing desktop background',
  inputSchema: {
    type: 'object',
    properties: {
      target_desktop_required_string: {
        type: 'string',
        description: 'The desktop object to access (e.g., \"front desktop\", \"desktop 1\")'
      },
      value_required_text: {
        type: 'string',
        description: 'New value for path to folder containing pictures for changing desktop background'
      }
    },
    required: ['target_desktop_required_string', 'value_required_text'],
    additionalProperties: false
  }
},
          {
  name: 'get_random_order_of_desktop',
  description: 'Get turn on for random ordering of changing desktop pictures',
  inputSchema: {
    type: 'object',
    properties: {
      target_desktop_required_string: {
        type: 'string',
        description: 'The desktop object to access (e.g., \"front desktop\", \"desktop 1\")'
      }
    },
    required: ['target_desktop_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_random_order_of_desktop',
  description: 'Set turn on for random ordering of changing desktop pictures',
  inputSchema: {
    type: 'object',
    properties: {
      target_desktop_required_string: {
        type: 'string',
        description: 'The desktop object to access (e.g., \"front desktop\", \"desktop 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for turn on for random ordering of changing desktop pictures'
      }
    },
    required: ['target_desktop_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_translucent_menu_bar_of_desktop',
  description: 'Get indicates whether the menu bar is translucent of desktop',
  inputSchema: {
    type: 'object',
    properties: {
      target_desktop_required_string: {
        type: 'string',
        description: 'The desktop object to access (e.g., \"front desktop\", \"desktop 1\")'
      }
    },
    required: ['target_desktop_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_translucent_menu_bar_of_desktop',
  description: 'Set indicates whether the menu bar is translucent of desktop',
  inputSchema: {
    type: 'object',
    properties: {
      target_desktop_required_string: {
        type: 'string',
        description: 'The desktop object to access (e.g., \"front desktop\", \"desktop 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for indicates whether the menu bar is translucent'
      }
    },
    required: ['target_desktop_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_dynamic_style_of_desktop',
  description: 'Get desktop picture dynamic style',
  inputSchema: {
    type: 'object',
    properties: {
      target_desktop_required_string: {
        type: 'string',
        description: 'The desktop object to access (e.g., \"front desktop\", \"desktop 1\")'
      }
    },
    required: ['target_desktop_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_dynamic_style_of_desktop',
  description: 'Set desktop picture dynamic style',
  inputSchema: {
    type: 'object',
    properties: {
      target_desktop_required_string: {
        type: 'string',
        description: 'The desktop object to access (e.g., \"front desktop\", \"desktop 1\")'
      },
      value_required_dynamic_style: {
        type: 'string',
        description: 'New value for desktop picture dynamic style'
      }
    },
    required: ['target_desktop_required_string', 'value_required_dynamic_style'],
    additionalProperties: false
  }
},
          {
  name: 'get_dock_preferences_of_application',
  description: 'Get the preferences for the current user\'s dock of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'set_dock_preferences_of_application',
  description: 'Set the preferences for the current user\'s dock of application',
  inputSchema: {
    type: 'object',
    properties: {
      value_required_dock_preferences_object: {
        type: 'string',
        description: 'New value for the preferences for the current user\'s dock'
      }
    },
    required: ['value_required_dock_preferences_object'],
    additionalProperties: false
  }
},
          {
  name: 'get_animate_of_dock_preferences_object',
  description: 'Get is the animation of opening applications on or off? of dock preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_dock_preferences_object_required_string: {
        type: 'string',
        description: 'The dock preferences object object to access (e.g., \"front dock preferences object\", \"dock preferences object 1\")'
      }
    },
    required: ['target_dock_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_animate_of_dock_preferences_object',
  description: 'Set is the animation of opening applications on or off? of dock preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_dock_preferences_object_required_string: {
        type: 'string',
        description: 'The dock preferences object object to access (e.g., \"front dock preferences object\", \"dock preferences object 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for is the animation of opening applications on or off?'
      }
    },
    required: ['target_dock_preferences_object_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_autohide_of_dock_preferences_object',
  description: 'Get is autohiding the dock on or off? of dock preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_dock_preferences_object_required_string: {
        type: 'string',
        description: 'The dock preferences object object to access (e.g., \"front dock preferences object\", \"dock preferences object 1\")'
      }
    },
    required: ['target_dock_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_autohide_of_dock_preferences_object',
  description: 'Set is autohiding the dock on or off? of dock preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_dock_preferences_object_required_string: {
        type: 'string',
        description: 'The dock preferences object object to access (e.g., \"front dock preferences object\", \"dock preferences object 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for is autohiding the dock on or off?'
      }
    },
    required: ['target_dock_preferences_object_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_dock_size_of_dock_preferences_object',
  description: 'Get size/height of the items (between 0.0 (minimum) and 1.0 (maximum)) of dock preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_dock_preferences_object_required_string: {
        type: 'string',
        description: 'The dock preferences object object to access (e.g., \"front dock preferences object\", \"dock preferences object 1\")'
      }
    },
    required: ['target_dock_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_dock_size_of_dock_preferences_object',
  description: 'Set size/height of the items (between 0.0 (minimum) and 1.0 (maximum)) of dock preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_dock_preferences_object_required_string: {
        type: 'string',
        description: 'The dock preferences object object to access (e.g., \"front dock preferences object\", \"dock preferences object 1\")'
      },
      value_required_real: {
        type: 'number',
        description: 'New value for size/height of the items (between 0.0 (minimum) and 1.0 (maximum))'
      }
    },
    required: ['target_dock_preferences_object_required_string', 'value_required_real'],
    additionalProperties: false
  }
},
          {
  name: 'get_autohide_menu_bar_of_dock_preferences_object',
  description: 'Get is autohiding the menu bar on or off? of dock preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_dock_preferences_object_required_string: {
        type: 'string',
        description: 'The dock preferences object object to access (e.g., \"front dock preferences object\", \"dock preferences object 1\")'
      }
    },
    required: ['target_dock_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_autohide_menu_bar_of_dock_preferences_object',
  description: 'Set is autohiding the menu bar on or off? of dock preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_dock_preferences_object_required_string: {
        type: 'string',
        description: 'The dock preferences object object to access (e.g., \"front dock preferences object\", \"dock preferences object 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for is autohiding the menu bar on or off?'
      }
    },
    required: ['target_dock_preferences_object_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_double_click_behavior_of_dock_preferences_object',
  description: 'Get behaviour when double clicking window a title bar of dock preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_dock_preferences_object_required_string: {
        type: 'string',
        description: 'The dock preferences object object to access (e.g., \"front dock preferences object\", \"dock preferences object 1\")'
      }
    },
    required: ['target_dock_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_double_click_behavior_of_dock_preferences_object',
  description: 'Set behaviour when double clicking window a title bar of dock preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_dock_preferences_object_required_string: {
        type: 'string',
        description: 'The dock preferences object object to access (e.g., \"front dock preferences object\", \"dock preferences object 1\")'
      },
      value_required_dpbh: {
        type: 'string',
        description: 'New value for behaviour when double clicking window a title bar'
      }
    },
    required: ['target_dock_preferences_object_required_string', 'value_required_dpbh'],
    additionalProperties: false
  }
},
          {
  name: 'get_magnification_of_dock_preferences_object',
  description: 'Get is magnification on or off? of dock preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_dock_preferences_object_required_string: {
        type: 'string',
        description: 'The dock preferences object object to access (e.g., \"front dock preferences object\", \"dock preferences object 1\")'
      }
    },
    required: ['target_dock_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_magnification_of_dock_preferences_object',
  description: 'Set is magnification on or off? of dock preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_dock_preferences_object_required_string: {
        type: 'string',
        description: 'The dock preferences object object to access (e.g., \"front dock preferences object\", \"dock preferences object 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for is magnification on or off?'
      }
    },
    required: ['target_dock_preferences_object_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_magnification_size_of_dock_preferences_object',
  description: 'Get maximum magnification size when magnification is on (between 0.0 (minimum) and 1.0 (maximum)) of dock preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_dock_preferences_object_required_string: {
        type: 'string',
        description: 'The dock preferences object object to access (e.g., \"front dock preferences object\", \"dock preferences object 1\")'
      }
    },
    required: ['target_dock_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_magnification_size_of_dock_preferences_object',
  description: 'Set maximum magnification size when magnification is on (between 0.0 (minimum) and 1.0 (maximum)) of dock preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_dock_preferences_object_required_string: {
        type: 'string',
        description: 'The dock preferences object object to access (e.g., \"front dock preferences object\", \"dock preferences object 1\")'
      },
      value_required_real: {
        type: 'number',
        description: 'New value for maximum magnification size when magnification is on (between 0.0 (minimum) and 1.0 (maximum))'
      }
    },
    required: ['target_dock_preferences_object_required_string', 'value_required_real'],
    additionalProperties: false
  }
},
          {
  name: 'get_minimize_effect_of_dock_preferences_object',
  description: 'Get minimization effect of dock preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_dock_preferences_object_required_string: {
        type: 'string',
        description: 'The dock preferences object object to access (e.g., \"front dock preferences object\", \"dock preferences object 1\")'
      }
    },
    required: ['target_dock_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_minimize_effect_of_dock_preferences_object',
  description: 'Set minimization effect of dock preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_dock_preferences_object_required_string: {
        type: 'string',
        description: 'The dock preferences object object to access (e.g., \"front dock preferences object\", \"dock preferences object 1\")'
      },
      value_required_dpef: {
        type: 'string',
        description: 'New value for minimization effect'
      }
    },
    required: ['target_dock_preferences_object_required_string', 'value_required_dpef'],
    additionalProperties: false
  }
},
          {
  name: 'get_minimize_into_application_of_dock_preferences_object',
  description: 'Get minimize window into its application? of dock preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_dock_preferences_object_required_string: {
        type: 'string',
        description: 'The dock preferences object object to access (e.g., \"front dock preferences object\", \"dock preferences object 1\")'
      }
    },
    required: ['target_dock_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_minimize_into_application_of_dock_preferences_object',
  description: 'Set minimize window into its application? of dock preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_dock_preferences_object_required_string: {
        type: 'string',
        description: 'The dock preferences object object to access (e.g., \"front dock preferences object\", \"dock preferences object 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for minimize window into its application?'
      }
    },
    required: ['target_dock_preferences_object_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_screen_edge_of_dock_preferences_object',
  description: 'Get location on screen of dock preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_dock_preferences_object_required_string: {
        type: 'string',
        description: 'The dock preferences object object to access (e.g., \"front dock preferences object\", \"dock preferences object 1\")'
      }
    },
    required: ['target_dock_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_screen_edge_of_dock_preferences_object',
  description: 'Set location on screen of dock preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_dock_preferences_object_required_string: {
        type: 'string',
        description: 'The dock preferences object object to access (e.g., \"front dock preferences object\", \"dock preferences object 1\")'
      },
      value_required_dpls: {
        type: 'string',
        description: 'New value for location on screen'
      }
    },
    required: ['target_dock_preferences_object_required_string', 'value_required_dpls'],
    additionalProperties: false
  }
},
          {
  name: 'get_show_indicators_of_dock_preferences_object',
  description: 'Get show indicators for open applications? of dock preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_dock_preferences_object_required_string: {
        type: 'string',
        description: 'The dock preferences object object to access (e.g., \"front dock preferences object\", \"dock preferences object 1\")'
      }
    },
    required: ['target_dock_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_show_indicators_of_dock_preferences_object',
  description: 'Set show indicators for open applications? of dock preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_dock_preferences_object_required_string: {
        type: 'string',
        description: 'The dock preferences object object to access (e.g., \"front dock preferences object\", \"dock preferences object 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for show indicators for open applications?'
      }
    },
    required: ['target_dock_preferences_object_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_show_recents_of_dock_preferences_object',
  description: 'Get show recent applications? of dock preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_dock_preferences_object_required_string: {
        type: 'string',
        description: 'The dock preferences object object to access (e.g., \"front dock preferences object\", \"dock preferences object 1\")'
      }
    },
    required: ['target_dock_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_show_recents_of_dock_preferences_object',
  description: 'Set show recent applications? of dock preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_dock_preferences_object_required_string: {
        type: 'string',
        description: 'The dock preferences object object to access (e.g., \"front dock preferences object\", \"dock preferences object 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for show recent applications?'
      }
    },
    required: ['target_dock_preferences_object_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_hidden_of_login_item',
  description: 'Get Is the Login Item hidden when launched?',
  inputSchema: {
    type: 'object',
    properties: {
      target_login_item_required_string: {
        type: 'string',
        description: 'The login item object to access (e.g., \"front login item\", \"login item 1\")'
      }
    },
    required: ['target_login_item_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_hidden_of_login_item',
  description: 'Set Is the Login Item hidden when launched?',
  inputSchema: {
    type: 'object',
    properties: {
      target_login_item_required_string: {
        type: 'string',
        description: 'The login item object to access (e.g., \"front login item\", \"login item 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for Is the Login Item hidden when launched?'
      }
    },
    required: ['target_login_item_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_kind_of_login_item',
  description: 'Get the file type of the Login Item',
  inputSchema: {
    type: 'object',
    properties: {
      target_login_item_required_string: {
        type: 'string',
        description: 'The login item object to access (e.g., \"front login item\", \"login item 1\")'
      }
    },
    required: ['target_login_item_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_name_of_login_item',
  description: 'Get the name of the Login Item',
  inputSchema: {
    type: 'object',
    properties: {
      target_login_item_required_string: {
        type: 'string',
        description: 'The login item object to access (e.g., \"front login item\", \"login item 1\")'
      }
    },
    required: ['target_login_item_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_path_of_login_item',
  description: 'Get the file system path to the Login Item',
  inputSchema: {
    type: 'object',
    properties: {
      target_login_item_required_string: {
        type: 'string',
        description: 'The login item object to access (e.g., \"front login item\", \"login item 1\")'
      }
    },
    required: ['target_login_item_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'connect_configuration',
  description: 'connect a configuration or service (configuration input)',
  inputSchema: {
    type: 'object',
    properties: {
      direct_parameter_required_configuration: {
        type: 'string',
        description: 'a configuration or service'
      }
    },
    required: ['direct_parameter_required_configuration'],
    additionalProperties: false
  }
},
          {
  name: 'connect_service',
  description: 'connect a configuration or service (service input)',
  inputSchema: {
    type: 'object',
    properties: {
      direct_parameter_required_service: {
        type: 'string',
        description: 'a configuration or service'
      }
    },
    required: ['direct_parameter_required_service'],
    additionalProperties: false
  }
},
          {
  name: 'disconnect_configuration',
  description: 'disconnect a configuration or service (configuration input)',
  inputSchema: {
    type: 'object',
    properties: {
      direct_parameter_required_configuration: {
        type: 'string',
        description: 'a configuration or service'
      }
    },
    required: ['direct_parameter_required_configuration'],
    additionalProperties: false
  }
},
          {
  name: 'disconnect_service',
  description: 'disconnect a configuration or service (service input)',
  inputSchema: {
    type: 'object',
    properties: {
      direct_parameter_required_service: {
        type: 'string',
        description: 'a configuration or service'
      }
    },
    required: ['direct_parameter_required_service'],
    additionalProperties: false
  }
},
          {
  name: 'get_network_preferences_of_application',
  description: 'Get the preferences for the current user\'s network of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'set_network_preferences_of_application',
  description: 'Set the preferences for the current user\'s network of application',
  inputSchema: {
    type: 'object',
    properties: {
      value_required_network_preferences_object: {
        type: 'string',
        description: 'New value for the preferences for the current user\'s network'
      }
    },
    required: ['value_required_network_preferences_object'],
    additionalProperties: false
  }
},
          {
  name: 'get_account_name_of_configuration_of_service_of_location_of',
  description: 'Get the name used to authenticate of configuration',
  inputSchema: {
    type: 'object',
    properties: {
      target_configuration_required_string: {
        type: 'string',
        description: 'The configuration object to access (e.g., \"front configuration\", \"configuration 1\")'
      },
      target_service_required_string: {
        type: 'string',
        description: 'The service object to access (e.g., \"front service\", \"service 1\")'
      },
      target_location_required_string: {
        type: 'string',
        description: 'The location object to access (e.g., \"front location\", \"location 1\")'
      },
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      }
    },
    required: ['target_configuration_required_string', 'target_service_required_string', 'target_location_required_string', 'target_network_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_account_name_of_configuration_of_service_of_location_of',
  description: 'Set the name used to authenticate of configuration',
  inputSchema: {
    type: 'object',
    properties: {
      target_configuration_required_string: {
        type: 'string',
        description: 'The configuration object to access (e.g., \"front configuration\", \"configuration 1\")'
      },
      target_service_required_string: {
        type: 'string',
        description: 'The service object to access (e.g., \"front service\", \"service 1\")'
      },
      target_location_required_string: {
        type: 'string',
        description: 'The location object to access (e.g., \"front location\", \"location 1\")'
      },
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      },
      value_required_text: {
        type: 'string',
        description: 'New value for the name used to authenticate'
      }
    },
    required: ['target_configuration_required_string', 'target_service_required_string', 'target_location_required_string', 'target_network_preferences_object_required_string', 'value_required_text'],
    additionalProperties: false
  }
},
          {
  name: 'get_connected_of_configuration_of_service_of_location_of',
  description: 'Get Is the configuration connected?',
  inputSchema: {
    type: 'object',
    properties: {
      target_configuration_required_string: {
        type: 'string',
        description: 'The configuration object to access (e.g., \"front configuration\", \"configuration 1\")'
      },
      target_service_required_string: {
        type: 'string',
        description: 'The service object to access (e.g., \"front service\", \"service 1\")'
      },
      target_location_required_string: {
        type: 'string',
        description: 'The location object to access (e.g., \"front location\", \"location 1\")'
      },
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      }
    },
    required: ['target_configuration_required_string', 'target_service_required_string', 'target_location_required_string', 'target_network_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_id_of_configuration_of_service_of_location_of_network',
  description: 'Get the unique identifier for the configuration',
  inputSchema: {
    type: 'object',
    properties: {
      target_configuration_required_string: {
        type: 'string',
        description: 'The configuration object to access (e.g., \"front configuration\", \"configuration 1\")'
      },
      target_service_required_string: {
        type: 'string',
        description: 'The service object to access (e.g., \"front service\", \"service 1\")'
      },
      target_location_required_string: {
        type: 'string',
        description: 'The location object to access (e.g., \"front location\", \"location 1\")'
      },
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      }
    },
    required: ['target_configuration_required_string', 'target_service_required_string', 'target_location_required_string', 'target_network_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_name_of_configuration_of_service_of_location_of_network',
  description: 'Get the name of the configuration',
  inputSchema: {
    type: 'object',
    properties: {
      target_configuration_required_string: {
        type: 'string',
        description: 'The configuration object to access (e.g., \"front configuration\", \"configuration 1\")'
      },
      target_service_required_string: {
        type: 'string',
        description: 'The service object to access (e.g., \"front service\", \"service 1\")'
      },
      target_location_required_string: {
        type: 'string',
        description: 'The location object to access (e.g., \"front location\", \"location 1\")'
      },
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      }
    },
    required: ['target_configuration_required_string', 'target_service_required_string', 'target_location_required_string', 'target_network_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_automatic_of_interface_of_network_preferences_object',
  description: 'Get configure the interface speed, duplex, and mtu automatically?',
  inputSchema: {
    type: 'object',
    properties: {
      target_interface_required_string: {
        type: 'string',
        description: 'The interface object to access (e.g., \"front interface\", \"interface 1\")'
      },
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      }
    },
    required: ['target_interface_required_string', 'target_network_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_automatic_of_interface_of_network_preferences_object',
  description: 'Set configure the interface speed, duplex, and mtu automatically?',
  inputSchema: {
    type: 'object',
    properties: {
      target_interface_required_string: {
        type: 'string',
        description: 'The interface object to access (e.g., \"front interface\", \"interface 1\")'
      },
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for configure the interface speed, duplex, and mtu automatically?'
      }
    },
    required: ['target_interface_required_string', 'target_network_preferences_object_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_duplex_of_interface_of_network_preferences_object',
  description: 'Get the duplex setting  half | full | full with flow control of interface',
  inputSchema: {
    type: 'object',
    properties: {
      target_interface_required_string: {
        type: 'string',
        description: 'The interface object to access (e.g., \"front interface\", \"interface 1\")'
      },
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      }
    },
    required: ['target_interface_required_string', 'target_network_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_duplex_of_interface_of_network_preferences_object',
  description: 'Set the duplex setting  half | full | full with flow control of interface',
  inputSchema: {
    type: 'object',
    properties: {
      target_interface_required_string: {
        type: 'string',
        description: 'The interface object to access (e.g., \"front interface\", \"interface 1\")'
      },
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      },
      value_required_text: {
        type: 'string',
        description: 'New value for the duplex setting  half | full | full with flow control'
      }
    },
    required: ['target_interface_required_string', 'target_network_preferences_object_required_string', 'value_required_text'],
    additionalProperties: false
  }
},
          {
  name: 'get_id_of_interface_of_network_preferences_object',
  description: 'Get the unique identifier for the interface',
  inputSchema: {
    type: 'object',
    properties: {
      target_interface_required_string: {
        type: 'string',
        description: 'The interface object to access (e.g., \"front interface\", \"interface 1\")'
      },
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      }
    },
    required: ['target_interface_required_string', 'target_network_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_kind_of_interface_of_network_preferences_object',
  description: 'Get the type of interface',
  inputSchema: {
    type: 'object',
    properties: {
      target_interface_required_string: {
        type: 'string',
        description: 'The interface object to access (e.g., \"front interface\", \"interface 1\")'
      },
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      }
    },
    required: ['target_interface_required_string', 'target_network_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_mac_address_of_interface_of_network_preferences_object',
  description: 'Get the MAC address for the interface',
  inputSchema: {
    type: 'object',
    properties: {
      target_interface_required_string: {
        type: 'string',
        description: 'The interface object to access (e.g., \"front interface\", \"interface 1\")'
      },
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      }
    },
    required: ['target_interface_required_string', 'target_network_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_mtu_of_interface_of_network_preferences_object',
  description: 'Get the packet size of interface',
  inputSchema: {
    type: 'object',
    properties: {
      target_interface_required_string: {
        type: 'string',
        description: 'The interface object to access (e.g., \"front interface\", \"interface 1\")'
      },
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      }
    },
    required: ['target_interface_required_string', 'target_network_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_mtu_of_interface_of_network_preferences_object',
  description: 'Set the packet size of interface',
  inputSchema: {
    type: 'object',
    properties: {
      target_interface_required_string: {
        type: 'string',
        description: 'The interface object to access (e.g., \"front interface\", \"interface 1\")'
      },
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      },
      value_required_integer: {
        type: 'number',
        description: 'New value for the packet size'
      }
    },
    required: ['target_interface_required_string', 'target_network_preferences_object_required_string', 'value_required_integer'],
    additionalProperties: false
  }
},
          {
  name: 'get_name_of_interface_of_network_preferences_object',
  description: 'Get the name of the interface',
  inputSchema: {
    type: 'object',
    properties: {
      target_interface_required_string: {
        type: 'string',
        description: 'The interface object to access (e.g., \"front interface\", \"interface 1\")'
      },
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      }
    },
    required: ['target_interface_required_string', 'target_network_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_speed_of_interface_of_network_preferences_object',
  description: 'Get ethernet speed 10 | 100 | 1000 of interface',
  inputSchema: {
    type: 'object',
    properties: {
      target_interface_required_string: {
        type: 'string',
        description: 'The interface object to access (e.g., \"front interface\", \"interface 1\")'
      },
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      }
    },
    required: ['target_interface_required_string', 'target_network_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_speed_of_interface_of_network_preferences_object',
  description: 'Set ethernet speed 10 | 100 | 1000 of interface',
  inputSchema: {
    type: 'object',
    properties: {
      target_interface_required_string: {
        type: 'string',
        description: 'The interface object to access (e.g., \"front interface\", \"interface 1\")'
      },
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      },
      value_required_integer: {
        type: 'number',
        description: 'New value for ethernet speed 10 | 100 | 1000'
      }
    },
    required: ['target_interface_required_string', 'target_network_preferences_object_required_string', 'value_required_integer'],
    additionalProperties: false
  }
},
          {
  name: 'get_id_of_location_of_network_preferences_object',
  description: 'Get the unique identifier for the location',
  inputSchema: {
    type: 'object',
    properties: {
      target_location_required_string: {
        type: 'string',
        description: 'The location object to access (e.g., \"front location\", \"location 1\")'
      },
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      }
    },
    required: ['target_location_required_string', 'target_network_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_name_of_location_of_network_preferences_object',
  description: 'Get the name of the location',
  inputSchema: {
    type: 'object',
    properties: {
      target_location_required_string: {
        type: 'string',
        description: 'The location object to access (e.g., \"front location\", \"location 1\")'
      },
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      }
    },
    required: ['target_location_required_string', 'target_network_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_name_of_location_of_network_preferences_object',
  description: 'Set the name of the location',
  inputSchema: {
    type: 'object',
    properties: {
      target_location_required_string: {
        type: 'string',
        description: 'The location object to access (e.g., \"front location\", \"location 1\")'
      },
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      },
      value_required_text: {
        type: 'string',
        description: 'New value for the name of the location'
      }
    },
    required: ['target_location_required_string', 'target_network_preferences_object_required_string', 'value_required_text'],
    additionalProperties: false
  }
},
          {
  name: 'get_current_location_of_network_preferences_object',
  description: 'Get the current location of network preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      }
    },
    required: ['target_network_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_current_location_of_network_preferences_object',
  description: 'Set the current location of network preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      },
      value_required_location: {
        type: 'string',
        description: 'New value for the current location'
      }
    },
    required: ['target_network_preferences_object_required_string', 'value_required_location'],
    additionalProperties: false
  }
},
          {
  name: 'get_active_of_service_of_location_of_network_preferences_object',
  description: 'Get Is the service active?',
  inputSchema: {
    type: 'object',
    properties: {
      target_service_required_string: {
        type: 'string',
        description: 'The service object to access (e.g., \"front service\", \"service 1\")'
      },
      target_location_required_string: {
        type: 'string',
        description: 'The location object to access (e.g., \"front location\", \"location 1\")'
      },
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      }
    },
    required: ['target_service_required_string', 'target_location_required_string', 'target_network_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_current_configuration_of_service_of_location_of_network',
  description: 'Get the currently selected configuration of service',
  inputSchema: {
    type: 'object',
    properties: {
      target_service_required_string: {
        type: 'string',
        description: 'The service object to access (e.g., \"front service\", \"service 1\")'
      },
      target_location_required_string: {
        type: 'string',
        description: 'The location object to access (e.g., \"front location\", \"location 1\")'
      },
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      }
    },
    required: ['target_service_required_string', 'target_location_required_string', 'target_network_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_current_configuration_of_service_of_location_of_network',
  description: 'Set the currently selected configuration of service',
  inputSchema: {
    type: 'object',
    properties: {
      target_service_required_string: {
        type: 'string',
        description: 'The service object to access (e.g., \"front service\", \"service 1\")'
      },
      target_location_required_string: {
        type: 'string',
        description: 'The location object to access (e.g., \"front location\", \"location 1\")'
      },
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      },
      value_required_configuration: {
        type: 'string',
        description: 'New value for the currently selected configuration'
      }
    },
    required: ['target_service_required_string', 'target_location_required_string', 'target_network_preferences_object_required_string', 'value_required_configuration'],
    additionalProperties: false
  }
},
          {
  name: 'get_id_of_service_of_location_of_network_preferences_object',
  description: 'Get the unique identifier for the service',
  inputSchema: {
    type: 'object',
    properties: {
      target_service_required_string: {
        type: 'string',
        description: 'The service object to access (e.g., \"front service\", \"service 1\")'
      },
      target_location_required_string: {
        type: 'string',
        description: 'The location object to access (e.g., \"front location\", \"location 1\")'
      },
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      }
    },
    required: ['target_service_required_string', 'target_location_required_string', 'target_network_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_interface_of_service_of_location_of_network_preferences',
  description: 'Get the interface the service is built on',
  inputSchema: {
    type: 'object',
    properties: {
      target_service_required_string: {
        type: 'string',
        description: 'The service object to access (e.g., \"front service\", \"service 1\")'
      },
      target_location_required_string: {
        type: 'string',
        description: 'The location object to access (e.g., \"front location\", \"location 1\")'
      },
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      }
    },
    required: ['target_service_required_string', 'target_location_required_string', 'target_network_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_kind_of_service_of_location_of_network_preferences_object',
  description: 'Get the type of service',
  inputSchema: {
    type: 'object',
    properties: {
      target_service_required_string: {
        type: 'string',
        description: 'The service object to access (e.g., \"front service\", \"service 1\")'
      },
      target_location_required_string: {
        type: 'string',
        description: 'The location object to access (e.g., \"front location\", \"location 1\")'
      },
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      }
    },
    required: ['target_service_required_string', 'target_location_required_string', 'target_network_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_name_of_service_of_location_of_network_preferences_object',
  description: 'Get the name of the service',
  inputSchema: {
    type: 'object',
    properties: {
      target_service_required_string: {
        type: 'string',
        description: 'The service object to access (e.g., \"front service\", \"service 1\")'
      },
      target_location_required_string: {
        type: 'string',
        description: 'The location object to access (e.g., \"front location\", \"location 1\")'
      },
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      }
    },
    required: ['target_service_required_string', 'target_location_required_string', 'target_network_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_name_of_service_of_location_of_network_preferences_object',
  description: 'Set the name of the service',
  inputSchema: {
    type: 'object',
    properties: {
      target_service_required_string: {
        type: 'string',
        description: 'The service object to access (e.g., \"front service\", \"service 1\")'
      },
      target_location_required_string: {
        type: 'string',
        description: 'The location object to access (e.g., \"front location\", \"location 1\")'
      },
      target_network_preferences_object_required_string: {
        type: 'string',
        description: 'The network preferences object object to access (e.g., \"front network preferences object\", \"network preferences object 1\")'
      },
      value_required_text: {
        type: 'string',
        description: 'New value for the name of the service'
      }
    },
    required: ['target_service_required_string', 'target_location_required_string', 'target_network_preferences_object_required_string', 'value_required_text'],
    additionalProperties: false
  }
},
          {
  name: 'start_screen_saver',
  description: 'start the screen saver (screen saver input)',
  inputSchema: {
    type: 'object',
    properties: {
      direct_parameter_required_screen_saver: {
        type: 'string',
        description: 'the object for the command'
      }
    },
    required: ['direct_parameter_required_screen_saver'],
    additionalProperties: false
  }
},
          {
  name: 'start_screen_saver_preferences_object',
  description: 'start the screen saver (screen saver preferences object input)',
  inputSchema: {
    type: 'object',
    properties: {
      direct_parameter_required_screen_saver_preferences_object: {
        type: 'string',
        description: 'the object for the command'
      }
    },
    required: ['direct_parameter_required_screen_saver_preferences_object'],
    additionalProperties: false
  }
},
          {
  name: 'stop_screen_saver',
  description: 'stop the screen saver (screen saver input)',
  inputSchema: {
    type: 'object',
    properties: {
      direct_parameter_required_screen_saver: {
        type: 'string',
        description: 'the object for the command'
      }
    },
    required: ['direct_parameter_required_screen_saver'],
    additionalProperties: false
  }
},
          {
  name: 'stop_screen_saver_preferences_object',
  description: 'stop the screen saver (screen saver preferences object input)',
  inputSchema: {
    type: 'object',
    properties: {
      direct_parameter_required_screen_saver_preferences_object: {
        type: 'string',
        description: 'the object for the command'
      }
    },
    required: ['direct_parameter_required_screen_saver_preferences_object'],
    additionalProperties: false
  }
},
          {
  name: 'get_current_screen_saver_of_application',
  description: 'Get the currently selected screen saver of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'set_current_screen_saver_of_application',
  description: 'Set the currently selected screen saver of application',
  inputSchema: {
    type: 'object',
    properties: {
      value_required_screen_saver: {
        type: 'string',
        description: 'New value for the currently selected screen saver'
      }
    },
    required: ['value_required_screen_saver'],
    additionalProperties: false
  }
},
          {
  name: 'get_screen_saver_preferences_of_application',
  description: 'Get the preferences common to all screen savers of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'set_screen_saver_preferences_of_application',
  description: 'Set the preferences common to all screen savers of application',
  inputSchema: {
    type: 'object',
    properties: {
      value_required_screen_saver_preferences_object: {
        type: 'string',
        description: 'New value for the preferences common to all screen savers'
      }
    },
    required: ['value_required_screen_saver_preferences_object'],
    additionalProperties: false
  }
},
          {
  name: 'get_displayed_name_of_screen_saver',
  description: 'Get name of the screen saver module as displayed to the user',
  inputSchema: {
    type: 'object',
    properties: {
      target_screen_saver_required_string: {
        type: 'string',
        description: 'The screen saver object to access (e.g., \"front screen saver\", \"screen saver 1\")'
      }
    },
    required: ['target_screen_saver_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_name_of_screen_saver',
  description: 'Get name of the screen saver module to be displayed',
  inputSchema: {
    type: 'object',
    properties: {
      target_screen_saver_required_string: {
        type: 'string',
        description: 'The screen saver object to access (e.g., \"front screen saver\", \"screen saver 1\")'
      }
    },
    required: ['target_screen_saver_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_path_of_screen_saver',
  description: 'Get path to the screen saver module',
  inputSchema: {
    type: 'object',
    properties: {
      target_screen_saver_required_string: {
        type: 'string',
        description: 'The screen saver object to access (e.g., \"front screen saver\", \"screen saver 1\")'
      }
    },
    required: ['target_screen_saver_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_picture_display_style_of_screen_saver',
  description: 'Get effect to use when displaying picture-based screen savers (slideshow, collage, or mosaic)',
  inputSchema: {
    type: 'object',
    properties: {
      target_screen_saver_required_string: {
        type: 'string',
        description: 'The screen saver object to access (e.g., \"front screen saver\", \"screen saver 1\")'
      }
    },
    required: ['target_screen_saver_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_picture_display_style_of_screen_saver',
  description: 'Set effect to use when displaying picture-based screen savers (slideshow, collage, or mosaic)',
  inputSchema: {
    type: 'object',
    properties: {
      target_screen_saver_required_string: {
        type: 'string',
        description: 'The screen saver object to access (e.g., \"front screen saver\", \"screen saver 1\")'
      },
      value_required_text: {
        type: 'string',
        description: 'New value for effect to use when displaying picture-based screen savers (slideshow, collage, or mosaic)'
      }
    },
    required: ['target_screen_saver_required_string', 'value_required_text'],
    additionalProperties: false
  }
},
          {
  name: 'get_delay_interval_of_screen_saver_preferences_object',
  description: 'Get number of seconds of idle time before the screen saver starts; zero for never of screen saver preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_screen_saver_preferences_object_required_string: {
        type: 'string',
        description: 'The screen saver preferences object object to access (e.g., \"front screen saver preferences object\", \"screen saver preferences object 1\")'
      }
    },
    required: ['target_screen_saver_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_delay_interval_of_screen_saver_preferences_object',
  description: 'Set number of seconds of idle time before the screen saver starts; zero for never of screen saver preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_screen_saver_preferences_object_required_string: {
        type: 'string',
        description: 'The screen saver preferences object object to access (e.g., \"front screen saver preferences object\", \"screen saver preferences object 1\")'
      },
      value_required_integer: {
        type: 'number',
        description: 'New value for number of seconds of idle time before the screen saver starts; zero for never'
      }
    },
    required: ['target_screen_saver_preferences_object_required_string', 'value_required_integer'],
    additionalProperties: false
  }
},
          {
  name: 'get_main_screen_only_of_screen_saver_preferences_object',
  description: 'Get should the screen saver be shown only on the main screen? of screen saver preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_screen_saver_preferences_object_required_string: {
        type: 'string',
        description: 'The screen saver preferences object object to access (e.g., \"front screen saver preferences object\", \"screen saver preferences object 1\")'
      }
    },
    required: ['target_screen_saver_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_main_screen_only_of_screen_saver_preferences_object',
  description: 'Set should the screen saver be shown only on the main screen? of screen saver preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_screen_saver_preferences_object_required_string: {
        type: 'string',
        description: 'The screen saver preferences object object to access (e.g., \"front screen saver preferences object\", \"screen saver preferences object 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for should the screen saver be shown only on the main screen?'
      }
    },
    required: ['target_screen_saver_preferences_object_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_running_of_screen_saver_preferences_object',
  description: 'Get is the screen saver running? of screen saver preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_screen_saver_preferences_object_required_string: {
        type: 'string',
        description: 'The screen saver preferences object object to access (e.g., \"front screen saver preferences object\", \"screen saver preferences object 1\")'
      }
    },
    required: ['target_screen_saver_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_show_clock_of_screen_saver_preferences_object',
  description: 'Get should a clock appear over the screen saver? of screen saver preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_screen_saver_preferences_object_required_string: {
        type: 'string',
        description: 'The screen saver preferences object object to access (e.g., \"front screen saver preferences object\", \"screen saver preferences object 1\")'
      }
    },
    required: ['target_screen_saver_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_show_clock_of_screen_saver_preferences_object',
  description: 'Set should a clock appear over the screen saver? of screen saver preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_screen_saver_preferences_object_required_string: {
        type: 'string',
        description: 'The screen saver preferences object object to access (e.g., \"front screen saver preferences object\", \"screen saver preferences object 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for should a clock appear over the screen saver?'
      }
    },
    required: ['target_screen_saver_preferences_object_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_security_preferences_of_application',
  description: 'Get a collection of security preferences of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'set_security_preferences_of_application',
  description: 'Set a collection of security preferences of application',
  inputSchema: {
    type: 'object',
    properties: {
      value_required_security_preferences_object: {
        type: 'string',
        description: 'New value for a collection of security preferences'
      }
    },
    required: ['value_required_security_preferences_object'],
    additionalProperties: false
  }
},
          {
  name: 'get_automatic_login_of_security_preferences_object',
  description: 'Get Is automatic login allowed? of security preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_security_preferences_object_required_string: {
        type: 'string',
        description: 'The security preferences object object to access (e.g., \"front security preferences object\", \"security preferences object 1\")'
      }
    },
    required: ['target_security_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_automatic_login_of_security_preferences_object',
  description: 'Set Is automatic login allowed? of security preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_security_preferences_object_required_string: {
        type: 'string',
        description: 'The security preferences object object to access (e.g., \"front security preferences object\", \"security preferences object 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for Is automatic login allowed?'
      }
    },
    required: ['target_security_preferences_object_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_log_out_when_inactive_of_security_preferences_object',
  description: 'Get Will the computer log out when inactive? of security preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_security_preferences_object_required_string: {
        type: 'string',
        description: 'The security preferences object object to access (e.g., \"front security preferences object\", \"security preferences object 1\")'
      }
    },
    required: ['target_security_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_log_out_when_inactive_of_security_preferences_object',
  description: 'Set Will the computer log out when inactive? of security preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_security_preferences_object_required_string: {
        type: 'string',
        description: 'The security preferences object object to access (e.g., \"front security preferences object\", \"security preferences object 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for Will the computer log out when inactive?'
      }
    },
    required: ['target_security_preferences_object_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_log_out_when_inactive_interval_of_security_preferences',
  description: 'Get The interval of inactivity after which the computer will log out of security preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_security_preferences_object_required_string: {
        type: 'string',
        description: 'The security preferences object object to access (e.g., \"front security preferences object\", \"security preferences object 1\")'
      }
    },
    required: ['target_security_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_log_out_when_inactive_interval_of_security_preferences',
  description: 'Set The interval of inactivity after which the computer will log out of security preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_security_preferences_object_required_string: {
        type: 'string',
        description: 'The security preferences object object to access (e.g., \"front security preferences object\", \"security preferences object 1\")'
      },
      value_required_integer: {
        type: 'number',
        description: 'New value for The interval of inactivity after which the computer will log out'
      }
    },
    required: ['target_security_preferences_object_required_string', 'value_required_integer'],
    additionalProperties: false
  }
},
          {
  name: 'get_require_password_to_unlock_of_security_preferences_object',
  description: 'Get Is a password required to unlock secure preferences? of security preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_security_preferences_object_required_string: {
        type: 'string',
        description: 'The security preferences object object to access (e.g., \"front security preferences object\", \"security preferences object 1\")'
      }
    },
    required: ['target_security_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_require_password_to_unlock_of_security_preferences_object',
  description: 'Set Is a password required to unlock secure preferences? of security preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_security_preferences_object_required_string: {
        type: 'string',
        description: 'The security preferences object object to access (e.g., \"front security preferences object\", \"security preferences object 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for Is a password required to unlock secure preferences?'
      }
    },
    required: ['target_security_preferences_object_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_require_password_to_wake_of_security_preferences_object',
  description: 'Get Is a password required to wake the computer from sleep or screen saver? of security preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_security_preferences_object_required_string: {
        type: 'string',
        description: 'The security preferences object object to access (e.g., \"front security preferences object\", \"security preferences object 1\")'
      }
    },
    required: ['target_security_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_require_password_to_wake_of_security_preferences_object',
  description: 'Set Is a password required to wake the computer from sleep or screen saver? of security preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_security_preferences_object_required_string: {
        type: 'string',
        description: 'The security preferences object object to access (e.g., \"front security preferences object\", \"security preferences object 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for Is a password required to wake the computer from sleep or screen saver?'
      }
    },
    required: ['target_security_preferences_object_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_secure_virtual_memory_of_security_preferences_object',
  description: 'Get Is secure virtual memory being used? of security preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_security_preferences_object_required_string: {
        type: 'string',
        description: 'The security preferences object object to access (e.g., \"front security preferences object\", \"security preferences object 1\")'
      }
    },
    required: ['target_security_preferences_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_secure_virtual_memory_of_security_preferences_object',
  description: 'Set Is secure virtual memory being used? of security preferences object',
  inputSchema: {
    type: 'object',
    properties: {
      target_security_preferences_object_required_string: {
        type: 'string',
        description: 'The security preferences object object to access (e.g., \"front security preferences object\", \"security preferences object 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for Is secure virtual memory being used?'
      }
    },
    required: ['target_security_preferences_object_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'delete_for_disk',
  description: 'Delete disk item(s).',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      },
      direct_parameter_required_disk_item: {
        type: 'string',
        description: 'The disk item(s) to be deleted.'
      }
    },
    required: ['target_disk_required_string', 'direct_parameter_required_disk_item'],
    additionalProperties: false
  }
},
          {
  name: 'delete_for_alias_of_disk',
  description: 'Delete alias item(s).',
  inputSchema: {
    type: 'object',
    properties: {
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      },
      direct_parameter_required_disk_item: {
        type: 'string',
        description: 'The disk item(s) to be deleted.'
      }
    },
    required: ['target_alias_required_string', 'target_disk_required_string', 'direct_parameter_required_disk_item'],
    additionalProperties: false
  }
},
          {
  name: 'delete_for_file_package_of_alias_of_disk',
  description: 'Delete file package item(s).',
  inputSchema: {
    type: 'object',
    properties: {
      target_file_package_required_string: {
        type: 'string',
        description: 'The file package object to access (e.g., \"front file package\", \"file package 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      },
      direct_parameter_required_disk_item: {
        type: 'string',
        description: 'The disk item(s) to be deleted.'
      }
    },
    required: ['target_file_package_required_string', 'target_alias_required_string', 'target_disk_required_string', 'direct_parameter_required_disk_item'],
    additionalProperties: false
  }
},
          {
  name: 'delete_for_folder_of_alias_of_disk',
  description: 'Delete folder item(s).',
  inputSchema: {
    type: 'object',
    properties: {
      target_folder_required_string: {
        type: 'string',
        description: 'The folder object to access (e.g., \"front folder\", \"folder 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      },
      direct_parameter_required_disk_item: {
        type: 'string',
        description: 'The disk item(s) to be deleted.'
      }
    },
    required: ['target_folder_required_string', 'target_alias_required_string', 'target_disk_required_string', 'direct_parameter_required_disk_item'],
    additionalProperties: false
  }
},
          {
  name: 'move_disk_item',
  description: 'Move disk item(s) to a new location. (disk item input)',
  inputSchema: {
    type: 'object',
    properties: {
      direct_parameter_required_disk_item: {
        type: 'string',
        description: 'The disk item(s) to be moved.'
      },
      to_required_location_specifier: {
        type: 'string',
        description: 'The new location for the disk item(s).'
      }
    },
    required: ['direct_parameter_required_disk_item', 'to_required_location_specifier'],
    additionalProperties: false
  }
},
          {
  name: 'move_disk_item',
  description: 'Move disk item(s) to a new location. (disk item input)',
  inputSchema: {
    type: 'object',
    properties: {
      direct_parameter_required_list_of_disk_item: {
        type: 'string',
        description: 'The disk item(s) to be moved.'
      },
      to_required_location_specifier: {
        type: 'string',
        description: 'The new location for the disk item(s).'
      }
    },
    required: ['direct_parameter_required_list_of_disk_item', 'to_required_location_specifier'],
    additionalProperties: false
  }
},
          {
  name: 'move_text',
  description: 'Move disk item(s) to a new location. (text input)',
  inputSchema: {
    type: 'object',
    properties: {
      direct_parameter_required_text: {
        type: 'string',
        description: 'The disk item(s) to be moved.'
      },
      to_required_location_specifier: {
        type: 'string',
        description: 'The new location for the disk item(s).'
      }
    },
    required: ['direct_parameter_required_text', 'to_required_location_specifier'],
    additionalProperties: false
  }
},
          {
  name: 'move_text',
  description: 'Move disk item(s) to a new location. (text input)',
  inputSchema: {
    type: 'object',
    properties: {
      direct_parameter_required_list_of_text: {
        type: 'string',
        description: 'The disk item(s) to be moved.'
      },
      to_required_location_specifier: {
        type: 'string',
        description: 'The new location for the disk item(s).'
      }
    },
    required: ['direct_parameter_required_list_of_text', 'to_required_location_specifier'],
    additionalProperties: false
  }
},
          {
  name: 'open_file',
  description: 'Open disk item(s) with the appropriate application. (file input)',
  inputSchema: {
    type: 'object',
    properties: {
      direct_parameter_required_file: {
        type: 'string',
        description: 'The disk item(s) to be opened.'
      }
    },
    required: ['direct_parameter_required_file'],
    additionalProperties: false
  }
},
          {
  name: 'open_text',
  description: 'Open disk item(s) with the appropriate application. (text input)',
  inputSchema: {
    type: 'object',
    properties: {
      direct_parameter_required_text: {
        type: 'string',
        description: 'The disk item(s) to be opened.'
      }
    },
    required: ['direct_parameter_required_text'],
    additionalProperties: false
  }
},
          {
  name: 'get_application_support_folder_of_application',
  description: 'Get The Application Support folder',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_applications_folder_of_application',
  description: 'Get The user\'s Applications folder',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_classic_domain_of_application',
  description: 'Get the collection of folders belonging to the Classic System of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_desktop_folder_of_application',
  description: 'Get The user\'s Desktop folder of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_desktop_pictures_folder_of_application',
  description: 'Get The Desktop Pictures folder of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_documents_folder_of_application',
  description: 'Get The user\'s Documents folder of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_downloads_folder_of_application',
  description: 'Get The user\'s Downloads folder of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_favorites_folder_of_application',
  description: 'Get The user\'s Favorites folder of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_folder_action_scripts_folder_of_application',
  description: 'Get The user\'s Folder Action Scripts folder of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_fonts_folder_of_application',
  description: 'Get The Fonts folder of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_home_folder_of_application',
  description: 'Get The Home folder of the currently logged in user of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_library_folder_of_application',
  description: 'Get The Library folder of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_local_domain_of_application',
  description: 'Get the collection of folders residing on the Local machine of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_movies_folder_of_application',
  description: 'Get The user\'s Movies folder of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_music_folder_of_application',
  description: 'Get The user\'s Music folder of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_network_domain_of_application',
  description: 'Get the collection of folders residing on the Network of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_pictures_folder_of_application',
  description: 'Get The user\'s Pictures folder of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_preferences_folder_of_application',
  description: 'Get The user\'s Preferences folder of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_public_folder_of_application',
  description: 'Get The user\'s Public folder of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_scripting_additions_folder_of_application',
  description: 'Get The Scripting Additions folder of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_scripts_folder_of_application',
  description: 'Get The user\'s Scripts folder of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_shared_documents_folder_of_application',
  description: 'Get The Shared Documents folder of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_sites_folder_of_application',
  description: 'Get The user\'s Sites folder of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_speakable_items_folder_of_application',
  description: 'Get The Speakable Items folder of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_startup_disk_of_application',
  description: 'Get the disk from which Mac OS X was loaded of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_system_domain_of_application',
  description: 'Get the collection of folders belonging to the System of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_temporary_items_folder_of_application',
  description: 'Get The Temporary Items folder of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_trash_of_application',
  description: 'Get The user\'s Trash folder of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_user_domain_of_application',
  description: 'Get the collection of folders belonging to the User of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_utilities_folder_of_application',
  description: 'Get The Utilities folder of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_workflows_folder_of_application',
  description: 'Get The Automator Workflows folder of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_creator_type_of_alias_of_disk',
  description: 'Get the OSType identifying the application that created the alias',
  inputSchema: {
    type: 'object',
    properties: {
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_creator_type_of_alias_of_disk',
  description: 'Set the OSType identifying the application that created the alias',
  inputSchema: {
    type: 'object',
    properties: {
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      },
      value_required_text: {
        type: 'string',
        description: 'New value for the OSType identifying the application that created the alias'
      }
    },
    required: ['target_alias_required_string', 'target_disk_required_string', 'value_required_text'],
    additionalProperties: false
  }
},
          {
  name: 'get_default_application_of_alias_of_disk',
  description: 'Get the application that will launch if the alias is opened',
  inputSchema: {
    type: 'object',
    properties: {
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_default_application_of_alias_of_disk',
  description: 'Set the application that will launch if the alias is opened',
  inputSchema: {
    type: 'object',
    properties: {
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      },
      value_required_disk_item: {
        type: 'string',
        description: 'New value for the application that will launch if the alias is opened'
      }
    },
    required: ['target_alias_required_string', 'target_disk_required_string', 'value_required_disk_item'],
    additionalProperties: false
  }
},
          {
  name: 'get_file_type_of_alias_of_disk',
  description: 'Get the OSType identifying the type of data contained in the alias',
  inputSchema: {
    type: 'object',
    properties: {
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_file_type_of_alias_of_disk',
  description: 'Set the OSType identifying the type of data contained in the alias',
  inputSchema: {
    type: 'object',
    properties: {
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      },
      value_required_text: {
        type: 'string',
        description: 'New value for the OSType identifying the type of data contained in the alias'
      }
    },
    required: ['target_alias_required_string', 'target_disk_required_string', 'value_required_text'],
    additionalProperties: false
  }
},
          {
  name: 'get_kind_of_alias_of_disk',
  description: 'Get The kind of alias, as shown in Finder',
  inputSchema: {
    type: 'object',
    properties: {
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_product_version_of_alias_of_disk',
  description: 'Get the version of the product (visible at the top of the \"Get Info\" window) of alias',
  inputSchema: {
    type: 'object',
    properties: {
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_short_version_of_alias_of_disk',
  description: 'Get the short version of the application bundle referenced by the alias',
  inputSchema: {
    type: 'object',
    properties: {
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_stationery_of_alias_of_disk',
  description: 'Get Is the alias a stationery pad?',
  inputSchema: {
    type: 'object',
    properties: {
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_stationery_of_alias_of_disk',
  description: 'Set Is the alias a stationery pad?',
  inputSchema: {
    type: 'object',
    properties: {
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for Is the alias a stationery pad?'
      }
    },
    required: ['target_alias_required_string', 'target_disk_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_type_identifier_of_alias_of_disk',
  description: 'Get The type identifier of the alias',
  inputSchema: {
    type: 'object',
    properties: {
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_version_of_alias_of_disk',
  description: 'Get the version of the application bundle referenced by the alias (visible at the bottom of the \"Get Info\" window)',
  inputSchema: {
    type: 'object',
    properties: {
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_apple_menu_folder_of_classic_domain_object',
  description: 'Get The Apple Menu Items folder of Classic domain object',
  inputSchema: {
    type: 'object',
    properties: {
      target_classic_domain_object_required_string: {
        type: 'string',
        description: 'The Classic domain object object to access (e.g., \"front Classic domain object\", \"Classic domain object 1\")'
      }
    },
    required: ['target_classic_domain_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_control_panels_folder_of_classic_domain_object',
  description: 'Get The Control Panels folder of Classic domain object',
  inputSchema: {
    type: 'object',
    properties: {
      target_classic_domain_object_required_string: {
        type: 'string',
        description: 'The Classic domain object object to access (e.g., \"front Classic domain object\", \"Classic domain object 1\")'
      }
    },
    required: ['target_classic_domain_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_control_strip_modules_folder_of_classic_domain_object',
  description: 'Get The Control Strip Modules folder of Classic domain object',
  inputSchema: {
    type: 'object',
    properties: {
      target_classic_domain_object_required_string: {
        type: 'string',
        description: 'The Classic domain object object to access (e.g., \"front Classic domain object\", \"Classic domain object 1\")'
      }
    },
    required: ['target_classic_domain_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_desktop_folder_of_classic_domain_object',
  description: 'Get The Classic Desktop folder of Classic domain object',
  inputSchema: {
    type: 'object',
    properties: {
      target_classic_domain_object_required_string: {
        type: 'string',
        description: 'The Classic domain object object to access (e.g., \"front Classic domain object\", \"Classic domain object 1\")'
      }
    },
    required: ['target_classic_domain_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_extensions_folder_of_classic_domain_object',
  description: 'Get The Extensions folder of Classic domain object',
  inputSchema: {
    type: 'object',
    properties: {
      target_classic_domain_object_required_string: {
        type: 'string',
        description: 'The Classic domain object object to access (e.g., \"front Classic domain object\", \"Classic domain object 1\")'
      }
    },
    required: ['target_classic_domain_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_fonts_folder_of_classic_domain_object',
  description: 'Get The Fonts folder of Classic domain object',
  inputSchema: {
    type: 'object',
    properties: {
      target_classic_domain_object_required_string: {
        type: 'string',
        description: 'The Classic domain object object to access (e.g., \"front Classic domain object\", \"Classic domain object 1\")'
      }
    },
    required: ['target_classic_domain_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_launcher_items_folder_of_classic_domain_object',
  description: 'Get The Launcher Items folder of Classic domain object',
  inputSchema: {
    type: 'object',
    properties: {
      target_classic_domain_object_required_string: {
        type: 'string',
        description: 'The Classic domain object object to access (e.g., \"front Classic domain object\", \"Classic domain object 1\")'
      }
    },
    required: ['target_classic_domain_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_preferences_folder_of_classic_domain_object',
  description: 'Get The Classic Preferences folder of Classic domain object',
  inputSchema: {
    type: 'object',
    properties: {
      target_classic_domain_object_required_string: {
        type: 'string',
        description: 'The Classic domain object object to access (e.g., \"front Classic domain object\", \"Classic domain object 1\")'
      }
    },
    required: ['target_classic_domain_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_shutdown_folder_of_classic_domain_object',
  description: 'Get The Shutdown Items folder of Classic domain object',
  inputSchema: {
    type: 'object',
    properties: {
      target_classic_domain_object_required_string: {
        type: 'string',
        description: 'The Classic domain object object to access (e.g., \"front Classic domain object\", \"Classic domain object 1\")'
      }
    },
    required: ['target_classic_domain_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_startup_items_folder_of_classic_domain_object',
  description: 'Get The StartupItems folder of Classic domain object',
  inputSchema: {
    type: 'object',
    properties: {
      target_classic_domain_object_required_string: {
        type: 'string',
        description: 'The Classic domain object object to access (e.g., \"front Classic domain object\", \"Classic domain object 1\")'
      }
    },
    required: ['target_classic_domain_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_system_folder_of_classic_domain_object',
  description: 'Get The System folder of Classic domain object',
  inputSchema: {
    type: 'object',
    properties: {
      target_classic_domain_object_required_string: {
        type: 'string',
        description: 'The Classic domain object object to access (e.g., \"front Classic domain object\", \"Classic domain object 1\")'
      }
    },
    required: ['target_classic_domain_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_capacity_of_disk',
  description: 'Get the total number of bytes (free or used) on the disk',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_ejectable_of_disk',
  description: 'Get Can the media be ejected (floppies, CD\'s, and so on)? of disk',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_format_of_disk',
  description: 'Get the file system format of this disk',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_free_space_of_disk',
  description: 'Get the number of free bytes left on the disk',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_ignore_privileges_of_disk',
  description: 'Get Ignore permissions on this disk?',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_ignore_privileges_of_disk',
  description: 'Set Ignore permissions on this disk?',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for Ignore permissions on this disk?'
      }
    },
    required: ['target_disk_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_local_volume_of_disk',
  description: 'Get Is the media a local volume (as opposed to a file server)? of disk',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_server_of_disk',
  description: 'Get the server on which the disk resides, AFP volumes only',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_startup_of_disk',
  description: 'Get Is this disk the boot disk?',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_zone_of_disk',
  description: 'Get the zone in which the disk\'s server resides, AFP volumes only',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_busy_status_of_disk_item_of_alias_of_disk',
  description: 'Get Is the disk item busy?',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_item_required_string: {
        type: 'string',
        description: 'The disk item object to access (e.g., \"front disk item\", \"disk item 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_disk_item_required_string', 'target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_container_of_disk_item_of_alias_of_disk',
  description: 'Get the folder or disk which has this disk item as an element',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_item_required_string: {
        type: 'string',
        description: 'The disk item object to access (e.g., \"front disk item\", \"disk item 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_disk_item_required_string', 'target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_creation_date_of_disk_item_of_alias_of_disk',
  description: 'Get the date on which the disk item was created',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_item_required_string: {
        type: 'string',
        description: 'The disk item object to access (e.g., \"front disk item\", \"disk item 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_disk_item_required_string', 'target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_displayed_name_of_disk_item_of_alias_of_disk',
  description: 'Get the name of the disk item as displayed in the User Interface',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_item_required_string: {
        type: 'string',
        description: 'The disk item object to access (e.g., \"front disk item\", \"disk item 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_disk_item_required_string', 'target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_id_of_disk_item_of_alias_of_disk',
  description: 'Get the unique ID of the disk item',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_item_required_string: {
        type: 'string',
        description: 'The disk item object to access (e.g., \"front disk item\", \"disk item 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_disk_item_required_string', 'target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_modification_date_of_disk_item_of_alias_of_disk',
  description: 'Get the date on which the disk item was last modified',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_item_required_string: {
        type: 'string',
        description: 'The disk item object to access (e.g., \"front disk item\", \"disk item 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_disk_item_required_string', 'target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_modification_date_of_disk_item_of_alias_of_disk',
  description: 'Set the date on which the disk item was last modified',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_item_required_string: {
        type: 'string',
        description: 'The disk item object to access (e.g., \"front disk item\", \"disk item 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      },
      value_required_date: {
        type: 'string',
        description: 'New value for the date on which the disk item was last modified'
      }
    },
    required: ['target_disk_item_required_string', 'target_alias_required_string', 'target_disk_required_string', 'value_required_date'],
    additionalProperties: false
  }
},
          {
  name: 'get_name_of_disk_item_of_alias_of_disk',
  description: 'Get the name of the disk item',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_item_required_string: {
        type: 'string',
        description: 'The disk item object to access (e.g., \"front disk item\", \"disk item 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_disk_item_required_string', 'target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_name_of_disk_item_of_alias_of_disk',
  description: 'Set the name of the disk item',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_item_required_string: {
        type: 'string',
        description: 'The disk item object to access (e.g., \"front disk item\", \"disk item 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      },
      value_required_text: {
        type: 'string',
        description: 'New value for the name of the disk item'
      }
    },
    required: ['target_disk_item_required_string', 'target_alias_required_string', 'target_disk_required_string', 'value_required_text'],
    additionalProperties: false
  }
},
          {
  name: 'get_name_extension_of_disk_item_of_alias_of_disk',
  description: 'Get the extension portion of the name of disk item',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_item_required_string: {
        type: 'string',
        description: 'The disk item object to access (e.g., \"front disk item\", \"disk item 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_disk_item_required_string', 'target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_package_folder_of_disk_item_of_alias_of_disk',
  description: 'Get Is the disk item a package?',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_item_required_string: {
        type: 'string',
        description: 'The disk item object to access (e.g., \"front disk item\", \"disk item 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_disk_item_required_string', 'target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_path_of_disk_item_of_alias_of_disk',
  description: 'Get the file system path of the disk item',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_item_required_string: {
        type: 'string',
        description: 'The disk item object to access (e.g., \"front disk item\", \"disk item 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_disk_item_required_string', 'target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_physical_size_of_disk_item_of_alias_of_disk',
  description: 'Get the actual space used by the disk item on disk',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_item_required_string: {
        type: 'string',
        description: 'The disk item object to access (e.g., \"front disk item\", \"disk item 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_disk_item_required_string', 'target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_posix_path_of_disk_item_of_alias_of_disk',
  description: 'Get the POSIX file system path of the disk item',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_item_required_string: {
        type: 'string',
        description: 'The disk item object to access (e.g., \"front disk item\", \"disk item 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_disk_item_required_string', 'target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_size_of_disk_item_of_alias_of_disk',
  description: 'Get the logical size of the disk item',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_item_required_string: {
        type: 'string',
        description: 'The disk item object to access (e.g., \"front disk item\", \"disk item 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_disk_item_required_string', 'target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_url_of_disk_item_of_alias_of_disk',
  description: 'Get the URL of the disk item',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_item_required_string: {
        type: 'string',
        description: 'The disk item object to access (e.g., \"front disk item\", \"disk item 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_disk_item_required_string', 'target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_visible_of_disk_item_of_alias_of_disk',
  description: 'Get Is the disk item visible?',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_item_required_string: {
        type: 'string',
        description: 'The disk item object to access (e.g., \"front disk item\", \"disk item 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_disk_item_required_string', 'target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_visible_of_disk_item_of_alias_of_disk',
  description: 'Set Is the disk item visible?',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_item_required_string: {
        type: 'string',
        description: 'The disk item object to access (e.g., \"front disk item\", \"disk item 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for Is the disk item visible?'
      }
    },
    required: ['target_disk_item_required_string', 'target_alias_required_string', 'target_disk_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_volume_of_disk_item_of_alias_of_disk',
  description: 'Get the volume on which the disk item resides',
  inputSchema: {
    type: 'object',
    properties: {
      target_disk_item_required_string: {
        type: 'string',
        description: 'The disk item object to access (e.g., \"front disk item\", \"disk item 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_disk_item_required_string', 'target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_application_support_folder_of_domain',
  description: 'Get The Application Support folder of domain',
  inputSchema: {
    type: 'object',
    properties: {
      target_domain_required_string: {
        type: 'string',
        description: 'The domain object to access (e.g., \"front domain\", \"domain 1\")'
      }
    },
    required: ['target_domain_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_applications_folder_of_domain',
  description: 'Get The Applications folder of domain',
  inputSchema: {
    type: 'object',
    properties: {
      target_domain_required_string: {
        type: 'string',
        description: 'The domain object to access (e.g., \"front domain\", \"domain 1\")'
      }
    },
    required: ['target_domain_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_desktop_pictures_folder_of_domain',
  description: 'Get The Desktop Pictures folder of domain',
  inputSchema: {
    type: 'object',
    properties: {
      target_domain_required_string: {
        type: 'string',
        description: 'The domain object to access (e.g., \"front domain\", \"domain 1\")'
      }
    },
    required: ['target_domain_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_folder_action_scripts_folder_of_domain',
  description: 'Get The Folder Action Scripts folder of domain',
  inputSchema: {
    type: 'object',
    properties: {
      target_domain_required_string: {
        type: 'string',
        description: 'The domain object to access (e.g., \"front domain\", \"domain 1\")'
      }
    },
    required: ['target_domain_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_fonts_folder_of_domain',
  description: 'Get The Fonts folder of domain',
  inputSchema: {
    type: 'object',
    properties: {
      target_domain_required_string: {
        type: 'string',
        description: 'The domain object to access (e.g., \"front domain\", \"domain 1\")'
      }
    },
    required: ['target_domain_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_id_of_domain',
  description: 'Get the unique identifier of the domain',
  inputSchema: {
    type: 'object',
    properties: {
      target_domain_required_string: {
        type: 'string',
        description: 'The domain object to access (e.g., \"front domain\", \"domain 1\")'
      }
    },
    required: ['target_domain_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_library_folder_of_domain',
  description: 'Get The Library folder of domain',
  inputSchema: {
    type: 'object',
    properties: {
      target_domain_required_string: {
        type: 'string',
        description: 'The domain object to access (e.g., \"front domain\", \"domain 1\")'
      }
    },
    required: ['target_domain_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_name_of_domain',
  description: 'Get the name of the domain',
  inputSchema: {
    type: 'object',
    properties: {
      target_domain_required_string: {
        type: 'string',
        description: 'The domain object to access (e.g., \"front domain\", \"domain 1\")'
      }
    },
    required: ['target_domain_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_preferences_folder_of_domain',
  description: 'Get The Preferences folder of domain',
  inputSchema: {
    type: 'object',
    properties: {
      target_domain_required_string: {
        type: 'string',
        description: 'The domain object to access (e.g., \"front domain\", \"domain 1\")'
      }
    },
    required: ['target_domain_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_scripting_additions_folder_of_domain',
  description: 'Get The Scripting Additions folder of domain',
  inputSchema: {
    type: 'object',
    properties: {
      target_domain_required_string: {
        type: 'string',
        description: 'The domain object to access (e.g., \"front domain\", \"domain 1\")'
      }
    },
    required: ['target_domain_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_scripts_folder_of_domain',
  description: 'Get The Scripts folder of domain',
  inputSchema: {
    type: 'object',
    properties: {
      target_domain_required_string: {
        type: 'string',
        description: 'The domain object to access (e.g., \"front domain\", \"domain 1\")'
      }
    },
    required: ['target_domain_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_shared_documents_folder_of_domain',
  description: 'Get The Shared Documents folder of domain',
  inputSchema: {
    type: 'object',
    properties: {
      target_domain_required_string: {
        type: 'string',
        description: 'The domain object to access (e.g., \"front domain\", \"domain 1\")'
      }
    },
    required: ['target_domain_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_speakable_items_folder_of_domain',
  description: 'Get The Speakable Items folder of domain',
  inputSchema: {
    type: 'object',
    properties: {
      target_domain_required_string: {
        type: 'string',
        description: 'The domain object to access (e.g., \"front domain\", \"domain 1\")'
      }
    },
    required: ['target_domain_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_utilities_folder_of_domain',
  description: 'Get The Utilities folder of domain',
  inputSchema: {
    type: 'object',
    properties: {
      target_domain_required_string: {
        type: 'string',
        description: 'The domain object to access (e.g., \"front domain\", \"domain 1\")'
      }
    },
    required: ['target_domain_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_workflows_folder_of_domain',
  description: 'Get The Automator Workflows folder of domain',
  inputSchema: {
    type: 'object',
    properties: {
      target_domain_required_string: {
        type: 'string',
        description: 'The domain object to access (e.g., \"front domain\", \"domain 1\")'
      }
    },
    required: ['target_domain_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_creator_type_of_file_of_alias_of_disk',
  description: 'Get the OSType identifying the application that created the file',
  inputSchema: {
    type: 'object',
    properties: {
      target_file_required_string: {
        type: 'string',
        description: 'The file object to access (e.g., \"front file\", \"file 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_file_required_string', 'target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_creator_type_of_file_of_alias_of_disk',
  description: 'Set the OSType identifying the application that created the file',
  inputSchema: {
    type: 'object',
    properties: {
      target_file_required_string: {
        type: 'string',
        description: 'The file object to access (e.g., \"front file\", \"file 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      },
      value_required_text: {
        type: 'string',
        description: 'New value for the OSType identifying the application that created the file'
      }
    },
    required: ['target_file_required_string', 'target_alias_required_string', 'target_disk_required_string', 'value_required_text'],
    additionalProperties: false
  }
},
          {
  name: 'get_default_application_of_file_of_alias_of_disk',
  description: 'Get the application that will launch if the file is opened',
  inputSchema: {
    type: 'object',
    properties: {
      target_file_required_string: {
        type: 'string',
        description: 'The file object to access (e.g., \"front file\", \"file 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_file_required_string', 'target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_default_application_of_file_of_alias_of_disk',
  description: 'Set the application that will launch if the file is opened',
  inputSchema: {
    type: 'object',
    properties: {
      target_file_required_string: {
        type: 'string',
        description: 'The file object to access (e.g., \"front file\", \"file 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      },
      value_required_disk_item: {
        type: 'string',
        description: 'New value for the application that will launch if the file is opened'
      }
    },
    required: ['target_file_required_string', 'target_alias_required_string', 'target_disk_required_string', 'value_required_disk_item'],
    additionalProperties: false
  }
},
          {
  name: 'get_file_type_of_file_of_alias_of_disk',
  description: 'Get the OSType identifying the type of data contained in the file',
  inputSchema: {
    type: 'object',
    properties: {
      target_file_required_string: {
        type: 'string',
        description: 'The file object to access (e.g., \"front file\", \"file 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_file_required_string', 'target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_file_type_of_file_of_alias_of_disk',
  description: 'Set the OSType identifying the type of data contained in the file',
  inputSchema: {
    type: 'object',
    properties: {
      target_file_required_string: {
        type: 'string',
        description: 'The file object to access (e.g., \"front file\", \"file 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      },
      value_required_text: {
        type: 'string',
        description: 'New value for the OSType identifying the type of data contained in the file'
      }
    },
    required: ['target_file_required_string', 'target_alias_required_string', 'target_disk_required_string', 'value_required_text'],
    additionalProperties: false
  }
},
          {
  name: 'get_kind_of_file_of_alias_of_disk',
  description: 'Get The kind of file, as shown in Finder',
  inputSchema: {
    type: 'object',
    properties: {
      target_file_required_string: {
        type: 'string',
        description: 'The file object to access (e.g., \"front file\", \"file 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_file_required_string', 'target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_product_version_of_file_of_alias_of_disk',
  description: 'Get the version of the product (visible at the top of the \"Get Info\" window) of file',
  inputSchema: {
    type: 'object',
    properties: {
      target_file_required_string: {
        type: 'string',
        description: 'The file object to access (e.g., \"front file\", \"file 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_file_required_string', 'target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_short_version_of_file_of_alias_of_disk',
  description: 'Get the short version of the file',
  inputSchema: {
    type: 'object',
    properties: {
      target_file_required_string: {
        type: 'string',
        description: 'The file object to access (e.g., \"front file\", \"file 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_file_required_string', 'target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_stationery_of_file_of_alias_of_disk',
  description: 'Get Is the file a stationery pad?',
  inputSchema: {
    type: 'object',
    properties: {
      target_file_required_string: {
        type: 'string',
        description: 'The file object to access (e.g., \"front file\", \"file 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_file_required_string', 'target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_stationery_of_file_of_alias_of_disk',
  description: 'Set Is the file a stationery pad?',
  inputSchema: {
    type: 'object',
    properties: {
      target_file_required_string: {
        type: 'string',
        description: 'The file object to access (e.g., \"front file\", \"file 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for Is the file a stationery pad?'
      }
    },
    required: ['target_file_required_string', 'target_alias_required_string', 'target_disk_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_type_identifier_of_file_of_alias_of_disk',
  description: 'Get The type identifier of the file',
  inputSchema: {
    type: 'object',
    properties: {
      target_file_required_string: {
        type: 'string',
        description: 'The file object to access (e.g., \"front file\", \"file 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_file_required_string', 'target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_version_of_file_of_alias_of_disk',
  description: 'Get the version of the file (visible at the bottom of the \"Get Info\" window)',
  inputSchema: {
    type: 'object',
    properties: {
      target_file_required_string: {
        type: 'string',
        description: 'The file object to access (e.g., \"front file\", \"file 1\")'
      },
      target_alias_required_string: {
        type: 'string',
        description: 'The alias object to access (e.g., \"front alias\", \"alias 1\")'
      },
      target_disk_required_string: {
        type: 'string',
        description: 'The disk object to access (e.g., \"front disk\", \"disk 1\")'
      }
    },
    required: ['target_file_required_string', 'target_alias_required_string', 'target_disk_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_desktop_folder_of_user_domain_object',
  description: 'Get The user\'s Desktop folder of user domain object',
  inputSchema: {
    type: 'object',
    properties: {
      target_user_domain_object_required_string: {
        type: 'string',
        description: 'The user domain object object to access (e.g., \"front user domain object\", \"user domain object 1\")'
      }
    },
    required: ['target_user_domain_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_documents_folder_of_user_domain_object',
  description: 'Get The user\'s Documents folder of user domain object',
  inputSchema: {
    type: 'object',
    properties: {
      target_user_domain_object_required_string: {
        type: 'string',
        description: 'The user domain object object to access (e.g., \"front user domain object\", \"user domain object 1\")'
      }
    },
    required: ['target_user_domain_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_downloads_folder_of_user_domain_object',
  description: 'Get The user\'s Downloads folder of user domain object',
  inputSchema: {
    type: 'object',
    properties: {
      target_user_domain_object_required_string: {
        type: 'string',
        description: 'The user domain object object to access (e.g., \"front user domain object\", \"user domain object 1\")'
      }
    },
    required: ['target_user_domain_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_favorites_folder_of_user_domain_object',
  description: 'Get The user\'s Favorites folder of user domain object',
  inputSchema: {
    type: 'object',
    properties: {
      target_user_domain_object_required_string: {
        type: 'string',
        description: 'The user domain object object to access (e.g., \"front user domain object\", \"user domain object 1\")'
      }
    },
    required: ['target_user_domain_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_home_folder_of_user_domain_object',
  description: 'Get The user\'s Home folder of user domain object',
  inputSchema: {
    type: 'object',
    properties: {
      target_user_domain_object_required_string: {
        type: 'string',
        description: 'The user domain object object to access (e.g., \"front user domain object\", \"user domain object 1\")'
      }
    },
    required: ['target_user_domain_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_movies_folder_of_user_domain_object',
  description: 'Get The user\'s Movies folder of user domain object',
  inputSchema: {
    type: 'object',
    properties: {
      target_user_domain_object_required_string: {
        type: 'string',
        description: 'The user domain object object to access (e.g., \"front user domain object\", \"user domain object 1\")'
      }
    },
    required: ['target_user_domain_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_music_folder_of_user_domain_object',
  description: 'Get The user\'s Music folder of user domain object',
  inputSchema: {
    type: 'object',
    properties: {
      target_user_domain_object_required_string: {
        type: 'string',
        description: 'The user domain object object to access (e.g., \"front user domain object\", \"user domain object 1\")'
      }
    },
    required: ['target_user_domain_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_pictures_folder_of_user_domain_object',
  description: 'Get The user\'s Pictures folder of user domain object',
  inputSchema: {
    type: 'object',
    properties: {
      target_user_domain_object_required_string: {
        type: 'string',
        description: 'The user domain object object to access (e.g., \"front user domain object\", \"user domain object 1\")'
      }
    },
    required: ['target_user_domain_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_public_folder_of_user_domain_object',
  description: 'Get The user\'s Public folder of user domain object',
  inputSchema: {
    type: 'object',
    properties: {
      target_user_domain_object_required_string: {
        type: 'string',
        description: 'The user domain object object to access (e.g., \"front user domain object\", \"user domain object 1\")'
      }
    },
    required: ['target_user_domain_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_sites_folder_of_user_domain_object',
  description: 'Get The user\'s Sites folder of user domain object',
  inputSchema: {
    type: 'object',
    properties: {
      target_user_domain_object_required_string: {
        type: 'string',
        description: 'The user domain object object to access (e.g., \"front user domain object\", \"user domain object 1\")'
      }
    },
    required: ['target_user_domain_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_temporary_items_folder_of_user_domain_object',
  description: 'Get The Temporary Items folder of user domain object',
  inputSchema: {
    type: 'object',
    properties: {
      target_user_domain_object_required_string: {
        type: 'string',
        description: 'The user domain object object to access (e.g., \"front user domain object\", \"user domain object 1\")'
      }
    },
    required: ['target_user_domain_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'log_out',
  description: 'Log out the current user',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'restart',
  description: 'Restart the computer',
  inputSchema: {
    type: 'object',
    properties: {
      state_saving_preference_optional_boolean: {
        type: 'boolean',
        description: 'Is the user defined state saving preference followed?'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'shut_down',
  description: 'Shut Down the computer',
  inputSchema: {
    type: 'object',
    properties: {
      state_saving_preference_optional_boolean: {
        type: 'boolean',
        description: 'Is the user defined state saving preference followed?'
      }
    },
    additionalProperties: false
  }
},
          {
  name: 'sleep',
  description: 'Put the computer to sleep',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'click_for_window_of_process',
  description: 'cause the target window of process to behave as if the UI element were clicked',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      },
      direct_parameter_optional_ui_element: {
        type: 'string',
        description: 'The UI element to be clicked.'
      },
      at_optional_list_of_number: {
        type: 'number',
        description: 'when sent to a \"process\" object, the { x, y } location at which to click, in global coordinates'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'click_for_process',
  description: 'cause the target process to behave as if the UI element were clicked',
  inputSchema: {
    type: 'object',
    properties: {
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      },
      direct_parameter_optional_ui_element: {
        type: 'string',
        description: 'The UI element to be clicked.'
      },
      at_optional_list_of_number: {
        type: 'number',
        description: 'when sent to a \"process\" object, the { x, y } location at which to click, in global coordinates'
      }
    },
    required: ['target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'click_for_ui_element_of_window_of_process',
  description: 'cause the target process to behave as if the UI element were clicked',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      },
      direct_parameter_optional_ui_element: {
        type: 'string',
        description: 'The UI element to be clicked.'
      },
      at_optional_list_of_number: {
        type: 'number',
        description: 'when sent to a \"process\" object, the { x, y } location at which to click, in global coordinates'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'key_code',
  description: 'cause the target process to behave as if key codes were entered',
  inputSchema: {
    type: 'object',
    properties: {
      direct_parameter_required_integer: {
        type: 'number',
        description: 'The key code(s) to be sent. May be a list.'
      },
      using_optional_emds: {
        type: 'string',
        description: 'modifiers with which the key codes are to be entered'
      }
    },
    required: ['direct_parameter_required_integer'],
    additionalProperties: false
  }
},
          {
  name: 'keystroke',
  description: 'cause the target process to behave as if keystrokes were entered',
  inputSchema: {
    type: 'object',
    properties: {
      direct_parameter_required_text: {
        type: 'string',
        description: 'The keystrokes to be sent.'
      },
      using_optional_emds: {
        type: 'string',
        description: 'modifiers with which the keystrokes are to be entered'
      }
    },
    required: ['direct_parameter_required_text'],
    additionalProperties: false
  }
},
          {
  name: 'perform_for_action_of_ui_element_of_window_of_process',
  description: 'cause the target process to behave as if the action were applied to its UI element',
  inputSchema: {
    type: 'object',
    properties: {
      target_action_required_string: {
        type: 'string',
        description: 'The action object to access (e.g., \"front action\", \"action 1\")'
      },
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      },
      direct_parameter_required_action: {
        type: 'string',
        description: 'The action to be performed.'
      }
    },
    required: ['target_action_required_string', 'target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string', 'direct_parameter_required_action'],
    additionalProperties: false
  }
},
          {
  name: 'select_for_window_of_process',
  description: 'set the selected property of the window of process',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      },
      direct_parameter_required_ui_element: {
        type: 'string',
        description: 'The UI element to be selected.'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string', 'direct_parameter_required_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'select_for_ui_element_of_window_of_process',
  description: 'set the selected property of the UI element',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      },
      direct_parameter_required_ui_element: {
        type: 'string',
        description: 'The UI element to be selected.'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string', 'direct_parameter_required_ui_element'],
    additionalProperties: false
  }
},
          {
  name: 'get_ui_elements_enabled_of_application',
  description: 'Get Are UI element events currently being processed? of application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_description_of_action_of_ui_element_of_window_of_process',
  description: 'Get what the action does',
  inputSchema: {
    type: 'object',
    properties: {
      target_action_required_string: {
        type: 'string',
        description: 'The action object to access (e.g., \"front action\", \"action 1\")'
      },
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_action_required_string', 'target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_name_of_action_of_ui_element_of_window_of_process',
  description: 'Get the name of the action',
  inputSchema: {
    type: 'object',
    properties: {
      target_action_required_string: {
        type: 'string',
        description: 'The action object to access (e.g., \"front action\", \"action 1\")'
      },
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_action_required_string', 'target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_application_file_of_application_process',
  description: 'Get a reference to the application file from which this process was launched of application process',
  inputSchema: {
    type: 'object',
    properties: {
      target_application_process_required_string: {
        type: 'string',
        description: 'The application process object to access (e.g., \"front application process\", \"application process 1\")'
      }
    },
    required: ['target_application_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_name_of_attribute_of_ui_element_of_window_of_process',
  description: 'Get the name of the attribute',
  inputSchema: {
    type: 'object',
    properties: {
      target_attribute_required_string: {
        type: 'string',
        description: 'The attribute object to access (e.g., \"front attribute\", \"attribute 1\")'
      },
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_attribute_required_string', 'target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_settable_of_attribute_of_ui_element_of_window_of_process',
  description: 'Get Can the attribute be set?',
  inputSchema: {
    type: 'object',
    properties: {
      target_attribute_required_string: {
        type: 'string',
        description: 'The attribute object to access (e.g., \"front attribute\", \"attribute 1\")'
      },
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_attribute_required_string', 'target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_value_of_attribute_of_ui_element_of_window_of_process',
  description: 'Get the current value of the attribute',
  inputSchema: {
    type: 'object',
    properties: {
      target_attribute_required_string: {
        type: 'string',
        description: 'The attribute object to access (e.g., \"front attribute\", \"attribute 1\")'
      },
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_attribute_required_string', 'target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_value_of_attribute_of_ui_element_of_window_of_process',
  description: 'Set the current value of the attribute',
  inputSchema: {
    type: 'object',
    properties: {
      target_attribute_required_string: {
        type: 'string',
        description: 'The attribute object to access (e.g., \"front attribute\", \"attribute 1\")'
      },
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      },
      value_required_specifier: {
        type: 'string',
        description: 'New value for the current value of the attribute'
      }
    },
    required: ['target_attribute_required_string', 'target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string', 'value_required_specifier'],
    additionalProperties: false
  }
},
          {
  name: 'get_desk_accessory_file_of_desk_accessory_process',
  description: 'Get a reference to the desk accessory file from which this process was launched of desk accessory process',
  inputSchema: {
    type: 'object',
    properties: {
      target_desk_accessory_process_required_string: {
        type: 'string',
        description: 'The desk accessory process object to access (e.g., \"front desk accessory process\", \"desk accessory process 1\")'
      }
    },
    required: ['target_desk_accessory_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_accepts_high_level_events_of_process',
  description: 'Get Is the process high-level event aware (accepts open application, open document, print document, and quit)?',
  inputSchema: {
    type: 'object',
    properties: {
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_accepts_remote_events_of_process',
  description: 'Get Does the process accept remote events?',
  inputSchema: {
    type: 'object',
    properties: {
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_architecture_of_process',
  description: 'Get the architecture in which the process is running',
  inputSchema: {
    type: 'object',
    properties: {
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_background_only_of_process',
  description: 'Get Does the process run exclusively in the background?',
  inputSchema: {
    type: 'object',
    properties: {
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_bundle_identifier_of_process',
  description: 'Get the bundle identifier of the process\' application file',
  inputSchema: {
    type: 'object',
    properties: {
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_classic_of_process',
  description: 'Get Is the process running in the Classic environment?',
  inputSchema: {
    type: 'object',
    properties: {
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_creator_type_of_process',
  description: 'Get the OSType of the creator of the process (the signature)',
  inputSchema: {
    type: 'object',
    properties: {
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_displayed_name_of_process',
  description: 'Get the name of the file from which the process was launched, as displayed in the User Interface',
  inputSchema: {
    type: 'object',
    properties: {
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_file_of_process',
  description: 'Get the file from which the process was launched',
  inputSchema: {
    type: 'object',
    properties: {
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_file_type_of_process',
  description: 'Get the OSType of the file type of the process',
  inputSchema: {
    type: 'object',
    properties: {
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_frontmost_of_process',
  description: 'Get Is the process the frontmost process',
  inputSchema: {
    type: 'object',
    properties: {
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_frontmost_of_process',
  description: 'Set Is the process the frontmost process',
  inputSchema: {
    type: 'object',
    properties: {
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for Is the process the frontmost process'
      }
    },
    required: ['target_process_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_has_scripting_terminology_of_process',
  description: 'Get Does the process have a scripting terminology, i.e., can it be scripted?',
  inputSchema: {
    type: 'object',
    properties: {
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_id_of_process',
  description: 'Get The unique identifier of the process',
  inputSchema: {
    type: 'object',
    properties: {
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_name_of_process',
  description: 'Get the name of the process',
  inputSchema: {
    type: 'object',
    properties: {
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_partition_space_used_of_process',
  description: 'Get the number of bytes currently used in the process\' partition',
  inputSchema: {
    type: 'object',
    properties: {
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_short_name_of_process',
  description: 'Get the short name of the file from which the process was launched',
  inputSchema: {
    type: 'object',
    properties: {
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_total_partition_size_of_process',
  description: 'Get the size of the partition with which the process was launched',
  inputSchema: {
    type: 'object',
    properties: {
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_unix_id_of_process',
  description: 'Get The Unix process identifier of a process running in the native environment, or -1 for a process running in the Classic environment',
  inputSchema: {
    type: 'object',
    properties: {
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_visible_of_process',
  description: 'Get Is the process\' layer visible?',
  inputSchema: {
    type: 'object',
    properties: {
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_visible_of_process',
  description: 'Set Is the process\' layer visible?',
  inputSchema: {
    type: 'object',
    properties: {
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for Is the process\' layer visible?'
      }
    },
    required: ['target_process_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_accessibility_description_of_ui_element_of_window_of_process',
  description: 'Get a more complete description of the UI element and its capabilities',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_class_of_ui_element_of_window_of_process',
  description: 'Get the class of the UI Element, which identifies it function',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_description_of_ui_element_of_window_of_process',
  description: 'Get the accessibility description, if available; otherwise, the role description of UI element',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_enabled_of_ui_element_of_window_of_process',
  description: 'Get Is the UI element enabled? ( Does it accept clicks? )',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_entire_contents_of_ui_element_of_window_of_process',
  description: 'Get a list of every UI element contained in this UI element and its child UI elements, to the limits of the tree',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_focused_of_ui_element_of_window_of_process',
  description: 'Get Is the focus on this UI element?',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_focused_of_ui_element_of_window_of_process',
  description: 'Set Is the focus on this UI element?',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for Is the focus on this UI element?'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_help_of_ui_element_of_window_of_process',
  description: 'Get an elaborate description of the UI element and its capabilities',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_maximum_value_of_ui_element_of_window_of_process',
  description: 'Get the maximum value that the UI element can take on',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_minimum_value_of_ui_element_of_window_of_process',
  description: 'Get the minimum value that the UI element can take on',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_name_of_ui_element_of_window_of_process',
  description: 'Get the name of the UI Element, which identifies it within its container',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_orientation_of_ui_element_of_window_of_process',
  description: 'Get the orientation of the UI element',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_position_of_ui_element_of_window_of_process',
  description: 'Get the position of the UI element',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_position_of_ui_element_of_window_of_process',
  description: 'Set the position of the UI element',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      },
      value_required_number: {
        type: 'number',
        description: 'New value for the position of the UI element'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string', 'value_required_number'],
    additionalProperties: false
  }
},
          {
  name: 'get_role_of_ui_element_of_window_of_process',
  description: 'Get an encoded description of the UI element and its capabilities',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_role_description_of_ui_element_of_window_of_process',
  description: 'Get a more complete description of the UI element\'s role',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_selected_of_ui_element_of_window_of_process',
  description: 'Get Is the UI element selected?',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_selected_of_ui_element_of_window_of_process',
  description: 'Set Is the UI element selected?',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for Is the UI element selected?'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_size_of_ui_element_of_window_of_process',
  description: 'Get the size of the UI element',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_size_of_ui_element_of_window_of_process',
  description: 'Set the size of the UI element',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      },
      value_required_number: {
        type: 'number',
        description: 'New value for the size of the UI element'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string', 'value_required_number'],
    additionalProperties: false
  }
},
          {
  name: 'get_subrole_of_ui_element_of_window_of_process',
  description: 'Get an encoded description of the UI element and its capabilities',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_title_of_ui_element_of_window_of_process',
  description: 'Get the title of the UI element as it appears on the screen',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_value_of_ui_element_of_window_of_process',
  description: 'Get the current value of the UI element',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_value_of_ui_element_of_window_of_process',
  description: 'Set the current value of the UI element',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      },
      value_required_specifier: {
        type: 'string',
        description: 'New value for the current value of the UI element'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string', 'value_required_specifier'],
    additionalProperties: false
  }
},
          {
  name: 'get_accessibility_description_of_window_of_process',
  description: 'Get a more complete description of the window and its capabilities',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_class_of_window_of_process',
  description: 'Get the class of the window, which identifies its function',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_description_of_window_of_process',
  description: 'Get the accessibility description, if available; otherwise, the role description of window',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_enabled_of_window_of_process',
  description: 'Get Is the window enabled? ( Does it accept clicks? )',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_entire_contents_of_window_of_process',
  description: 'Get a list of every UI element contained in this window and its child UI elements, to the limits of the tree',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_focused_of_window_of_process',
  description: 'Get Is the focus on this window?',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_focused_of_window_of_process',
  description: 'Set Is the focus on this window?',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for Is the focus on this window?'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_help_of_window_of_process',
  description: 'Get an elaborate description of the window and its capabilities',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_maximum_value_of_window_of_process',
  description: 'Get the maximum value that the UI element can take on of window',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_minimum_value_of_window_of_process',
  description: 'Get the minimum value that the UI element can take on of window',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_orientation_of_window_of_process',
  description: 'Get the orientation of the window',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_position_of_window_of_process',
  description: 'Get the position of the window',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_position_of_window_of_process',
  description: 'Set the position of the window',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      },
      value_required_number: {
        type: 'number',
        description: 'New value for the position of the window'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string', 'value_required_number'],
    additionalProperties: false
  }
},
          {
  name: 'get_role_of_window_of_process',
  description: 'Get an encoded description of the window and its capabilities',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_role_description_of_window_of_process',
  description: 'Get a more complete description of the window\'s role',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_selected_of_window_of_process',
  description: 'Get Is the window selected?',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_selected_of_window_of_process',
  description: 'Set Is the window selected?',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for Is the window selected?'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_size_of_window_of_process',
  description: 'Get the size of the window',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_size_of_window_of_process',
  description: 'Set the size of the window',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      },
      value_required_number: {
        type: 'number',
        description: 'New value for the size of the window'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string', 'value_required_number'],
    additionalProperties: false
  }
},
          {
  name: 'get_subrole_of_window_of_process',
  description: 'Get an encoded description of the window and its capabilities',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_title_of_window_of_process',
  description: 'Get the title of the window as it appears on the screen',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_value_of_window_of_process',
  description: 'Get the current value of the window',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_value_of_window_of_process',
  description: 'Set the current value of the window',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      },
      value_required_specifier: {
        type: 'string',
        description: 'New value for the current value of the window'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string', 'value_required_specifier'],
    additionalProperties: false
  }
},
          {
  name: 'get_kind_of_property_list_item',
  description: 'Get the kind of data stored in the property list item: boolean/data/date/list/number/record/string',
  inputSchema: {
    type: 'object',
    properties: {
      target_property_list_item_required_string: {
        type: 'string',
        description: 'The property list item object to access (e.g., \"front property list item\", \"property list item 1\")'
      }
    },
    required: ['target_property_list_item_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_name_of_property_list_item',
  description: 'Get the name of the property list item ( if any )',
  inputSchema: {
    type: 'object',
    properties: {
      target_property_list_item_required_string: {
        type: 'string',
        description: 'The property list item object to access (e.g., \"front property list item\", \"property list item 1\")'
      }
    },
    required: ['target_property_list_item_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_text_of_property_list_item',
  description: 'Get the text representation of the property list data of property list item',
  inputSchema: {
    type: 'object',
    properties: {
      target_property_list_item_required_string: {
        type: 'string',
        description: 'The property list item object to access (e.g., \"front property list item\", \"property list item 1\")'
      }
    },
    required: ['target_property_list_item_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_text_of_property_list_item',
  description: 'Set the text representation of the property list data of property list item',
  inputSchema: {
    type: 'object',
    properties: {
      target_property_list_item_required_string: {
        type: 'string',
        description: 'The property list item object to access (e.g., \"front property list item\", \"property list item 1\")'
      },
      value_required_text: {
        type: 'string',
        description: 'New value for the text representation of the property list data'
      }
    },
    required: ['target_property_list_item_required_string', 'value_required_text'],
    additionalProperties: false
  }
},
          {
  name: 'get_value_of_property_list_item',
  description: 'Get the value of the property list item',
  inputSchema: {
    type: 'object',
    properties: {
      target_property_list_item_required_string: {
        type: 'string',
        description: 'The property list item object to access (e.g., \"front property list item\", \"property list item 1\")'
      }
    },
    required: ['target_property_list_item_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_value_of_property_list_item',
  description: 'Set the value of the property list item',
  inputSchema: {
    type: 'object',
    properties: {
      target_property_list_item_required_string: {
        type: 'string',
        description: 'The property list item object to access (e.g., \"front property list item\", \"property list item 1\")'
      },
      value_required_any: {
        type: 'string',
        description: 'New value for the value of the property list item'
      }
    },
    required: ['target_property_list_item_required_string', 'value_required_any'],
    additionalProperties: false
  }
},
          {
  name: 'get_name_of_xml_attribute_of_xml_element_of_xml_data',
  description: 'Get the name of the XML attribute',
  inputSchema: {
    type: 'object',
    properties: {
      target_xml_attribute_required_string: {
        type: 'string',
        description: 'The XML attribute object to access (e.g., \"front XML attribute\", \"XML attribute 1\")'
      },
      target_xml_element_required_string: {
        type: 'string',
        description: 'The XML element object to access (e.g., \"front XML element\", \"XML element 1\")'
      },
      target_xml_data_required_string: {
        type: 'string',
        description: 'The XML data object to access (e.g., \"front XML data\", \"XML data 1\")'
      }
    },
    required: ['target_xml_attribute_required_string', 'target_xml_element_required_string', 'target_xml_data_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_value_of_xml_attribute_of_xml_element_of_xml_data',
  description: 'Get the value of the XML attribute',
  inputSchema: {
    type: 'object',
    properties: {
      target_xml_attribute_required_string: {
        type: 'string',
        description: 'The XML attribute object to access (e.g., \"front XML attribute\", \"XML attribute 1\")'
      },
      target_xml_element_required_string: {
        type: 'string',
        description: 'The XML element object to access (e.g., \"front XML element\", \"XML element 1\")'
      },
      target_xml_data_required_string: {
        type: 'string',
        description: 'The XML data object to access (e.g., \"front XML data\", \"XML data 1\")'
      }
    },
    required: ['target_xml_attribute_required_string', 'target_xml_element_required_string', 'target_xml_data_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_value_of_xml_attribute_of_xml_element_of_xml_data',
  description: 'Set the value of the XML attribute',
  inputSchema: {
    type: 'object',
    properties: {
      target_xml_attribute_required_string: {
        type: 'string',
        description: 'The XML attribute object to access (e.g., \"front XML attribute\", \"XML attribute 1\")'
      },
      target_xml_element_required_string: {
        type: 'string',
        description: 'The XML element object to access (e.g., \"front XML element\", \"XML element 1\")'
      },
      target_xml_data_required_string: {
        type: 'string',
        description: 'The XML data object to access (e.g., \"front XML data\", \"XML data 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for the value of the XML attribute'
      }
    },
    required: ['target_xml_attribute_required_string', 'target_xml_element_required_string', 'target_xml_data_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_id_of_xml_data',
  description: 'Get the unique identifier of the XML data',
  inputSchema: {
    type: 'object',
    properties: {
      target_xml_data_required_string: {
        type: 'string',
        description: 'The XML data object to access (e.g., \"front XML data\", \"XML data 1\")'
      }
    },
    required: ['target_xml_data_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_name_of_xml_data',
  description: 'Get the name of the XML data',
  inputSchema: {
    type: 'object',
    properties: {
      target_xml_data_required_string: {
        type: 'string',
        description: 'The XML data object to access (e.g., \"front XML data\", \"XML data 1\")'
      }
    },
    required: ['target_xml_data_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_name_of_xml_data',
  description: 'Set the name of the XML data',
  inputSchema: {
    type: 'object',
    properties: {
      target_xml_data_required_string: {
        type: 'string',
        description: 'The XML data object to access (e.g., \"front XML data\", \"XML data 1\")'
      },
      value_required_text: {
        type: 'string',
        description: 'New value for the name of the XML data'
      }
    },
    required: ['target_xml_data_required_string', 'value_required_text'],
    additionalProperties: false
  }
},
          {
  name: 'get_text_of_xml_data',
  description: 'Get the text representation of the XML data',
  inputSchema: {
    type: 'object',
    properties: {
      target_xml_data_required_string: {
        type: 'string',
        description: 'The XML data object to access (e.g., \"front XML data\", \"XML data 1\")'
      }
    },
    required: ['target_xml_data_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_text_of_xml_data',
  description: 'Set the text representation of the XML data',
  inputSchema: {
    type: 'object',
    properties: {
      target_xml_data_required_string: {
        type: 'string',
        description: 'The XML data object to access (e.g., \"front XML data\", \"XML data 1\")'
      },
      value_required_text: {
        type: 'string',
        description: 'New value for the text representation of the XML data'
      }
    },
    required: ['target_xml_data_required_string', 'value_required_text'],
    additionalProperties: false
  }
},
          {
  name: 'get_id_of_xml_element_of_xml_data',
  description: 'Get the unique identifier of the XML element',
  inputSchema: {
    type: 'object',
    properties: {
      target_xml_element_required_string: {
        type: 'string',
        description: 'The XML element object to access (e.g., \"front XML element\", \"XML element 1\")'
      },
      target_xml_data_required_string: {
        type: 'string',
        description: 'The XML data object to access (e.g., \"front XML data\", \"XML data 1\")'
      }
    },
    required: ['target_xml_element_required_string', 'target_xml_data_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_name_of_xml_element_of_xml_data',
  description: 'Get the name of the XML element',
  inputSchema: {
    type: 'object',
    properties: {
      target_xml_element_required_string: {
        type: 'string',
        description: 'The XML element object to access (e.g., \"front XML element\", \"XML element 1\")'
      },
      target_xml_data_required_string: {
        type: 'string',
        description: 'The XML data object to access (e.g., \"front XML data\", \"XML data 1\")'
      }
    },
    required: ['target_xml_element_required_string', 'target_xml_data_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_value_of_xml_element_of_xml_data',
  description: 'Get the value of the XML element',
  inputSchema: {
    type: 'object',
    properties: {
      target_xml_element_required_string: {
        type: 'string',
        description: 'The XML element object to access (e.g., \"front XML element\", \"XML element 1\")'
      },
      target_xml_data_required_string: {
        type: 'string',
        description: 'The XML data object to access (e.g., \"front XML data\", \"XML data 1\")'
      }
    },
    required: ['target_xml_element_required_string', 'target_xml_data_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_value_of_xml_element_of_xml_data',
  description: 'Set the value of the XML element',
  inputSchema: {
    type: 'object',
    properties: {
      target_xml_element_required_string: {
        type: 'string',
        description: 'The XML element object to access (e.g., \"front XML element\", \"XML element 1\")'
      },
      target_xml_data_required_string: {
        type: 'string',
        description: 'The XML data object to access (e.g., \"front XML data\", \"XML data 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for the value of the XML element'
      }
    },
    required: ['target_xml_element_required_string', 'target_xml_data_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_copies_of_print_settings',
  description: 'Get the number of copies of a document to be printed of print settings',
  inputSchema: {
    type: 'object',
    properties: {
      target_print_settings_required_string: {
        type: 'string',
        description: 'The print settings object to access (e.g., \"front print settings\", \"print settings 1\")'
      }
    },
    required: ['target_print_settings_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_copies_of_print_settings',
  description: 'Set the number of copies of a document to be printed of print settings',
  inputSchema: {
    type: 'object',
    properties: {
      target_print_settings_required_string: {
        type: 'string',
        description: 'The print settings object to access (e.g., \"front print settings\", \"print settings 1\")'
      },
      value_required_integer: {
        type: 'number',
        description: 'New value for the number of copies of a document to be printed'
      }
    },
    required: ['target_print_settings_required_string', 'value_required_integer'],
    additionalProperties: false
  }
},
          {
  name: 'get_collating_of_print_settings',
  description: 'Get Should printed copies be collated? of print settings',
  inputSchema: {
    type: 'object',
    properties: {
      target_print_settings_required_string: {
        type: 'string',
        description: 'The print settings object to access (e.g., \"front print settings\", \"print settings 1\")'
      }
    },
    required: ['target_print_settings_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_collating_of_print_settings',
  description: 'Set Should printed copies be collated? of print settings',
  inputSchema: {
    type: 'object',
    properties: {
      target_print_settings_required_string: {
        type: 'string',
        description: 'The print settings object to access (e.g., \"front print settings\", \"print settings 1\")'
      },
      value_required_boolean: {
        type: 'boolean',
        description: 'New value for Should printed copies be collated?'
      }
    },
    required: ['target_print_settings_required_string', 'value_required_boolean'],
    additionalProperties: false
  }
},
          {
  name: 'get_starting_page_of_print_settings',
  description: 'Get the first page of the document to be printed of print settings',
  inputSchema: {
    type: 'object',
    properties: {
      target_print_settings_required_string: {
        type: 'string',
        description: 'The print settings object to access (e.g., \"front print settings\", \"print settings 1\")'
      }
    },
    required: ['target_print_settings_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_starting_page_of_print_settings',
  description: 'Set the first page of the document to be printed of print settings',
  inputSchema: {
    type: 'object',
    properties: {
      target_print_settings_required_string: {
        type: 'string',
        description: 'The print settings object to access (e.g., \"front print settings\", \"print settings 1\")'
      },
      value_required_integer: {
        type: 'number',
        description: 'New value for the first page of the document to be printed'
      }
    },
    required: ['target_print_settings_required_string', 'value_required_integer'],
    additionalProperties: false
  }
},
          {
  name: 'get_ending_page_of_print_settings',
  description: 'Get the last page of the document to be printed of print settings',
  inputSchema: {
    type: 'object',
    properties: {
      target_print_settings_required_string: {
        type: 'string',
        description: 'The print settings object to access (e.g., \"front print settings\", \"print settings 1\")'
      }
    },
    required: ['target_print_settings_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_ending_page_of_print_settings',
  description: 'Set the last page of the document to be printed of print settings',
  inputSchema: {
    type: 'object',
    properties: {
      target_print_settings_required_string: {
        type: 'string',
        description: 'The print settings object to access (e.g., \"front print settings\", \"print settings 1\")'
      },
      value_required_integer: {
        type: 'number',
        description: 'New value for the last page of the document to be printed'
      }
    },
    required: ['target_print_settings_required_string', 'value_required_integer'],
    additionalProperties: false
  }
},
          {
  name: 'get_pages_across_of_print_settings',
  description: 'Get number of logical pages laid across a physical page of print settings',
  inputSchema: {
    type: 'object',
    properties: {
      target_print_settings_required_string: {
        type: 'string',
        description: 'The print settings object to access (e.g., \"front print settings\", \"print settings 1\")'
      }
    },
    required: ['target_print_settings_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_pages_across_of_print_settings',
  description: 'Set number of logical pages laid across a physical page of print settings',
  inputSchema: {
    type: 'object',
    properties: {
      target_print_settings_required_string: {
        type: 'string',
        description: 'The print settings object to access (e.g., \"front print settings\", \"print settings 1\")'
      },
      value_required_integer: {
        type: 'number',
        description: 'New value for number of logical pages laid across a physical page'
      }
    },
    required: ['target_print_settings_required_string', 'value_required_integer'],
    additionalProperties: false
  }
},
          {
  name: 'get_pages_down_of_print_settings',
  description: 'Get number of logical pages laid out down a physical page of print settings',
  inputSchema: {
    type: 'object',
    properties: {
      target_print_settings_required_string: {
        type: 'string',
        description: 'The print settings object to access (e.g., \"front print settings\", \"print settings 1\")'
      }
    },
    required: ['target_print_settings_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_pages_down_of_print_settings',
  description: 'Set number of logical pages laid out down a physical page of print settings',
  inputSchema: {
    type: 'object',
    properties: {
      target_print_settings_required_string: {
        type: 'string',
        description: 'The print settings object to access (e.g., \"front print settings\", \"print settings 1\")'
      },
      value_required_integer: {
        type: 'number',
        description: 'New value for number of logical pages laid out down a physical page'
      }
    },
    required: ['target_print_settings_required_string', 'value_required_integer'],
    additionalProperties: false
  }
},
          {
  name: 'get_requested_print_time_of_print_settings',
  description: 'Get the time at which the desktop printer should print the document of print settings',
  inputSchema: {
    type: 'object',
    properties: {
      target_print_settings_required_string: {
        type: 'string',
        description: 'The print settings object to access (e.g., \"front print settings\", \"print settings 1\")'
      }
    },
    required: ['target_print_settings_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_requested_print_time_of_print_settings',
  description: 'Set the time at which the desktop printer should print the document of print settings',
  inputSchema: {
    type: 'object',
    properties: {
      target_print_settings_required_string: {
        type: 'string',
        description: 'The print settings object to access (e.g., \"front print settings\", \"print settings 1\")'
      },
      value_required_date: {
        type: 'string',
        description: 'New value for the time at which the desktop printer should print the document'
      }
    },
    required: ['target_print_settings_required_string', 'value_required_date'],
    additionalProperties: false
  }
},
          {
  name: 'get_error_handling_of_print_settings',
  description: 'Get how errors are handled of print settings',
  inputSchema: {
    type: 'object',
    properties: {
      target_print_settings_required_string: {
        type: 'string',
        description: 'The print settings object to access (e.g., \"front print settings\", \"print settings 1\")'
      }
    },
    required: ['target_print_settings_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_error_handling_of_print_settings',
  description: 'Set how errors are handled of print settings',
  inputSchema: {
    type: 'object',
    properties: {
      target_print_settings_required_string: {
        type: 'string',
        description: 'The print settings object to access (e.g., \"front print settings\", \"print settings 1\")'
      },
      value_required_enum: {
        type: 'string',
        description: 'New value for how errors are handled'
      }
    },
    required: ['target_print_settings_required_string', 'value_required_enum'],
    additionalProperties: false
  }
},
          {
  name: 'get_fax_number_of_print_settings',
  description: 'Get for fax number of print settings',
  inputSchema: {
    type: 'object',
    properties: {
      target_print_settings_required_string: {
        type: 'string',
        description: 'The print settings object to access (e.g., \"front print settings\", \"print settings 1\")'
      }
    },
    required: ['target_print_settings_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_fax_number_of_print_settings',
  description: 'Set for fax number of print settings',
  inputSchema: {
    type: 'object',
    properties: {
      target_print_settings_required_string: {
        type: 'string',
        description: 'The print settings object to access (e.g., \"front print settings\", \"print settings 1\")'
      },
      value_required_text: {
        type: 'string',
        description: 'New value for for fax number'
      }
    },
    required: ['target_print_settings_required_string', 'value_required_text'],
    additionalProperties: false
  }
},
          {
  name: 'get_target_printer_of_print_settings',
  description: 'Get for target printer of print settings',
  inputSchema: {
    type: 'object',
    properties: {
      target_print_settings_required_string: {
        type: 'string',
        description: 'The print settings object to access (e.g., \"front print settings\", \"print settings 1\")'
      }
    },
    required: ['target_print_settings_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'set_target_printer_of_print_settings',
  description: 'Set for target printer of print settings',
  inputSchema: {
    type: 'object',
    properties: {
      target_print_settings_required_string: {
        type: 'string',
        description: 'The print settings object to access (e.g., \"front print settings\", \"print settings 1\")'
      },
      value_required_text: {
        type: 'string',
        description: 'New value for for target printer'
      }
    },
    required: ['target_print_settings_required_string', 'value_required_text'],
    additionalProperties: false
  }
},
          {
  name: 'attach_action_to',
  description: 'Attach an action to a folder',
  inputSchema: {
    type: 'object',
    properties: {
      direct_parameter_required_specifier: {
        type: 'string',
        description: 'the object for the command'
      },
      using_required_text: {
        type: 'string',
        description: 'a file containing the script to attach'
      }
    },
    required: ['direct_parameter_required_specifier', 'using_required_text'],
    additionalProperties: false
  }
},
          {
  name: 'attached_scripts',
  description: 'List the actions attached to a folder',
  inputSchema: {
    type: 'object',
    properties: {
      direct_parameter_required_specifier: {
        type: 'string',
        description: 'the object for the command'
      }
    },
    required: ['direct_parameter_required_specifier'],
    additionalProperties: false
  }
},
          {
  name: 'cancel_for_window_of_process',
  description: 'cause the target process to behave as if the window of process were cancelled',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'cancel_for_ui_element_of_window_of_process',
  description: 'cause the target process to behave as if the UI element were cancelled',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'confirm_for_window_of_process',
  description: 'cause the target process to behave as if the window of process were confirmed',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'confirm_for_ui_element_of_window_of_process',
  description: 'cause the target process to behave as if the UI element were confirmed',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'decrement_for_window_of_process',
  description: 'cause the target process to behave as if the window of process were decremented',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'decrement_for_ui_element_of_window_of_process',
  description: 'cause the target process to behave as if the UI element were decremented',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'do_folder_action',
  description: 'Send a folder action code to a folder action script',
  inputSchema: {
    type: 'object',
    properties: {
      direct_parameter_required_specifier: {
        type: 'string',
        description: 'the object for the command'
      },
      folder_action_code_required_actn: {
        type: 'string',
        description: 'the folder action message to process'
      },
      with_item_list_optional_any: {
        type: 'string',
        description: 'a list of items for the folder action message to process'
      },
      with_window_size_optional_rectangle: {
        type: 'string',
        description: 'the new window size for the folder action message to process'
      }
    },
    required: ['direct_parameter_required_specifier', 'folder_action_code_required_actn'],
    additionalProperties: false
  }
},
          {
  name: 'edit_action_of',
  description: 'Edit an action of a folder',
  inputSchema: {
    type: 'object',
    properties: {
      direct_parameter_required_specifier: {
        type: 'string',
        description: 'the object for the command'
      },
      using_action_name_optional_text: {
        type: 'string',
        description: '...or the name of the action to edit'
      },
      using_action_number_optional_integer: {
        type: 'number',
        description: 'the index number of the action to edit...'
      }
    },
    required: ['direct_parameter_required_specifier'],
    additionalProperties: false
  }
},
          {
  name: 'increment_for_window_of_process',
  description: 'cause the target process to behave as if the window of process were incremented',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'increment_for_ui_element_of_window_of_process',
  description: 'cause the target process to behave as if the UI element were incremented',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'key_down',
  description: 'cause the target process to behave as if keys were held down',
  inputSchema: {
    type: 'object',
    properties: {
      direct_parameter_required_text: {
        type: 'string',
        description: 'a keystroke, key code, or (list of) modifier key names.'
      }
    },
    required: ['direct_parameter_required_text'],
    additionalProperties: false
  }
},
          {
  name: 'key_up',
  description: 'cause the target process to behave as if keys were released',
  inputSchema: {
    type: 'object',
    properties: {
      direct_parameter_required_text: {
        type: 'string',
        description: 'a keystroke, key code, or (list of) modifier key names.'
      }
    },
    required: ['direct_parameter_required_text'],
    additionalProperties: false
  }
},
          {
  name: 'pick_for_window_of_process',
  description: 'cause the target process to behave as if the window of process were picked',
  inputSchema: {
    type: 'object',
    properties: {
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'pick_for_ui_element_of_window_of_process',
  description: 'cause the target process to behave as if the UI element were picked',
  inputSchema: {
    type: 'object',
    properties: {
      target_ui_element_required_string: {
        type: 'string',
        description: 'The UI element object to access (e.g., \"front UI element\", \"UI element 1\")'
      },
      target_window_required_string: {
        type: 'string',
        description: 'The window object to access (e.g., \"front window\", \"window 1\")'
      },
      target_process_required_string: {
        type: 'string',
        description: 'The process object to access (e.g., \"front process\", \"process 1\")'
      }
    },
    required: ['target_ui_element_required_string', 'target_window_required_string', 'target_process_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'remove_action_from',
  description: 'Remove a folder action from a folder',
  inputSchema: {
    type: 'object',
    properties: {
      direct_parameter_required_specifier: {
        type: 'string',
        description: 'the object for the command'
      },
      using_action_name_optional_text: {
        type: 'string',
        description: '...or the name of the action to remove'
      },
      using_action_number_optional_integer: {
        type: 'number',
        description: 'the index number of the action to remove...'
      }
    },
    required: ['direct_parameter_required_specifier'],
    additionalProperties: false
  }
},
          {
  name: 'get_scripting_definition_of_application',
  description: 'Get The scripting definition of the System Events application',
  inputSchema: {
    type: 'object',
    properties: {},
    additionalProperties: false
  }
},
          {
  name: 'get_name_of_scripting_class_of_scripting_suite_of_scripting',
  description: 'Get The name of the class of scripting class',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_class_required_string: {
        type: 'string',
        description: 'The scripting class object to access (e.g., \"front scripting class\", \"scripting class 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_class_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_id_of_scripting_class_of_scripting_suite_of_scripting',
  description: 'Get The unique identifier of the class of scripting class',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_class_required_string: {
        type: 'string',
        description: 'The scripting class object to access (e.g., \"front scripting class\", \"scripting class 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_class_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_description_of_scripting_class_of_scripting_suite_of',
  description: 'Get The description of the class of scripting class',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_class_required_string: {
        type: 'string',
        description: 'The scripting class object to access (e.g., \"front scripting class\", \"scripting class 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_class_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_hidden_of_scripting_class_of_scripting_suite_of_scripting',
  description: 'Get Is the class hidden? of scripting class',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_class_required_string: {
        type: 'string',
        description: 'The scripting class object to access (e.g., \"front scripting class\", \"scripting class 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_class_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_plural_name_of_scripting_class_of_scripting_suite_of',
  description: 'Get The plural name of the class of scripting class',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_class_required_string: {
        type: 'string',
        description: 'The scripting class object to access (e.g., \"front scripting class\", \"scripting class 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_class_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_suite_name_of_scripting_class_of_scripting_suite_of',
  description: 'Get The name of the suite to which this class belongs of scripting class',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_class_required_string: {
        type: 'string',
        description: 'The scripting class object to access (e.g., \"front scripting class\", \"scripting class 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_class_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_superclass_of_scripting_class_of_scripting_suite_of',
  description: 'Get The class from which this class inherits of scripting class',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_class_required_string: {
        type: 'string',
        description: 'The scripting class object to access (e.g., \"front scripting class\", \"scripting class 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_class_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_name_of_scripting_command_of_scripting_suite_of_scripting',
  description: 'Get The name of the command of scripting command',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_command_required_string: {
        type: 'string',
        description: 'The scripting command object to access (e.g., \"front scripting command\", \"scripting command 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_command_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_id_of_scripting_command_of_scripting_suite_of_scripting',
  description: 'Get The unique identifier of the command of scripting command',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_command_required_string: {
        type: 'string',
        description: 'The scripting command object to access (e.g., \"front scripting command\", \"scripting command 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_command_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_description_of_scripting_command_of_scripting_suite_of',
  description: 'Get The description of the command of scripting command',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_command_required_string: {
        type: 'string',
        description: 'The scripting command object to access (e.g., \"front scripting command\", \"scripting command 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_command_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_direct_parameter_of_scripting_command_of_scripting_suite_of',
  description: 'Get The direct parameter of the command of scripting command',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_command_required_string: {
        type: 'string',
        description: 'The scripting command object to access (e.g., \"front scripting command\", \"scripting command 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_command_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_hidden_of_scripting_command_of_scripting_suite_of_scripting',
  description: 'Get Is the command hidden? of scripting command',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_command_required_string: {
        type: 'string',
        description: 'The scripting command object to access (e.g., \"front scripting command\", \"scripting command 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_command_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_scripting_result_of_scripting_command_of_scripting_suite_of',
  description: 'Get The object or data returned by this command of scripting command',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_command_required_string: {
        type: 'string',
        description: 'The scripting command object to access (e.g., \"front scripting command\", \"scripting command 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_command_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_suite_name_of_scripting_command_of_scripting_suite_of',
  description: 'Get The name of the suite to which this command belongs of scripting command',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_command_required_string: {
        type: 'string',
        description: 'The scripting command object to access (e.g., \"front scripting command\", \"scripting command 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_command_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_name_of_scripting_enumeration_of_scripting_suite_of',
  description: 'Get The name of the enumeration of scripting enumeration',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_enumeration_required_string: {
        type: 'string',
        description: 'The scripting enumeration object to access (e.g., \"front scripting enumeration\", \"scripting enumeration 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_enumeration_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_id_of_scripting_enumeration_of_scripting_suite_of_scripting',
  description: 'Get The unique identifier of the enumeration of scripting enumeration',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_enumeration_required_string: {
        type: 'string',
        description: 'The scripting enumeration object to access (e.g., \"front scripting enumeration\", \"scripting enumeration 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_enumeration_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_hidden_of_scripting_enumeration_of_scripting_suite_of',
  description: 'Get Is the enumeration hidden? of scripting enumeration',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_enumeration_required_string: {
        type: 'string',
        description: 'The scripting enumeration object to access (e.g., \"front scripting enumeration\", \"scripting enumeration 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_enumeration_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_name_of_scripting_enumerator_of_scripting_enumeration_of',
  description: 'Get The name of the enumerator of scripting enumerator',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_enumerator_required_string: {
        type: 'string',
        description: 'The scripting enumerator object to access (e.g., \"front scripting enumerator\", \"scripting enumerator 1\")'
      },
      target_scripting_enumeration_required_string: {
        type: 'string',
        description: 'The scripting enumeration object to access (e.g., \"front scripting enumeration\", \"scripting enumeration 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_enumerator_required_string', 'target_scripting_enumeration_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_id_of_scripting_enumerator_of_scripting_enumeration_of',
  description: 'Get The unique identifier of the enumerator of scripting enumerator',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_enumerator_required_string: {
        type: 'string',
        description: 'The scripting enumerator object to access (e.g., \"front scripting enumerator\", \"scripting enumerator 1\")'
      },
      target_scripting_enumeration_required_string: {
        type: 'string',
        description: 'The scripting enumeration object to access (e.g., \"front scripting enumeration\", \"scripting enumeration 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_enumerator_required_string', 'target_scripting_enumeration_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_description_of_scripting_enumerator_of_scripting',
  description: 'Get The description of the enumerator of scripting enumerator',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_enumerator_required_string: {
        type: 'string',
        description: 'The scripting enumerator object to access (e.g., \"front scripting enumerator\", \"scripting enumerator 1\")'
      },
      target_scripting_enumeration_required_string: {
        type: 'string',
        description: 'The scripting enumeration object to access (e.g., \"front scripting enumeration\", \"scripting enumeration 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_enumerator_required_string', 'target_scripting_enumeration_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_hidden_of_scripting_enumerator_of_scripting_enumeration_of',
  description: 'Get Is the enumerator hidden? of scripting enumerator',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_enumerator_required_string: {
        type: 'string',
        description: 'The scripting enumerator object to access (e.g., \"front scripting enumerator\", \"scripting enumerator 1\")'
      },
      target_scripting_enumeration_required_string: {
        type: 'string',
        description: 'The scripting enumeration object to access (e.g., \"front scripting enumeration\", \"scripting enumeration 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_enumerator_required_string', 'target_scripting_enumeration_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_name_of_scripting_parameter_of_scripting_command_of',
  description: 'Get The name of the parameter of scripting parameter',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_parameter_required_string: {
        type: 'string',
        description: 'The scripting parameter object to access (e.g., \"front scripting parameter\", \"scripting parameter 1\")'
      },
      target_scripting_command_required_string: {
        type: 'string',
        description: 'The scripting command object to access (e.g., \"front scripting command\", \"scripting command 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_parameter_required_string', 'target_scripting_command_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_id_of_scripting_parameter_of_scripting_command_of_scripting',
  description: 'Get The unique identifier of the parameter of scripting parameter',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_parameter_required_string: {
        type: 'string',
        description: 'The scripting parameter object to access (e.g., \"front scripting parameter\", \"scripting parameter 1\")'
      },
      target_scripting_command_required_string: {
        type: 'string',
        description: 'The scripting command object to access (e.g., \"front scripting command\", \"scripting command 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_parameter_required_string', 'target_scripting_command_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_description_of_scripting_parameter_of_scripting_command_of',
  description: 'Get The description of the parameter of scripting parameter',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_parameter_required_string: {
        type: 'string',
        description: 'The scripting parameter object to access (e.g., \"front scripting parameter\", \"scripting parameter 1\")'
      },
      target_scripting_command_required_string: {
        type: 'string',
        description: 'The scripting command object to access (e.g., \"front scripting command\", \"scripting command 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_parameter_required_string', 'target_scripting_command_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_hidden_of_scripting_parameter_of_scripting_command_of',
  description: 'Get Is the parameter hidden? of scripting parameter',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_parameter_required_string: {
        type: 'string',
        description: 'The scripting parameter object to access (e.g., \"front scripting parameter\", \"scripting parameter 1\")'
      },
      target_scripting_command_required_string: {
        type: 'string',
        description: 'The scripting command object to access (e.g., \"front scripting command\", \"scripting command 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_parameter_required_string', 'target_scripting_command_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_kind_of_scripting_parameter_of_scripting_command_of',
  description: 'Get The kind of object or data specified by this parameter of scripting parameter',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_parameter_required_string: {
        type: 'string',
        description: 'The scripting parameter object to access (e.g., \"front scripting parameter\", \"scripting parameter 1\")'
      },
      target_scripting_command_required_string: {
        type: 'string',
        description: 'The scripting command object to access (e.g., \"front scripting command\", \"scripting command 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_parameter_required_string', 'target_scripting_command_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_optional_of_scripting_parameter_of_scripting_command_of',
  description: 'Get Is the parameter optional? of scripting parameter',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_parameter_required_string: {
        type: 'string',
        description: 'The scripting parameter object to access (e.g., \"front scripting parameter\", \"scripting parameter 1\")'
      },
      target_scripting_command_required_string: {
        type: 'string',
        description: 'The scripting command object to access (e.g., \"front scripting command\", \"scripting command 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_parameter_required_string', 'target_scripting_command_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_name_of_scripting_property_of_scripting_class_of_scripting',
  description: 'Get The name of the property of scripting property',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_property_required_string: {
        type: 'string',
        description: 'The scripting property object to access (e.g., \"front scripting property\", \"scripting property 1\")'
      },
      target_scripting_class_required_string: {
        type: 'string',
        description: 'The scripting class object to access (e.g., \"front scripting class\", \"scripting class 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_property_required_string', 'target_scripting_class_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_id_of_scripting_property_of_scripting_class_of_scripting',
  description: 'Get The unique identifier of the property of scripting property',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_property_required_string: {
        type: 'string',
        description: 'The scripting property object to access (e.g., \"front scripting property\", \"scripting property 1\")'
      },
      target_scripting_class_required_string: {
        type: 'string',
        description: 'The scripting class object to access (e.g., \"front scripting class\", \"scripting class 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_property_required_string', 'target_scripting_class_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_access_of_scripting_property_of_scripting_class_of',
  description: 'Get The type of access to this property of scripting property',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_property_required_string: {
        type: 'string',
        description: 'The scripting property object to access (e.g., \"front scripting property\", \"scripting property 1\")'
      },
      target_scripting_class_required_string: {
        type: 'string',
        description: 'The scripting class object to access (e.g., \"front scripting class\", \"scripting class 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_property_required_string', 'target_scripting_class_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_description_of_scripting_property_of_scripting_class_of',
  description: 'Get The description of the property of scripting property',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_property_required_string: {
        type: 'string',
        description: 'The scripting property object to access (e.g., \"front scripting property\", \"scripting property 1\")'
      },
      target_scripting_class_required_string: {
        type: 'string',
        description: 'The scripting class object to access (e.g., \"front scripting class\", \"scripting class 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_property_required_string', 'target_scripting_class_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_enumerated_of_scripting_property_of_scripting_class_of',
  description: 'Get Is the property\'s value an enumerator? of scripting property',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_property_required_string: {
        type: 'string',
        description: 'The scripting property object to access (e.g., \"front scripting property\", \"scripting property 1\")'
      },
      target_scripting_class_required_string: {
        type: 'string',
        description: 'The scripting class object to access (e.g., \"front scripting class\", \"scripting class 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_property_required_string', 'target_scripting_class_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_hidden_of_scripting_property_of_scripting_class_of',
  description: 'Get Is the property hidden? of scripting property',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_property_required_string: {
        type: 'string',
        description: 'The scripting property object to access (e.g., \"front scripting property\", \"scripting property 1\")'
      },
      target_scripting_class_required_string: {
        type: 'string',
        description: 'The scripting class object to access (e.g., \"front scripting class\", \"scripting class 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_property_required_string', 'target_scripting_class_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_kind_of_scripting_property_of_scripting_class_of_scripting',
  description: 'Get The kind of object or data returned by this property of scripting property',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_property_required_string: {
        type: 'string',
        description: 'The scripting property object to access (e.g., \"front scripting property\", \"scripting property 1\")'
      },
      target_scripting_class_required_string: {
        type: 'string',
        description: 'The scripting class object to access (e.g., \"front scripting class\", \"scripting class 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_property_required_string', 'target_scripting_class_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_listed_of_scripting_property_of_scripting_class_of',
  description: 'Get Is the property\'s value a list? of scripting property',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_property_required_string: {
        type: 'string',
        description: 'The scripting property object to access (e.g., \"front scripting property\", \"scripting property 1\")'
      },
      target_scripting_class_required_string: {
        type: 'string',
        description: 'The scripting class object to access (e.g., \"front scripting class\", \"scripting class 1\")'
      },
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_property_required_string', 'target_scripting_class_required_string', 'target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_description_of_scripting_result_object',
  description: 'Get The description of the property of scripting result object',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_result_object_required_string: {
        type: 'string',
        description: 'The scripting result object object to access (e.g., \"front scripting result object\", \"scripting result object 1\")'
      }
    },
    required: ['target_scripting_result_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_enumerated_of_scripting_result_object',
  description: 'Get Is the scripting result\'s value an enumerator? of scripting result object',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_result_object_required_string: {
        type: 'string',
        description: 'The scripting result object object to access (e.g., \"front scripting result object\", \"scripting result object 1\")'
      }
    },
    required: ['target_scripting_result_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_kind_of_scripting_result_object',
  description: 'Get The kind of object or data returned by this property of scripting result object',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_result_object_required_string: {
        type: 'string',
        description: 'The scripting result object object to access (e.g., \"front scripting result object\", \"scripting result object 1\")'
      }
    },
    required: ['target_scripting_result_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_listed_of_scripting_result_object',
  description: 'Get Is the scripting result\'s value a list? of scripting result object',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_result_object_required_string: {
        type: 'string',
        description: 'The scripting result object object to access (e.g., \"front scripting result object\", \"scripting result object 1\")'
      }
    },
    required: ['target_scripting_result_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_name_of_scripting_suite_of_scripting_definition_object',
  description: 'Get The name of the suite of scripting suite',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_id_of_scripting_suite_of_scripting_definition_object',
  description: 'Get The unique identifier of the suite of scripting suite',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_description_of_scripting_suite_of_scripting_definition',
  description: 'Get The description of the suite of scripting suite',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
          {
  name: 'get_hidden_of_scripting_suite_of_scripting_definition_object',
  description: 'Get Is the suite hidden? of scripting suite',
  inputSchema: {
    type: 'object',
    properties: {
      target_scripting_suite_required_string: {
        type: 'string',
        description: 'The scripting suite object to access (e.g., \"front scripting suite\", \"scripting suite 1\")'
      },
      target_scripting_definition_object_required_string: {
        type: 'string',
        description: 'The scripting definition object object to access (e.g., \"front scripting definition object\", \"scripting definition object 1\")'
      }
    },
    required: ['target_scripting_suite_required_string', 'target_scripting_definition_object_required_string'],
    additionalProperties: false
  }
},
        ]
      }
    };
    this.sendResponse(response);
  }

  async handleToolsCall(request) {
    console.error("Handling tools/call request for:", request.params.name);
    
    try {
      // Check app availability for all functions
      {
        const isSystemEventsAvailable = await checkSystemEventsAvailable();
        if (!isSystemEventsAvailable) {
          const errorResponse = {
            jsonrpc: '2.0',
            id: request.id,
            result: {
              content: [{
                type: 'text',
                text: JSON.stringify({
                  success: false,
                  error: 'Application is not available or not running'
                }, null, 2)
              }]
            }
          };
          this.sendResponse(errorResponse);
          return;
        }
      }

      const { name, arguments: args } = request.params;
      let result;

      switch (name) {
        case 'open_file':
  result = await this.openFile(args.direct_parameter_required_file);
  break;
        case 'open_file':
  result = await this.openFile(args.direct_parameter_required_list_of_file);
  break;
        case 'close_for_window_of_process':
  result = await this.closeForWindowOfProcess(args.target_window_required_string, args.target_process_required_string, args.saving_optional_save_options, args.saving_in_optional_file);
  break;
        case 'close_for_document':
  result = await this.closeForDocument(args.target_document_required_string, args.saving_optional_save_options, args.saving_in_optional_file);
  break;
        case 'save_for_window_of_process':
  result = await this.saveForWindowOfProcess(args.target_window_required_string, args.target_process_required_string, args.inParam_optional_file, args.as_optional_saveable_file_format);
  break;
        case 'save_for_document':
  result = await this.saveForDocument(args.target_document_required_string, args.inParam_optional_file, args.as_optional_saveable_file_format);
  break;
        case 'print_file':
  result = await this.printFile(args.direct_parameter_required_list_of_file, args.with_properties_optional_print_settings, args.print_dialog_optional_boolean);
  break;
        case 'print_for_window_of_process':
  result = await this.printForWindowOfProcess(args.target_window_required_string, args.target_process_required_string, args.with_properties_optional_print_settings, args.print_dialog_optional_boolean);
  break;
        case 'print_for_document':
  result = await this.printForDocument(args.target_document_required_string, args.with_properties_optional_print_settings, args.print_dialog_optional_boolean);
  break;
        case 'quit':
  result = await this.quit(args.saving_optional_save_options);
  break;
        case 'count_security_preferences_object':
  result = await this.countSecurityPreferencesObject();
  break;
        case 'count_classic_domain_object':
  result = await this.countClassicDomainObject();
  break;
        case 'count_xml_attribute_of_xml_element':
  result = await this.countXmlAttributeOfXmlElement(args.target_xml_element_required_string);
  break;
        case 'count_browser_of_ui_element':
  result = await this.countBrowserOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_pop_over_of_ui_element':
  result = await this.countPopOverOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_slider_of_ui_element':
  result = await this.countSliderOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_appearance_preferences_object':
  result = await this.countAppearancePreferencesObject();
  break;
        case 'count_busy_indicator_of_ui_element':
  result = await this.countBusyIndicatorOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_dock_preferences_object':
  result = await this.countDockPreferencesObject();
  break;
        case 'count_group_of_ui_element':
  result = await this.countGroupOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_radio_group_of_ui_element':
  result = await this.countRadioGroupOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_scripting_result_object':
  result = await this.countScriptingResultObject();
  break;
        case 'count_cd_and_dvd_preferences_object':
  result = await this.countCdAndDvdPreferencesObject();
  break;
        case 'count_screen_saver_preferences_object':
  result = await this.countScreenSaverPreferencesObject();
  break;
        case 'count_table_of_ui_element':
  result = await this.countTableOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_radio_button_of_radio_group':
  result = await this.countRadioButtonOfRadioGroup(args.target_radio_group_required_string);
  break;
        case 'count_grow_area_of_ui_element':
  result = await this.countGrowAreaOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_scripting_enumeration_of_scripting_suite':
  result = await this.countScriptingEnumerationOfScriptingSuite(args.target_scripting_suite_required_string);
  break;
        case 'count_scroll_bar_of_ui_element':
  result = await this.countScrollBarOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_scripting_property_of_scripting_class':
  result = await this.countScriptingPropertyOfScriptingClass(args.target_scripting_class_required_string);
  break;
        case 'count_attribute_of_ui_element':
  result = await this.countAttributeOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_menu_bar_item_of_menu_bar':
  result = await this.countMenuBarItemOfMenuBar(args.target_menu_bar_required_string);
  break;
        case 'count_list_of_ui_element':
  result = await this.countListOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_disk':
  result = await this.countDisk();
  break;
        case 'count_location_of_network_preferences_object':
  result = await this.countLocationOfNetworkPreferencesObject(args.target_network_preferences_object_required_string);
  break;
        case 'count_alias_of_disk':
  result = await this.countAliasOfDisk(args.target_disk_required_string);
  break;
        case 'count_static_text_of_group':
  result = await this.countStaticTextOfGroup(args.target_group_required_string);
  break;
        case 'count_scripting_definition_object':
  result = await this.countScriptingDefinitionObject();
  break;
        case 'count_service_of_location':
  result = await this.countServiceOfLocation(args.target_location_required_string);
  break;
        case 'count_screen_saver':
  result = await this.countScreenSaver();
  break;
        case 'count_menu_item_of_menu':
  result = await this.countMenuItemOfMenu(args.target_menu_required_string);
  break;
        case 'count_local_domain_object':
  result = await this.countLocalDomainObject();
  break;
        case 'count_text_area_of_ui_element':
  result = await this.countTextAreaOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_value_indicator_of_scroll_bar':
  result = await this.countValueIndicatorOfScrollBar(args.target_scroll_bar_required_string);
  break;
        case 'count_progress_indicator_of_ui_element':
  result = await this.countProgressIndicatorOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_scripting_element_of_scripting_class':
  result = await this.countScriptingElementOfScriptingClass(args.target_scripting_class_required_string);
  break;
        case 'count_drawer_of_ui_element':
  result = await this.countDrawerOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_tab_group_of_ui_element':
  result = await this.countTabGroupOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_system_domain_object':
  result = await this.countSystemDomainObject();
  break;
        case 'count_window_of_process':
  result = await this.countWindowOfProcess(args.target_process_required_string);
  break;
        case 'count_network_preferences_object':
  result = await this.countNetworkPreferencesObject();
  break;
        case 'count_outline_of_ui_element':
  result = await this.countOutlineOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_pop_up_button_of_ui_element':
  result = await this.countPopUpButtonOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_splitter_group_of_ui_element':
  result = await this.countSplitterGroupOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_action_of_ui_element':
  result = await this.countActionOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_disk_item_of_alias':
  result = await this.countDiskItemOfAlias(args.target_alias_required_string);
  break;
        case 'count_file_package_of_alias':
  result = await this.countFilePackageOfAlias(args.target_alias_required_string);
  break;
        case 'count_process':
  result = await this.countProcess();
  break;
        case 'count_scripting_parameter_of_scripting_command':
  result = await this.countScriptingParameterOfScriptingCommand(args.target_scripting_command_required_string);
  break;
        case 'count_insertion_preference':
  result = await this.countInsertionPreference();
  break;
        case 'count_scripting_class_of_scripting_suite':
  result = await this.countScriptingClassOfScriptingSuite(args.target_scripting_suite_required_string);
  break;
        case 'count_configuration_of_service':
  result = await this.countConfigurationOfService(args.target_service_required_string);
  break;
        case 'count_ui_element_of_window':
  result = await this.countUiElementOfWindow(args.target_window_required_string);
  break;
        case 'count_property_list_item':
  result = await this.countPropertyListItem();
  break;
        case 'count_domain':
  result = await this.countDomain();
  break;
        case 'count_menu_bar_of_process':
  result = await this.countMenuBarOfProcess(args.target_process_required_string);
  break;
        case 'count_color_well_of_ui_element':
  result = await this.countColorWellOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_scripting_command_of_scripting_suite':
  result = await this.countScriptingCommandOfScriptingSuite(args.target_scripting_suite_required_string);
  break;
        case 'count_button_of_scroll_bar':
  result = await this.countButtonOfScrollBar(args.target_scroll_bar_required_string);
  break;
        case 'count_application_process':
  result = await this.countApplicationProcess();
  break;
        case 'count_toolbar_of_ui_element':
  result = await this.countToolbarOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_desktop':
  result = await this.countDesktop();
  break;
        case 'count_user_domain_object':
  result = await this.countUserDomainObject();
  break;
        case 'count_image_of_static_text':
  result = await this.countImageOfStaticText(args.target_static_text_required_string);
  break;
        case 'count_login_item':
  result = await this.countLoginItem();
  break;
        case 'count_user':
  result = await this.countUser();
  break;
        case 'count_relevance_indicator_of_ui_element':
  result = await this.countRelevanceIndicatorOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_scripting_suite_of_scripting_definition_object':
  result = await this.countScriptingSuiteOfScriptingDefinitionObject(args.target_scripting_definition_object_required_string);
  break;
        case 'count_xml_element_of_xml_data':
  result = await this.countXmlElementOfXmlData(args.target_xml_data_required_string);
  break;
        case 'count_print_settings':
  result = await this.countPrintSettings();
  break;
        case 'count_xml_file':
  result = await this.countXmlFile();
  break;
        case 'count_menu_of_menu_bar':
  result = await this.countMenuOfMenuBar(args.target_menu_bar_required_string);
  break;
        case 'count_combo_box_of_ui_element':
  result = await this.countComboBoxOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_xml_data':
  result = await this.countXmlData();
  break;
        case 'count_sheet_of_ui_element':
  result = await this.countSheetOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_text_field_of_ui_element':
  result = await this.countTextFieldOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_scripting_enumerator_of_scripting_enumeration':
  result = await this.countScriptingEnumeratorOfScriptingEnumeration(args.target_scripting_enumeration_required_string);
  break;
        case 'count_interface_of_network_preferences_object':
  result = await this.countInterfaceOfNetworkPreferencesObject(args.target_network_preferences_object_required_string);
  break;
        case 'count_row_of_ui_element':
  result = await this.countRowOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_document':
  result = await this.countDocument();
  break;
        case 'count_incrementor_of_ui_element':
  result = await this.countIncrementorOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_file_of_alias':
  result = await this.countFileOfAlias(args.target_alias_required_string);
  break;
        case 'count_folder_of_alias':
  result = await this.countFolderOfAlias(args.target_alias_required_string);
  break;
        case 'count_network_domain_object':
  result = await this.countNetworkDomainObject();
  break;
        case 'count_desk_accessory_process':
  result = await this.countDeskAccessoryProcess();
  break;
        case 'count_scroll_area_of_ui_element':
  result = await this.countScrollAreaOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_column_of_ui_element':
  result = await this.countColumnOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_property_list_file':
  result = await this.countPropertyListFile();
  break;
        case 'count_menu_button_of_ui_element':
  result = await this.countMenuButtonOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_splitter_of_ui_element':
  result = await this.countSplitterOfUiElement(args.target_ui_element_required_string);
  break;
        case 'count_checkbox_of_group':
  result = await this.countCheckboxOfGroup(args.target_group_required_string);
  break;
        case 'delete_for_disk':
  result = await this.deleteForDisk(args.target_disk_required_string);
  break;
        case 'delete_for_alias_of_disk':
  result = await this.deleteForAliasOfDisk(args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'delete_for_file_package_of_alias_of_disk':
  result = await this.deleteForFilePackageOfAliasOfDisk(args.target_file_package_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'delete_for_folder_of_alias_of_disk':
  result = await this.deleteForFolderOfAliasOfDisk(args.target_folder_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'duplicate':
  result = await this.duplicate(args.direct_parameter_required_specifier, args.to_optional_location_specifier, args.with_properties_optional_record);
  break;
        case 'exists':
  result = await this.exists(args.direct_parameter_required_any);
  break;
        case 'make_security_preferences_object':
  result = await this.makeSecurityPreferencesObject(args.at_optional_location_specifier, args.with_data_optional_any, args.with_properties_optional_integer_log_out_when_inactive_interval, args.with_properties_optional_boolean_automatic_login, args.with_properties_optional_boolean_log_out_when_inactive, args.with_properties_optional_boolean_require_password_to_wake, args.with_properties_optional_boolean_require_password_to_unlock, args.with_properties_optional_boolean_secure_virtual_memory);
  break;
        case 'make_classic_domain_object':
  result = await this.makeClassicDomainObject(args.at_optional_location_specifier, args.with_data_optional_any);
  break;
        case 'make_xml_attribute_of_xml_element':
  result = await this.makeXmlAttributeOfXmlElement(args.at_required_location_specifier_xml_element, args.with_data_optional_any, args.with_properties_optional_missing_value_value);
  break;
        case 'make_browser_of_ui_element':
  result = await this.makeBrowserOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_pop_over_of_ui_element':
  result = await this.makePopOverOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_slider_of_ui_element':
  result = await this.makeSliderOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_appearance_preferences_object':
  result = await this.makeAppearancePreferencesObject(args.at_optional_location_specifier, args.with_data_optional_any, args.with_properties_optional_integer_recent_applications_limit, args.with_properties_optional_fontsmoothingstyles_font_smoothing_style, args.with_properties_optional_appearances_appearance, args.with_properties_optional_integer_recent_servers_limit, args.with_properties_optional_scrollpagebehaviors_scroll_bar_action, args.with_properties_optional_boolean_smooth_scrolling, args.with_properties_optional_integer_recent_documents_limit, args.with_properties_optional_boolean_font_smoothing, args.with_properties_optional_missing_value_highlight_color, args.with_properties_optional_boolean_dark_mode);
  break;
        case 'make_busy_indicator_of_ui_element':
  result = await this.makeBusyIndicatorOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_dock_preferences_object':
  result = await this.makeDockPreferencesObject(args.at_optional_location_specifier, args.with_data_optional_any, args.with_properties_optional_boolean_minimize_into_application, args.with_properties_optional_boolean_autohide, args.with_properties_optional_real_magnification_size, args.with_properties_optional_dpbh_double_click_behavior, args.with_properties_optional_boolean_autohide_menu_bar, args.with_properties_optional_dpef_minimize_effect, args.with_properties_optional_boolean_magnification, args.with_properties_optional_dpls_screen_edge, args.with_properties_optional_boolean_show_recents, args.with_properties_optional_boolean_show_indicators, args.with_properties_optional_real_dock_size, args.with_properties_optional_boolean_animate);
  break;
        case 'make_group_of_ui_element':
  result = await this.makeGroupOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_radio_group_of_ui_element':
  result = await this.makeRadioGroupOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_scripting_result_object':
  result = await this.makeScriptingResultObject(args.at_optional_location_specifier, args.with_data_optional_any);
  break;
        case 'make_cd_and_dvd_preferences_object':
  result = await this.makeCdAndDvdPreferencesObject(args.at_optional_location_specifier, args.with_data_optional_any);
  break;
        case 'make_screen_saver_preferences_object':
  result = await this.makeScreenSaverPreferencesObject(args.at_optional_location_specifier, args.with_data_optional_any, args.with_properties_optional_boolean_main_screen_only, args.with_properties_optional_integer_delay_interval, args.with_properties_optional_boolean_show_clock);
  break;
        case 'make_table_of_ui_element':
  result = await this.makeTableOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_radio_button_of_radio_group':
  result = await this.makeRadioButtonOfRadioGroup(args.at_required_location_specifier_radio_group, args.with_data_optional_any);
  break;
        case 'make_grow_area_of_ui_element':
  result = await this.makeGrowAreaOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_scripting_enumeration_of_scripting_suite':
  result = await this.makeScriptingEnumerationOfScriptingSuite(args.at_required_location_specifier_scripting_suite, args.with_data_optional_any);
  break;
        case 'make_scroll_bar_of_ui_element':
  result = await this.makeScrollBarOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_scripting_property_of_scripting_class':
  result = await this.makeScriptingPropertyOfScriptingClass(args.at_required_location_specifier_scripting_class, args.with_data_optional_any);
  break;
        case 'make_attribute_of_ui_element':
  result = await this.makeAttributeOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any, args.with_properties_optional_missing_value_value);
  break;
        case 'make_menu_bar_item_of_menu_bar':
  result = await this.makeMenuBarItemOfMenuBar(args.at_required_location_specifier_menu_bar, args.with_data_optional_any);
  break;
        case 'make_list_of_ui_element':
  result = await this.makeListOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_disk':
  result = await this.makeDisk(args.at_optional_location_specifier, args.with_data_optional_any, args.with_properties_optional_boolean_ignore_privileges);
  break;
        case 'make_location_of_network_preferences_object':
  result = await this.makeLocationOfNetworkPreferencesObject(args.at_required_location_specifier_network_preferences_object, args.with_data_optional_any, args.with_properties_optional_text_name);
  break;
        case 'make_alias_of_disk':
  result = await this.makeAliasOfDisk(args.at_required_location_specifier_disk, args.with_data_optional_any, args.with_properties_optional_missing_value_file_type, args.with_properties_optional_boolean_stationery, args.with_properties_optional_missing_value_default_application, args.with_properties_optional_missing_value_creator_type);
  break;
        case 'make_static_text_of_group':
  result = await this.makeStaticTextOfGroup(args.at_required_location_specifier_group, args.with_data_optional_any);
  break;
        case 'make_scripting_definition_object':
  result = await this.makeScriptingDefinitionObject(args.at_optional_location_specifier, args.with_data_optional_any);
  break;
        case 'make_service_of_location':
  result = await this.makeServiceOfLocation(args.at_required_location_specifier_location, args.with_data_optional_any, args.with_properties_optional_configuration_current_configuration, args.with_properties_optional_text_name);
  break;
        case 'make_screen_saver':
  result = await this.makeScreenSaver(args.at_optional_location_specifier, args.with_data_optional_any, args.with_properties_optional_text_picture_display_style);
  break;
        case 'make_menu_item_of_menu':
  result = await this.makeMenuItemOfMenu(args.at_required_location_specifier_menu, args.with_data_optional_any);
  break;
        case 'make_local_domain_object':
  result = await this.makeLocalDomainObject(args.at_optional_location_specifier, args.with_data_optional_any);
  break;
        case 'make_text_area_of_ui_element':
  result = await this.makeTextAreaOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_value_indicator_of_scroll_bar':
  result = await this.makeValueIndicatorOfScrollBar(args.at_required_location_specifier_scroll_bar, args.with_data_optional_any);
  break;
        case 'make_progress_indicator_of_ui_element':
  result = await this.makeProgressIndicatorOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_scripting_element_of_scripting_class':
  result = await this.makeScriptingElementOfScriptingClass(args.at_required_location_specifier_scripting_class, args.with_data_optional_any);
  break;
        case 'make_drawer_of_ui_element':
  result = await this.makeDrawerOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_tab_group_of_ui_element':
  result = await this.makeTabGroupOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_system_domain_object':
  result = await this.makeSystemDomainObject(args.at_optional_location_specifier, args.with_data_optional_any);
  break;
        case 'make_window_of_process':
  result = await this.makeWindowOfProcess(args.at_required_location_specifier_process, args.with_data_optional_any, args.with_properties_optional_missing_value_value, args.with_properties_optional_missing_value_position, args.with_properties_optional_integer_index, args.with_properties_optional_missing_value_size, args.with_properties_optional_rectangle_bounds, args.with_properties_optional_boolean_miniaturized, args.with_properties_optional_missing_value_selected, args.with_properties_optional_boolean_zoomed, args.with_properties_optional_missing_value_focused, args.with_properties_optional_boolean_visible);
  break;
        case 'make_network_preferences_object':
  result = await this.makeNetworkPreferencesObject(args.at_optional_location_specifier, args.with_data_optional_any, args.with_properties_optional_location_current_location);
  break;
        case 'make_outline_of_ui_element':
  result = await this.makeOutlineOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_pop_up_button_of_ui_element':
  result = await this.makePopUpButtonOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_splitter_group_of_ui_element':
  result = await this.makeSplitterGroupOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_action_of_ui_element':
  result = await this.makeActionOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_disk_item_of_alias':
  result = await this.makeDiskItemOfAlias(args.at_required_location_specifier_alias, args.with_data_optional_any, args.with_properties_optional_date_modification_date, args.with_properties_optional_boolean_visible, args.with_properties_optional_text_name);
  break;
        case 'make_file_package_of_alias':
  result = await this.makeFilePackageOfAlias(args.at_required_location_specifier_alias, args.with_data_optional_any);
  break;
        case 'make_process':
  result = await this.makeProcess(args.at_optional_location_specifier, args.with_data_optional_any, args.with_properties_optional_boolean_frontmost, args.with_properties_optional_missing_value_visible);
  break;
        case 'make_scripting_parameter_of_scripting_command':
  result = await this.makeScriptingParameterOfScriptingCommand(args.at_required_location_specifier_scripting_command, args.with_data_optional_any);
  break;
        case 'make_insertion_preference':
  result = await this.makeInsertionPreference(args.at_optional_location_specifier, args.with_data_optional_any, args.with_properties_optional_missing_value_custom_script, args.with_properties_optional_missing_value_custom_application, args.with_properties_optional_dhac_insertion_action);
  break;
        case 'make_scripting_class_of_scripting_suite':
  result = await this.makeScriptingClassOfScriptingSuite(args.at_required_location_specifier_scripting_suite, args.with_data_optional_any);
  break;
        case 'make_configuration_of_service':
  result = await this.makeConfigurationOfService(args.at_required_location_specifier_service, args.with_data_optional_any, args.with_properties_optional_text_account_name);
  break;
        case 'make_ui_element_of_window':
  result = await this.makeUiElementOfWindow(args.at_required_location_specifier_window, args.with_data_optional_any, args.with_properties_optional_missing_value_selected, args.with_properties_optional_missing_value_position, args.with_properties_optional_missing_value_focused, args.with_properties_optional_missing_value_size, args.with_properties_optional_missing_value_value);
  break;
        case 'make_property_list_item':
  result = await this.makePropertyListItem(args.at_optional_location_specifier, args.with_data_optional_any, args.with_properties_optional_missing_value_value, args.with_properties_optional_text_text);
  break;
        case 'make_domain':
  result = await this.makeDomain(args.at_optional_location_specifier, args.with_data_optional_any);
  break;
        case 'make_menu_bar_of_process':
  result = await this.makeMenuBarOfProcess(args.at_required_location_specifier_process, args.with_data_optional_any);
  break;
        case 'make_color_well_of_ui_element':
  result = await this.makeColorWellOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_scripting_command_of_scripting_suite':
  result = await this.makeScriptingCommandOfScriptingSuite(args.at_required_location_specifier_scripting_suite, args.with_data_optional_any);
  break;
        case 'make_button_of_scroll_bar':
  result = await this.makeButtonOfScrollBar(args.at_required_location_specifier_scroll_bar, args.with_data_optional_any);
  break;
        case 'make_application_process':
  result = await this.makeApplicationProcess(args.at_optional_location_specifier, args.with_data_optional_any);
  break;
        case 'make_toolbar_of_ui_element':
  result = await this.makeToolbarOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_desktop':
  result = await this.makeDesktop(args.at_optional_location_specifier, args.with_data_optional_any, args.with_properties_optional_missing_value_pictures_folder, args.with_properties_optional_real_change_interval, args.with_properties_optional_boolean_random_order, args.with_properties_optional_integer_picture_rotation, args.with_properties_optional_missing_value_picture, args.with_properties_optional_dynamic_style_dynamic_style, args.with_properties_optional_boolean_translucent_menu_bar);
  break;
        case 'make_user_domain_object':
  result = await this.makeUserDomainObject(args.at_optional_location_specifier, args.with_data_optional_any);
  break;
        case 'make_image_of_static_text':
  result = await this.makeImageOfStaticText(args.at_required_location_specifier_static_text, args.with_data_optional_any);
  break;
        case 'make_login_item':
  result = await this.makeLoginItem(args.at_optional_location_specifier, args.with_data_optional_any, args.with_properties_optional_boolean_hidden);
  break;
        case 'make_user':
  result = await this.makeUser(args.at_optional_location_specifier, args.with_data_optional_any, args.with_properties_optional_missing_value_picture_path);
  break;
        case 'make_relevance_indicator_of_ui_element':
  result = await this.makeRelevanceIndicatorOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_scripting_suite_of_scripting_definition_object':
  result = await this.makeScriptingSuiteOfScriptingDefinitionObject(args.at_required_location_specifier_scripting_definition_object, args.with_data_optional_any);
  break;
        case 'make_xml_element_of_xml_data':
  result = await this.makeXmlElementOfXmlData(args.at_required_location_specifier_xml_data, args.with_data_optional_any, args.with_properties_optional_missing_value_value);
  break;
        case 'make_print_settings':
  result = await this.makePrintSettings(args.at_optional_location_specifier, args.with_data_optional_any, args.with_properties_optional_integer_copies, args.with_properties_optional_text_fax_number, args.with_properties_optional_integer_pages_down, args.with_properties_optional_text_target_printer, args.with_properties_optional_integer_ending_page, args.with_properties_optional_integer_pages_across, args.with_properties_optional_integer_starting_page, args.with_properties_optional_date_requested_print_time, args.with_properties_optional_boolean_collating, args.with_properties_optional_enum_error_handling);
  break;
        case 'make_xml_file':
  result = await this.makeXmlFile(args.at_optional_location_specifier, args.with_data_optional_any);
  break;
        case 'make_menu_of_menu_bar':
  result = await this.makeMenuOfMenuBar(args.at_required_location_specifier_menu_bar, args.with_data_optional_any);
  break;
        case 'make_combo_box_of_ui_element':
  result = await this.makeComboBoxOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_xml_data':
  result = await this.makeXmlData(args.at_optional_location_specifier, args.with_data_optional_any, args.with_properties_optional_text_name, args.with_properties_optional_text_text);
  break;
        case 'make_sheet_of_ui_element':
  result = await this.makeSheetOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_text_field_of_ui_element':
  result = await this.makeTextFieldOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_scripting_enumerator_of_scripting_enumeration':
  result = await this.makeScriptingEnumeratorOfScriptingEnumeration(args.at_required_location_specifier_scripting_enumeration, args.with_data_optional_any);
  break;
        case 'make_interface_of_network_preferences_object':
  result = await this.makeInterfaceOfNetworkPreferencesObject(args.at_required_location_specifier_network_preferences_object, args.with_data_optional_any, args.with_properties_optional_text_duplex, args.with_properties_optional_integer_speed, args.with_properties_optional_integer_mtu, args.with_properties_optional_boolean_automatic);
  break;
        case 'make_row_of_ui_element':
  result = await this.makeRowOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_document':
  result = await this.makeDocument(args.at_optional_location_specifier, args.with_data_optional_any);
  break;
        case 'make_incrementor_of_ui_element':
  result = await this.makeIncrementorOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_file_of_alias':
  result = await this.makeFileOfAlias(args.at_required_location_specifier_alias, args.with_data_optional_any, args.with_properties_optional_missing_value_file_type, args.with_properties_optional_boolean_stationery, args.with_properties_optional_missing_value_default_application, args.with_properties_optional_missing_value_creator_type);
  break;
        case 'make_folder_of_alias':
  result = await this.makeFolderOfAlias(args.at_required_location_specifier_alias, args.with_data_optional_any);
  break;
        case 'make_network_domain_object':
  result = await this.makeNetworkDomainObject(args.at_optional_location_specifier, args.with_data_optional_any);
  break;
        case 'make_desk_accessory_process':
  result = await this.makeDeskAccessoryProcess(args.at_optional_location_specifier, args.with_data_optional_any);
  break;
        case 'make_scroll_area_of_ui_element':
  result = await this.makeScrollAreaOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_column_of_ui_element':
  result = await this.makeColumnOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_property_list_file':
  result = await this.makePropertyListFile(args.at_optional_location_specifier, args.with_data_optional_any);
  break;
        case 'make_menu_button_of_ui_element':
  result = await this.makeMenuButtonOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_splitter_of_ui_element':
  result = await this.makeSplitterOfUiElement(args.at_required_location_specifier_ui_element, args.with_data_optional_any);
  break;
        case 'make_checkbox_of_group':
  result = await this.makeCheckboxOfGroup(args.at_required_location_specifier_group, args.with_data_optional_any);
  break;
        case 'move_for_disk_item_of_alias_of_disk':
  result = await this.moveForDiskItemOfAliasOfDisk(args.target_disk_item_required_string, args.target_alias_required_string, args.target_disk_required_string, args.to_required_location_specifier);
  break;
        case 'get_name_of_application':
  result = await this.getNameOfApplication();
  break;
        case 'get_frontmost_of_application':
  result = await this.getFrontmostOfApplication();
  break;
        case 'get_version_of_application':
  result = await this.getVersionOfApplication();
  break;
        case 'get_name_of_document':
  result = await this.getNameOfDocument(args.target_document_required_string);
  break;
        case 'get_modified_of_document':
  result = await this.getModifiedOfDocument(args.target_document_required_string);
  break;
        case 'get_file_of_document':
  result = await this.getFileOfDocument(args.target_document_required_string);
  break;
        case 'get_name_of_window_of_process':
  result = await this.getNameOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_id_of_window_of_process':
  result = await this.getIdOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_index_of_window_of_process':
  result = await this.getIndexOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'set_index_of_window_of_process':
  result = await this.setIndexOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string, args.value_required_integer);
  break;
        case 'get_bounds_of_window_of_process':
  result = await this.getBoundsOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'set_bounds_of_window_of_process':
  result = await this.setBoundsOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string, args.value_required_rectangle);
  break;
        case 'get_closeable_of_window_of_process':
  result = await this.getCloseableOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_miniaturizable_of_window_of_process':
  result = await this.getMiniaturizableOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_miniaturized_of_window_of_process':
  result = await this.getMiniaturizedOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'set_miniaturized_of_window_of_process':
  result = await this.setMiniaturizedOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string, args.value_required_boolean);
  break;
        case 'get_resizable_of_window_of_process':
  result = await this.getResizableOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_visible_of_window_of_process':
  result = await this.getVisibleOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'set_visible_of_window_of_process':
  result = await this.setVisibleOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string, args.value_required_boolean);
  break;
        case 'get_zoomable_of_window_of_process':
  result = await this.getZoomableOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_zoomed_of_window_of_process':
  result = await this.getZoomedOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'set_zoomed_of_window_of_process':
  result = await this.setZoomedOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string, args.value_required_boolean);
  break;
        case 'get_document_of_window_of_process':
  result = await this.getDocumentOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'abort_transaction':
  result = await this.abortTransaction();
  break;
        case 'begin_transaction':
  result = await this.beginTransaction();
  break;
        case 'end_transaction':
  result = await this.endTransaction();
  break;
        case 'get_quit_delay_of_application':
  result = await this.getQuitDelayOfApplication();
  break;
        case 'set_quit_delay_of_application':
  result = await this.setQuitDelayOfApplication(args.value_required_integer);
  break;
        case 'get_script_menu_enabled_of_application':
  result = await this.getScriptMenuEnabledOfApplication();
  break;
        case 'get_current_user_of_application':
  result = await this.getCurrentUserOfApplication();
  break;
        case 'get_full_name_of_user':
  result = await this.getFullNameOfUser(args.target_user_required_string);
  break;
        case 'get_home_directory_of_user':
  result = await this.getHomeDirectoryOfUser(args.target_user_required_string);
  break;
        case 'get_name_of_user':
  result = await this.getNameOfUser(args.target_user_required_string);
  break;
        case 'get_picture_path_of_user':
  result = await this.getPicturePathOfUser(args.target_user_required_string);
  break;
        case 'set_picture_path_of_user':
  result = await this.setPicturePathOfUser(args.target_user_required_string, args.value_required_text);
  break;
        case 'get_appearance_preferences_of_application':
  result = await this.getAppearancePreferencesOfApplication();
  break;
        case 'set_appearance_preferences_of_application':
  result = await this.setAppearancePreferencesOfApplication(args.value_required_appearance_preferences_object);
  break;
        case 'get_appearance_of_appearance_preferences_object':
  result = await this.getAppearanceOfAppearancePreferencesObject(args.target_appearance_preferences_object_required_string);
  break;
        case 'set_appearance_of_appearance_preferences_object':
  result = await this.setAppearanceOfAppearancePreferencesObject(args.target_appearance_preferences_object_required_string, args.value_required_appearances);
  break;
        case 'get_font_smoothing_of_appearance_preferences_object':
  result = await this.getFontSmoothingOfAppearancePreferencesObject(args.target_appearance_preferences_object_required_string);
  break;
        case 'set_font_smoothing_of_appearance_preferences_object':
  result = await this.setFontSmoothingOfAppearancePreferencesObject(args.target_appearance_preferences_object_required_string, args.value_required_boolean);
  break;
        case 'get_font_smoothing_limit_of_appearance_preferences_object':
  result = await this.getFontSmoothingLimitOfAppearancePreferencesObject(args.target_appearance_preferences_object_required_string);
  break;
        case 'get_font_smoothing_style_of_appearance_preferences_object':
  result = await this.getFontSmoothingStyleOfAppearancePreferencesObject(args.target_appearance_preferences_object_required_string);
  break;
        case 'set_font_smoothing_style_of_appearance_preferences_object':
  result = await this.setFontSmoothingStyleOfAppearancePreferencesObject(args.target_appearance_preferences_object_required_string, args.value_required_fontsmoothingstyles);
  break;
        case 'get_highlight_color_of_appearance_preferences_object':
  result = await this.getHighlightColorOfAppearancePreferencesObject(args.target_appearance_preferences_object_required_string);
  break;
        case 'set_highlight_color_of_appearance_preferences_object':
  result = await this.setHighlightColorOfAppearancePreferencesObject(args.target_appearance_preferences_object_required_string, args.value_required_highlightcolors);
  break;
        case 'get_recent_applications_limit_of_appearance_preferences_object':
  result = await this.getRecentApplicationsLimitOfAppearancePreferencesObject(args.target_appearance_preferences_object_required_string);
  break;
        case 'set_recent_applications_limit_of_appearance_preferences_object':
  result = await this.setRecentApplicationsLimitOfAppearancePreferencesObject(args.target_appearance_preferences_object_required_string, args.value_required_integer);
  break;
        case 'get_recent_documents_limit_of_appearance_preferences_object':
  result = await this.getRecentDocumentsLimitOfAppearancePreferencesObject(args.target_appearance_preferences_object_required_string);
  break;
        case 'set_recent_documents_limit_of_appearance_preferences_object':
  result = await this.setRecentDocumentsLimitOfAppearancePreferencesObject(args.target_appearance_preferences_object_required_string, args.value_required_integer);
  break;
        case 'get_recent_servers_limit_of_appearance_preferences_object':
  result = await this.getRecentServersLimitOfAppearancePreferencesObject(args.target_appearance_preferences_object_required_string);
  break;
        case 'set_recent_servers_limit_of_appearance_preferences_object':
  result = await this.setRecentServersLimitOfAppearancePreferencesObject(args.target_appearance_preferences_object_required_string, args.value_required_integer);
  break;
        case 'get_scroll_bar_action_of_appearance_preferences_object':
  result = await this.getScrollBarActionOfAppearancePreferencesObject(args.target_appearance_preferences_object_required_string);
  break;
        case 'set_scroll_bar_action_of_appearance_preferences_object':
  result = await this.setScrollBarActionOfAppearancePreferencesObject(args.target_appearance_preferences_object_required_string, args.value_required_scrollpagebehaviors);
  break;
        case 'get_smooth_scrolling_of_appearance_preferences_object':
  result = await this.getSmoothScrollingOfAppearancePreferencesObject(args.target_appearance_preferences_object_required_string);
  break;
        case 'set_smooth_scrolling_of_appearance_preferences_object':
  result = await this.setSmoothScrollingOfAppearancePreferencesObject(args.target_appearance_preferences_object_required_string, args.value_required_boolean);
  break;
        case 'get_dark_mode_of_appearance_preferences_object':
  result = await this.getDarkModeOfAppearancePreferencesObject(args.target_appearance_preferences_object_required_string);
  break;
        case 'set_dark_mode_of_appearance_preferences_object':
  result = await this.setDarkModeOfAppearancePreferencesObject(args.target_appearance_preferences_object_required_string, args.value_required_boolean);
  break;
        case 'get_cd_and_dvd_preferences_of_application':
  result = await this.getCdAndDvdPreferencesOfApplication();
  break;
        case 'set_cd_and_dvd_preferences_of_application':
  result = await this.setCdAndDvdPreferencesOfApplication(args.value_required_cd_and_dvd_preferences_object);
  break;
        case 'get_blank_cd_of_cd_and_dvd_preferences_object':
  result = await this.getBlankCdOfCdAndDvdPreferencesObject(args.target_cd_and_dvd_preferences_object_required_string);
  break;
        case 'get_blank_dvd_of_cd_and_dvd_preferences_object':
  result = await this.getBlankDvdOfCdAndDvdPreferencesObject(args.target_cd_and_dvd_preferences_object_required_string);
  break;
        case 'get_blank_bd_of_cd_and_dvd_preferences_object':
  result = await this.getBlankBdOfCdAndDvdPreferencesObject(args.target_cd_and_dvd_preferences_object_required_string);
  break;
        case 'get_music_cd_of_cd_and_dvd_preferences_object':
  result = await this.getMusicCdOfCdAndDvdPreferencesObject(args.target_cd_and_dvd_preferences_object_required_string);
  break;
        case 'get_picture_cd_of_cd_and_dvd_preferences_object':
  result = await this.getPictureCdOfCdAndDvdPreferencesObject(args.target_cd_and_dvd_preferences_object_required_string);
  break;
        case 'get_video_dvd_of_cd_and_dvd_preferences_object':
  result = await this.getVideoDvdOfCdAndDvdPreferencesObject(args.target_cd_and_dvd_preferences_object_required_string);
  break;
        case 'get_video_bd_of_cd_and_dvd_preferences_object':
  result = await this.getVideoBdOfCdAndDvdPreferencesObject(args.target_cd_and_dvd_preferences_object_required_string);
  break;
        case 'get_custom_application_of_insertion_preference':
  result = await this.getCustomApplicationOfInsertionPreference(args.target_insertion_preference_required_string);
  break;
        case 'set_custom_application_of_insertion_preference':
  result = await this.setCustomApplicationOfInsertionPreference(args.target_insertion_preference_required_string, args.value_required_text);
  break;
        case 'get_custom_script_of_insertion_preference':
  result = await this.getCustomScriptOfInsertionPreference(args.target_insertion_preference_required_string);
  break;
        case 'set_custom_script_of_insertion_preference':
  result = await this.setCustomScriptOfInsertionPreference(args.target_insertion_preference_required_string, args.value_required_text);
  break;
        case 'get_insertion_action_of_insertion_preference':
  result = await this.getInsertionActionOfInsertionPreference(args.target_insertion_preference_required_string);
  break;
        case 'set_insertion_action_of_insertion_preference':
  result = await this.setInsertionActionOfInsertionPreference(args.target_insertion_preference_required_string, args.value_required_dhac);
  break;
        case 'get_current_desktop_of_application':
  result = await this.getCurrentDesktopOfApplication();
  break;
        case 'get_name_of_desktop':
  result = await this.getNameOfDesktop(args.target_desktop_required_string);
  break;
        case 'get_id_of_desktop':
  result = await this.getIdOfDesktop(args.target_desktop_required_string);
  break;
        case 'get_change_interval_of_desktop':
  result = await this.getChangeIntervalOfDesktop(args.target_desktop_required_string);
  break;
        case 'set_change_interval_of_desktop':
  result = await this.setChangeIntervalOfDesktop(args.target_desktop_required_string, args.value_required_real);
  break;
        case 'get_display_name_of_desktop':
  result = await this.getDisplayNameOfDesktop(args.target_desktop_required_string);
  break;
        case 'get_picture_of_desktop':
  result = await this.getPictureOfDesktop(args.target_desktop_required_string);
  break;
        case 'set_picture_of_desktop':
  result = await this.setPictureOfDesktop(args.target_desktop_required_string, args.value_required_text);
  break;
        case 'get_picture_rotation_of_desktop':
  result = await this.getPictureRotationOfDesktop(args.target_desktop_required_string);
  break;
        case 'set_picture_rotation_of_desktop':
  result = await this.setPictureRotationOfDesktop(args.target_desktop_required_string, args.value_required_integer);
  break;
        case 'get_pictures_folder_of_desktop':
  result = await this.getPicturesFolderOfDesktop(args.target_desktop_required_string);
  break;
        case 'set_pictures_folder_of_desktop':
  result = await this.setPicturesFolderOfDesktop(args.target_desktop_required_string, args.value_required_text);
  break;
        case 'get_random_order_of_desktop':
  result = await this.getRandomOrderOfDesktop(args.target_desktop_required_string);
  break;
        case 'set_random_order_of_desktop':
  result = await this.setRandomOrderOfDesktop(args.target_desktop_required_string, args.value_required_boolean);
  break;
        case 'get_translucent_menu_bar_of_desktop':
  result = await this.getTranslucentMenuBarOfDesktop(args.target_desktop_required_string);
  break;
        case 'set_translucent_menu_bar_of_desktop':
  result = await this.setTranslucentMenuBarOfDesktop(args.target_desktop_required_string, args.value_required_boolean);
  break;
        case 'get_dynamic_style_of_desktop':
  result = await this.getDynamicStyleOfDesktop(args.target_desktop_required_string);
  break;
        case 'set_dynamic_style_of_desktop':
  result = await this.setDynamicStyleOfDesktop(args.target_desktop_required_string, args.value_required_dynamic_style);
  break;
        case 'get_dock_preferences_of_application':
  result = await this.getDockPreferencesOfApplication();
  break;
        case 'set_dock_preferences_of_application':
  result = await this.setDockPreferencesOfApplication(args.value_required_dock_preferences_object);
  break;
        case 'get_animate_of_dock_preferences_object':
  result = await this.getAnimateOfDockPreferencesObject(args.target_dock_preferences_object_required_string);
  break;
        case 'set_animate_of_dock_preferences_object':
  result = await this.setAnimateOfDockPreferencesObject(args.target_dock_preferences_object_required_string, args.value_required_boolean);
  break;
        case 'get_autohide_of_dock_preferences_object':
  result = await this.getAutohideOfDockPreferencesObject(args.target_dock_preferences_object_required_string);
  break;
        case 'set_autohide_of_dock_preferences_object':
  result = await this.setAutohideOfDockPreferencesObject(args.target_dock_preferences_object_required_string, args.value_required_boolean);
  break;
        case 'get_dock_size_of_dock_preferences_object':
  result = await this.getDockSizeOfDockPreferencesObject(args.target_dock_preferences_object_required_string);
  break;
        case 'set_dock_size_of_dock_preferences_object':
  result = await this.setDockSizeOfDockPreferencesObject(args.target_dock_preferences_object_required_string, args.value_required_real);
  break;
        case 'get_autohide_menu_bar_of_dock_preferences_object':
  result = await this.getAutohideMenuBarOfDockPreferencesObject(args.target_dock_preferences_object_required_string);
  break;
        case 'set_autohide_menu_bar_of_dock_preferences_object':
  result = await this.setAutohideMenuBarOfDockPreferencesObject(args.target_dock_preferences_object_required_string, args.value_required_boolean);
  break;
        case 'get_double_click_behavior_of_dock_preferences_object':
  result = await this.getDoubleClickBehaviorOfDockPreferencesObject(args.target_dock_preferences_object_required_string);
  break;
        case 'set_double_click_behavior_of_dock_preferences_object':
  result = await this.setDoubleClickBehaviorOfDockPreferencesObject(args.target_dock_preferences_object_required_string, args.value_required_dpbh);
  break;
        case 'get_magnification_of_dock_preferences_object':
  result = await this.getMagnificationOfDockPreferencesObject(args.target_dock_preferences_object_required_string);
  break;
        case 'set_magnification_of_dock_preferences_object':
  result = await this.setMagnificationOfDockPreferencesObject(args.target_dock_preferences_object_required_string, args.value_required_boolean);
  break;
        case 'get_magnification_size_of_dock_preferences_object':
  result = await this.getMagnificationSizeOfDockPreferencesObject(args.target_dock_preferences_object_required_string);
  break;
        case 'set_magnification_size_of_dock_preferences_object':
  result = await this.setMagnificationSizeOfDockPreferencesObject(args.target_dock_preferences_object_required_string, args.value_required_real);
  break;
        case 'get_minimize_effect_of_dock_preferences_object':
  result = await this.getMinimizeEffectOfDockPreferencesObject(args.target_dock_preferences_object_required_string);
  break;
        case 'set_minimize_effect_of_dock_preferences_object':
  result = await this.setMinimizeEffectOfDockPreferencesObject(args.target_dock_preferences_object_required_string, args.value_required_dpef);
  break;
        case 'get_minimize_into_application_of_dock_preferences_object':
  result = await this.getMinimizeIntoApplicationOfDockPreferencesObject(args.target_dock_preferences_object_required_string);
  break;
        case 'set_minimize_into_application_of_dock_preferences_object':
  result = await this.setMinimizeIntoApplicationOfDockPreferencesObject(args.target_dock_preferences_object_required_string, args.value_required_boolean);
  break;
        case 'get_screen_edge_of_dock_preferences_object':
  result = await this.getScreenEdgeOfDockPreferencesObject(args.target_dock_preferences_object_required_string);
  break;
        case 'set_screen_edge_of_dock_preferences_object':
  result = await this.setScreenEdgeOfDockPreferencesObject(args.target_dock_preferences_object_required_string, args.value_required_dpls);
  break;
        case 'get_show_indicators_of_dock_preferences_object':
  result = await this.getShowIndicatorsOfDockPreferencesObject(args.target_dock_preferences_object_required_string);
  break;
        case 'set_show_indicators_of_dock_preferences_object':
  result = await this.setShowIndicatorsOfDockPreferencesObject(args.target_dock_preferences_object_required_string, args.value_required_boolean);
  break;
        case 'get_show_recents_of_dock_preferences_object':
  result = await this.getShowRecentsOfDockPreferencesObject(args.target_dock_preferences_object_required_string);
  break;
        case 'set_show_recents_of_dock_preferences_object':
  result = await this.setShowRecentsOfDockPreferencesObject(args.target_dock_preferences_object_required_string, args.value_required_boolean);
  break;
        case 'get_hidden_of_login_item':
  result = await this.getHiddenOfLoginItem(args.target_login_item_required_string);
  break;
        case 'set_hidden_of_login_item':
  result = await this.setHiddenOfLoginItem(args.target_login_item_required_string, args.value_required_boolean);
  break;
        case 'get_kind_of_login_item':
  result = await this.getKindOfLoginItem(args.target_login_item_required_string);
  break;
        case 'get_name_of_login_item':
  result = await this.getNameOfLoginItem(args.target_login_item_required_string);
  break;
        case 'get_path_of_login_item':
  result = await this.getPathOfLoginItem(args.target_login_item_required_string);
  break;
        case 'connect_configuration':
  result = await this.connectConfiguration(args.direct_parameter_required_configuration);
  break;
        case 'connect_service':
  result = await this.connectService(args.direct_parameter_required_service);
  break;
        case 'disconnect_configuration':
  result = await this.disconnectConfiguration(args.direct_parameter_required_configuration);
  break;
        case 'disconnect_service':
  result = await this.disconnectService(args.direct_parameter_required_service);
  break;
        case 'get_network_preferences_of_application':
  result = await this.getNetworkPreferencesOfApplication();
  break;
        case 'set_network_preferences_of_application':
  result = await this.setNetworkPreferencesOfApplication(args.value_required_network_preferences_object);
  break;
        case 'get_account_name_of_configuration_of_service_of_location_of':
  result = await this.getAccountNameOfConfigurationOfServiceOfLocationOf(args.target_configuration_required_string, args.target_service_required_string, args.target_location_required_string, args.target_network_preferences_object_required_string);
  break;
        case 'set_account_name_of_configuration_of_service_of_location_of':
  result = await this.setAccountNameOfConfigurationOfServiceOfLocationOf(args.target_configuration_required_string, args.target_service_required_string, args.target_location_required_string, args.target_network_preferences_object_required_string, args.value_required_text);
  break;
        case 'get_connected_of_configuration_of_service_of_location_of':
  result = await this.getConnectedOfConfigurationOfServiceOfLocationOf(args.target_configuration_required_string, args.target_service_required_string, args.target_location_required_string, args.target_network_preferences_object_required_string);
  break;
        case 'get_id_of_configuration_of_service_of_location_of_network':
  result = await this.getIdOfConfigurationOfServiceOfLocationOfNetwork(args.target_configuration_required_string, args.target_service_required_string, args.target_location_required_string, args.target_network_preferences_object_required_string);
  break;
        case 'get_name_of_configuration_of_service_of_location_of_network':
  result = await this.getNameOfConfigurationOfServiceOfLocationOfNetwork(args.target_configuration_required_string, args.target_service_required_string, args.target_location_required_string, args.target_network_preferences_object_required_string);
  break;
        case 'get_automatic_of_interface_of_network_preferences_object':
  result = await this.getAutomaticOfInterfaceOfNetworkPreferencesObject(args.target_interface_required_string, args.target_network_preferences_object_required_string);
  break;
        case 'set_automatic_of_interface_of_network_preferences_object':
  result = await this.setAutomaticOfInterfaceOfNetworkPreferencesObject(args.target_interface_required_string, args.target_network_preferences_object_required_string, args.value_required_boolean);
  break;
        case 'get_duplex_of_interface_of_network_preferences_object':
  result = await this.getDuplexOfInterfaceOfNetworkPreferencesObject(args.target_interface_required_string, args.target_network_preferences_object_required_string);
  break;
        case 'set_duplex_of_interface_of_network_preferences_object':
  result = await this.setDuplexOfInterfaceOfNetworkPreferencesObject(args.target_interface_required_string, args.target_network_preferences_object_required_string, args.value_required_text);
  break;
        case 'get_id_of_interface_of_network_preferences_object':
  result = await this.getIdOfInterfaceOfNetworkPreferencesObject(args.target_interface_required_string, args.target_network_preferences_object_required_string);
  break;
        case 'get_kind_of_interface_of_network_preferences_object':
  result = await this.getKindOfInterfaceOfNetworkPreferencesObject(args.target_interface_required_string, args.target_network_preferences_object_required_string);
  break;
        case 'get_mac_address_of_interface_of_network_preferences_object':
  result = await this.getMacAddressOfInterfaceOfNetworkPreferencesObject(args.target_interface_required_string, args.target_network_preferences_object_required_string);
  break;
        case 'get_mtu_of_interface_of_network_preferences_object':
  result = await this.getMtuOfInterfaceOfNetworkPreferencesObject(args.target_interface_required_string, args.target_network_preferences_object_required_string);
  break;
        case 'set_mtu_of_interface_of_network_preferences_object':
  result = await this.setMtuOfInterfaceOfNetworkPreferencesObject(args.target_interface_required_string, args.target_network_preferences_object_required_string, args.value_required_integer);
  break;
        case 'get_name_of_interface_of_network_preferences_object':
  result = await this.getNameOfInterfaceOfNetworkPreferencesObject(args.target_interface_required_string, args.target_network_preferences_object_required_string);
  break;
        case 'get_speed_of_interface_of_network_preferences_object':
  result = await this.getSpeedOfInterfaceOfNetworkPreferencesObject(args.target_interface_required_string, args.target_network_preferences_object_required_string);
  break;
        case 'set_speed_of_interface_of_network_preferences_object':
  result = await this.setSpeedOfInterfaceOfNetworkPreferencesObject(args.target_interface_required_string, args.target_network_preferences_object_required_string, args.value_required_integer);
  break;
        case 'get_id_of_location_of_network_preferences_object':
  result = await this.getIdOfLocationOfNetworkPreferencesObject(args.target_location_required_string, args.target_network_preferences_object_required_string);
  break;
        case 'get_name_of_location_of_network_preferences_object':
  result = await this.getNameOfLocationOfNetworkPreferencesObject(args.target_location_required_string, args.target_network_preferences_object_required_string);
  break;
        case 'set_name_of_location_of_network_preferences_object':
  result = await this.setNameOfLocationOfNetworkPreferencesObject(args.target_location_required_string, args.target_network_preferences_object_required_string, args.value_required_text);
  break;
        case 'get_current_location_of_network_preferences_object':
  result = await this.getCurrentLocationOfNetworkPreferencesObject(args.target_network_preferences_object_required_string);
  break;
        case 'set_current_location_of_network_preferences_object':
  result = await this.setCurrentLocationOfNetworkPreferencesObject(args.target_network_preferences_object_required_string, args.value_required_location);
  break;
        case 'get_active_of_service_of_location_of_network_preferences_object':
  result = await this.getActiveOfServiceOfLocationOfNetworkPreferencesObject(args.target_service_required_string, args.target_location_required_string, args.target_network_preferences_object_required_string);
  break;
        case 'get_current_configuration_of_service_of_location_of_network':
  result = await this.getCurrentConfigurationOfServiceOfLocationOfNetwork(args.target_service_required_string, args.target_location_required_string, args.target_network_preferences_object_required_string);
  break;
        case 'set_current_configuration_of_service_of_location_of_network':
  result = await this.setCurrentConfigurationOfServiceOfLocationOfNetwork(args.target_service_required_string, args.target_location_required_string, args.target_network_preferences_object_required_string, args.value_required_configuration);
  break;
        case 'get_id_of_service_of_location_of_network_preferences_object':
  result = await this.getIdOfServiceOfLocationOfNetworkPreferencesObject(args.target_service_required_string, args.target_location_required_string, args.target_network_preferences_object_required_string);
  break;
        case 'get_interface_of_service_of_location_of_network_preferences':
  result = await this.getInterfaceOfServiceOfLocationOfNetworkPreferences(args.target_service_required_string, args.target_location_required_string, args.target_network_preferences_object_required_string);
  break;
        case 'get_kind_of_service_of_location_of_network_preferences_object':
  result = await this.getKindOfServiceOfLocationOfNetworkPreferencesObject(args.target_service_required_string, args.target_location_required_string, args.target_network_preferences_object_required_string);
  break;
        case 'get_name_of_service_of_location_of_network_preferences_object':
  result = await this.getNameOfServiceOfLocationOfNetworkPreferencesObject(args.target_service_required_string, args.target_location_required_string, args.target_network_preferences_object_required_string);
  break;
        case 'set_name_of_service_of_location_of_network_preferences_object':
  result = await this.setNameOfServiceOfLocationOfNetworkPreferencesObject(args.target_service_required_string, args.target_location_required_string, args.target_network_preferences_object_required_string, args.value_required_text);
  break;
        case 'start_screen_saver':
  result = await this.startScreenSaver(args.direct_parameter_required_screen_saver);
  break;
        case 'start_screen_saver_preferences_object':
  result = await this.startScreenSaverPreferencesObject(args.direct_parameter_required_screen_saver_preferences_object);
  break;
        case 'stop_screen_saver':
  result = await this.stopScreenSaver(args.direct_parameter_required_screen_saver);
  break;
        case 'stop_screen_saver_preferences_object':
  result = await this.stopScreenSaverPreferencesObject(args.direct_parameter_required_screen_saver_preferences_object);
  break;
        case 'get_current_screen_saver_of_application':
  result = await this.getCurrentScreenSaverOfApplication();
  break;
        case 'set_current_screen_saver_of_application':
  result = await this.setCurrentScreenSaverOfApplication(args.value_required_screen_saver);
  break;
        case 'get_screen_saver_preferences_of_application':
  result = await this.getScreenSaverPreferencesOfApplication();
  break;
        case 'set_screen_saver_preferences_of_application':
  result = await this.setScreenSaverPreferencesOfApplication(args.value_required_screen_saver_preferences_object);
  break;
        case 'get_displayed_name_of_screen_saver':
  result = await this.getDisplayedNameOfScreenSaver(args.target_screen_saver_required_string);
  break;
        case 'get_name_of_screen_saver':
  result = await this.getNameOfScreenSaver(args.target_screen_saver_required_string);
  break;
        case 'get_path_of_screen_saver':
  result = await this.getPathOfScreenSaver(args.target_screen_saver_required_string);
  break;
        case 'get_picture_display_style_of_screen_saver':
  result = await this.getPictureDisplayStyleOfScreenSaver(args.target_screen_saver_required_string);
  break;
        case 'set_picture_display_style_of_screen_saver':
  result = await this.setPictureDisplayStyleOfScreenSaver(args.target_screen_saver_required_string, args.value_required_text);
  break;
        case 'get_delay_interval_of_screen_saver_preferences_object':
  result = await this.getDelayIntervalOfScreenSaverPreferencesObject(args.target_screen_saver_preferences_object_required_string);
  break;
        case 'set_delay_interval_of_screen_saver_preferences_object':
  result = await this.setDelayIntervalOfScreenSaverPreferencesObject(args.target_screen_saver_preferences_object_required_string, args.value_required_integer);
  break;
        case 'get_main_screen_only_of_screen_saver_preferences_object':
  result = await this.getMainScreenOnlyOfScreenSaverPreferencesObject(args.target_screen_saver_preferences_object_required_string);
  break;
        case 'set_main_screen_only_of_screen_saver_preferences_object':
  result = await this.setMainScreenOnlyOfScreenSaverPreferencesObject(args.target_screen_saver_preferences_object_required_string, args.value_required_boolean);
  break;
        case 'get_running_of_screen_saver_preferences_object':
  result = await this.getRunningOfScreenSaverPreferencesObject(args.target_screen_saver_preferences_object_required_string);
  break;
        case 'get_show_clock_of_screen_saver_preferences_object':
  result = await this.getShowClockOfScreenSaverPreferencesObject(args.target_screen_saver_preferences_object_required_string);
  break;
        case 'set_show_clock_of_screen_saver_preferences_object':
  result = await this.setShowClockOfScreenSaverPreferencesObject(args.target_screen_saver_preferences_object_required_string, args.value_required_boolean);
  break;
        case 'get_security_preferences_of_application':
  result = await this.getSecurityPreferencesOfApplication();
  break;
        case 'set_security_preferences_of_application':
  result = await this.setSecurityPreferencesOfApplication(args.value_required_security_preferences_object);
  break;
        case 'get_automatic_login_of_security_preferences_object':
  result = await this.getAutomaticLoginOfSecurityPreferencesObject(args.target_security_preferences_object_required_string);
  break;
        case 'set_automatic_login_of_security_preferences_object':
  result = await this.setAutomaticLoginOfSecurityPreferencesObject(args.target_security_preferences_object_required_string, args.value_required_boolean);
  break;
        case 'get_log_out_when_inactive_of_security_preferences_object':
  result = await this.getLogOutWhenInactiveOfSecurityPreferencesObject(args.target_security_preferences_object_required_string);
  break;
        case 'set_log_out_when_inactive_of_security_preferences_object':
  result = await this.setLogOutWhenInactiveOfSecurityPreferencesObject(args.target_security_preferences_object_required_string, args.value_required_boolean);
  break;
        case 'get_log_out_when_inactive_interval_of_security_preferences':
  result = await this.getLogOutWhenInactiveIntervalOfSecurityPreferences(args.target_security_preferences_object_required_string);
  break;
        case 'set_log_out_when_inactive_interval_of_security_preferences':
  result = await this.setLogOutWhenInactiveIntervalOfSecurityPreferences(args.target_security_preferences_object_required_string, args.value_required_integer);
  break;
        case 'get_require_password_to_unlock_of_security_preferences_object':
  result = await this.getRequirePasswordToUnlockOfSecurityPreferencesObject(args.target_security_preferences_object_required_string);
  break;
        case 'set_require_password_to_unlock_of_security_preferences_object':
  result = await this.setRequirePasswordToUnlockOfSecurityPreferencesObject(args.target_security_preferences_object_required_string, args.value_required_boolean);
  break;
        case 'get_require_password_to_wake_of_security_preferences_object':
  result = await this.getRequirePasswordToWakeOfSecurityPreferencesObject(args.target_security_preferences_object_required_string);
  break;
        case 'set_require_password_to_wake_of_security_preferences_object':
  result = await this.setRequirePasswordToWakeOfSecurityPreferencesObject(args.target_security_preferences_object_required_string, args.value_required_boolean);
  break;
        case 'get_secure_virtual_memory_of_security_preferences_object':
  result = await this.getSecureVirtualMemoryOfSecurityPreferencesObject(args.target_security_preferences_object_required_string);
  break;
        case 'set_secure_virtual_memory_of_security_preferences_object':
  result = await this.setSecureVirtualMemoryOfSecurityPreferencesObject(args.target_security_preferences_object_required_string, args.value_required_boolean);
  break;
        case 'delete_for_disk':
  result = await this.deleteForDisk(args.direct_parameter_required_disk_item, args.target_disk_required_string);
  break;
        case 'delete_for_alias_of_disk':
  result = await this.deleteForAliasOfDisk(args.direct_parameter_required_disk_item, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'delete_for_file_package_of_alias_of_disk':
  result = await this.deleteForFilePackageOfAliasOfDisk(args.direct_parameter_required_disk_item, args.target_file_package_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'delete_for_folder_of_alias_of_disk':
  result = await this.deleteForFolderOfAliasOfDisk(args.direct_parameter_required_disk_item, args.target_folder_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'move_disk_item':
  result = await this.moveDiskItem(args.direct_parameter_required_disk_item, args.to_required_location_specifier);
  break;
        case 'move_disk_item':
  result = await this.moveDiskItem(args.direct_parameter_required_list_of_disk_item, args.to_required_location_specifier);
  break;
        case 'move_text':
  result = await this.moveText(args.direct_parameter_required_text, args.to_required_location_specifier);
  break;
        case 'move_text':
  result = await this.moveText(args.direct_parameter_required_list_of_text, args.to_required_location_specifier);
  break;
        case 'open_file':
  result = await this.openFile(args.direct_parameter_required_file);
  break;
        case 'open_text':
  result = await this.openText(args.direct_parameter_required_text);
  break;
        case 'get_application_support_folder_of_application':
  result = await this.getApplicationSupportFolderOfApplication();
  break;
        case 'get_applications_folder_of_application':
  result = await this.getApplicationsFolderOfApplication();
  break;
        case 'get_classic_domain_of_application':
  result = await this.getClassicDomainOfApplication();
  break;
        case 'get_desktop_folder_of_application':
  result = await this.getDesktopFolderOfApplication();
  break;
        case 'get_desktop_pictures_folder_of_application':
  result = await this.getDesktopPicturesFolderOfApplication();
  break;
        case 'get_documents_folder_of_application':
  result = await this.getDocumentsFolderOfApplication();
  break;
        case 'get_downloads_folder_of_application':
  result = await this.getDownloadsFolderOfApplication();
  break;
        case 'get_favorites_folder_of_application':
  result = await this.getFavoritesFolderOfApplication();
  break;
        case 'get_folder_action_scripts_folder_of_application':
  result = await this.getFolderActionScriptsFolderOfApplication();
  break;
        case 'get_fonts_folder_of_application':
  result = await this.getFontsFolderOfApplication();
  break;
        case 'get_home_folder_of_application':
  result = await this.getHomeFolderOfApplication();
  break;
        case 'get_library_folder_of_application':
  result = await this.getLibraryFolderOfApplication();
  break;
        case 'get_local_domain_of_application':
  result = await this.getLocalDomainOfApplication();
  break;
        case 'get_movies_folder_of_application':
  result = await this.getMoviesFolderOfApplication();
  break;
        case 'get_music_folder_of_application':
  result = await this.getMusicFolderOfApplication();
  break;
        case 'get_network_domain_of_application':
  result = await this.getNetworkDomainOfApplication();
  break;
        case 'get_pictures_folder_of_application':
  result = await this.getPicturesFolderOfApplication();
  break;
        case 'get_preferences_folder_of_application':
  result = await this.getPreferencesFolderOfApplication();
  break;
        case 'get_public_folder_of_application':
  result = await this.getPublicFolderOfApplication();
  break;
        case 'get_scripting_additions_folder_of_application':
  result = await this.getScriptingAdditionsFolderOfApplication();
  break;
        case 'get_scripts_folder_of_application':
  result = await this.getScriptsFolderOfApplication();
  break;
        case 'get_shared_documents_folder_of_application':
  result = await this.getSharedDocumentsFolderOfApplication();
  break;
        case 'get_sites_folder_of_application':
  result = await this.getSitesFolderOfApplication();
  break;
        case 'get_speakable_items_folder_of_application':
  result = await this.getSpeakableItemsFolderOfApplication();
  break;
        case 'get_startup_disk_of_application':
  result = await this.getStartupDiskOfApplication();
  break;
        case 'get_system_domain_of_application':
  result = await this.getSystemDomainOfApplication();
  break;
        case 'get_temporary_items_folder_of_application':
  result = await this.getTemporaryItemsFolderOfApplication();
  break;
        case 'get_trash_of_application':
  result = await this.getTrashOfApplication();
  break;
        case 'get_user_domain_of_application':
  result = await this.getUserDomainOfApplication();
  break;
        case 'get_utilities_folder_of_application':
  result = await this.getUtilitiesFolderOfApplication();
  break;
        case 'get_workflows_folder_of_application':
  result = await this.getWorkflowsFolderOfApplication();
  break;
        case 'get_creator_type_of_alias_of_disk':
  result = await this.getCreatorTypeOfAliasOfDisk(args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'set_creator_type_of_alias_of_disk':
  result = await this.setCreatorTypeOfAliasOfDisk(args.target_alias_required_string, args.target_disk_required_string, args.value_required_text);
  break;
        case 'get_default_application_of_alias_of_disk':
  result = await this.getDefaultApplicationOfAliasOfDisk(args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'set_default_application_of_alias_of_disk':
  result = await this.setDefaultApplicationOfAliasOfDisk(args.target_alias_required_string, args.target_disk_required_string, args.value_required_disk_item);
  break;
        case 'get_file_type_of_alias_of_disk':
  result = await this.getFileTypeOfAliasOfDisk(args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'set_file_type_of_alias_of_disk':
  result = await this.setFileTypeOfAliasOfDisk(args.target_alias_required_string, args.target_disk_required_string, args.value_required_text);
  break;
        case 'get_kind_of_alias_of_disk':
  result = await this.getKindOfAliasOfDisk(args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'get_product_version_of_alias_of_disk':
  result = await this.getProductVersionOfAliasOfDisk(args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'get_short_version_of_alias_of_disk':
  result = await this.getShortVersionOfAliasOfDisk(args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'get_stationery_of_alias_of_disk':
  result = await this.getStationeryOfAliasOfDisk(args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'set_stationery_of_alias_of_disk':
  result = await this.setStationeryOfAliasOfDisk(args.target_alias_required_string, args.target_disk_required_string, args.value_required_boolean);
  break;
        case 'get_type_identifier_of_alias_of_disk':
  result = await this.getTypeIdentifierOfAliasOfDisk(args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'get_version_of_alias_of_disk':
  result = await this.getVersionOfAliasOfDisk(args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'get_apple_menu_folder_of_classic_domain_object':
  result = await this.getAppleMenuFolderOfClassicDomainObject(args.target_classic_domain_object_required_string);
  break;
        case 'get_control_panels_folder_of_classic_domain_object':
  result = await this.getControlPanelsFolderOfClassicDomainObject(args.target_classic_domain_object_required_string);
  break;
        case 'get_control_strip_modules_folder_of_classic_domain_object':
  result = await this.getControlStripModulesFolderOfClassicDomainObject(args.target_classic_domain_object_required_string);
  break;
        case 'get_desktop_folder_of_classic_domain_object':
  result = await this.getDesktopFolderOfClassicDomainObject(args.target_classic_domain_object_required_string);
  break;
        case 'get_extensions_folder_of_classic_domain_object':
  result = await this.getExtensionsFolderOfClassicDomainObject(args.target_classic_domain_object_required_string);
  break;
        case 'get_fonts_folder_of_classic_domain_object':
  result = await this.getFontsFolderOfClassicDomainObject(args.target_classic_domain_object_required_string);
  break;
        case 'get_launcher_items_folder_of_classic_domain_object':
  result = await this.getLauncherItemsFolderOfClassicDomainObject(args.target_classic_domain_object_required_string);
  break;
        case 'get_preferences_folder_of_classic_domain_object':
  result = await this.getPreferencesFolderOfClassicDomainObject(args.target_classic_domain_object_required_string);
  break;
        case 'get_shutdown_folder_of_classic_domain_object':
  result = await this.getShutdownFolderOfClassicDomainObject(args.target_classic_domain_object_required_string);
  break;
        case 'get_startup_items_folder_of_classic_domain_object':
  result = await this.getStartupItemsFolderOfClassicDomainObject(args.target_classic_domain_object_required_string);
  break;
        case 'get_system_folder_of_classic_domain_object':
  result = await this.getSystemFolderOfClassicDomainObject(args.target_classic_domain_object_required_string);
  break;
        case 'get_capacity_of_disk':
  result = await this.getCapacityOfDisk(args.target_disk_required_string);
  break;
        case 'get_ejectable_of_disk':
  result = await this.getEjectableOfDisk(args.target_disk_required_string);
  break;
        case 'get_format_of_disk':
  result = await this.getFormatOfDisk(args.target_disk_required_string);
  break;
        case 'get_free_space_of_disk':
  result = await this.getFreeSpaceOfDisk(args.target_disk_required_string);
  break;
        case 'get_ignore_privileges_of_disk':
  result = await this.getIgnorePrivilegesOfDisk(args.target_disk_required_string);
  break;
        case 'set_ignore_privileges_of_disk':
  result = await this.setIgnorePrivilegesOfDisk(args.target_disk_required_string, args.value_required_boolean);
  break;
        case 'get_local_volume_of_disk':
  result = await this.getLocalVolumeOfDisk(args.target_disk_required_string);
  break;
        case 'get_server_of_disk':
  result = await this.getServerOfDisk(args.target_disk_required_string);
  break;
        case 'get_startup_of_disk':
  result = await this.getStartupOfDisk(args.target_disk_required_string);
  break;
        case 'get_zone_of_disk':
  result = await this.getZoneOfDisk(args.target_disk_required_string);
  break;
        case 'get_busy_status_of_disk_item_of_alias_of_disk':
  result = await this.getBusyStatusOfDiskItemOfAliasOfDisk(args.target_disk_item_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'get_container_of_disk_item_of_alias_of_disk':
  result = await this.getContainerOfDiskItemOfAliasOfDisk(args.target_disk_item_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'get_creation_date_of_disk_item_of_alias_of_disk':
  result = await this.getCreationDateOfDiskItemOfAliasOfDisk(args.target_disk_item_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'get_displayed_name_of_disk_item_of_alias_of_disk':
  result = await this.getDisplayedNameOfDiskItemOfAliasOfDisk(args.target_disk_item_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'get_id_of_disk_item_of_alias_of_disk':
  result = await this.getIdOfDiskItemOfAliasOfDisk(args.target_disk_item_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'get_modification_date_of_disk_item_of_alias_of_disk':
  result = await this.getModificationDateOfDiskItemOfAliasOfDisk(args.target_disk_item_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'set_modification_date_of_disk_item_of_alias_of_disk':
  result = await this.setModificationDateOfDiskItemOfAliasOfDisk(args.target_disk_item_required_string, args.target_alias_required_string, args.target_disk_required_string, args.value_required_date);
  break;
        case 'get_name_of_disk_item_of_alias_of_disk':
  result = await this.getNameOfDiskItemOfAliasOfDisk(args.target_disk_item_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'set_name_of_disk_item_of_alias_of_disk':
  result = await this.setNameOfDiskItemOfAliasOfDisk(args.target_disk_item_required_string, args.target_alias_required_string, args.target_disk_required_string, args.value_required_text);
  break;
        case 'get_name_extension_of_disk_item_of_alias_of_disk':
  result = await this.getNameExtensionOfDiskItemOfAliasOfDisk(args.target_disk_item_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'get_package_folder_of_disk_item_of_alias_of_disk':
  result = await this.getPackageFolderOfDiskItemOfAliasOfDisk(args.target_disk_item_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'get_path_of_disk_item_of_alias_of_disk':
  result = await this.getPathOfDiskItemOfAliasOfDisk(args.target_disk_item_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'get_physical_size_of_disk_item_of_alias_of_disk':
  result = await this.getPhysicalSizeOfDiskItemOfAliasOfDisk(args.target_disk_item_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'get_posix_path_of_disk_item_of_alias_of_disk':
  result = await this.getPosixPathOfDiskItemOfAliasOfDisk(args.target_disk_item_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'get_size_of_disk_item_of_alias_of_disk':
  result = await this.getSizeOfDiskItemOfAliasOfDisk(args.target_disk_item_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'get_url_of_disk_item_of_alias_of_disk':
  result = await this.getUrlOfDiskItemOfAliasOfDisk(args.target_disk_item_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'get_visible_of_disk_item_of_alias_of_disk':
  result = await this.getVisibleOfDiskItemOfAliasOfDisk(args.target_disk_item_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'set_visible_of_disk_item_of_alias_of_disk':
  result = await this.setVisibleOfDiskItemOfAliasOfDisk(args.target_disk_item_required_string, args.target_alias_required_string, args.target_disk_required_string, args.value_required_boolean);
  break;
        case 'get_volume_of_disk_item_of_alias_of_disk':
  result = await this.getVolumeOfDiskItemOfAliasOfDisk(args.target_disk_item_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'get_application_support_folder_of_domain':
  result = await this.getApplicationSupportFolderOfDomain(args.target_domain_required_string);
  break;
        case 'get_applications_folder_of_domain':
  result = await this.getApplicationsFolderOfDomain(args.target_domain_required_string);
  break;
        case 'get_desktop_pictures_folder_of_domain':
  result = await this.getDesktopPicturesFolderOfDomain(args.target_domain_required_string);
  break;
        case 'get_folder_action_scripts_folder_of_domain':
  result = await this.getFolderActionScriptsFolderOfDomain(args.target_domain_required_string);
  break;
        case 'get_fonts_folder_of_domain':
  result = await this.getFontsFolderOfDomain(args.target_domain_required_string);
  break;
        case 'get_id_of_domain':
  result = await this.getIdOfDomain(args.target_domain_required_string);
  break;
        case 'get_library_folder_of_domain':
  result = await this.getLibraryFolderOfDomain(args.target_domain_required_string);
  break;
        case 'get_name_of_domain':
  result = await this.getNameOfDomain(args.target_domain_required_string);
  break;
        case 'get_preferences_folder_of_domain':
  result = await this.getPreferencesFolderOfDomain(args.target_domain_required_string);
  break;
        case 'get_scripting_additions_folder_of_domain':
  result = await this.getScriptingAdditionsFolderOfDomain(args.target_domain_required_string);
  break;
        case 'get_scripts_folder_of_domain':
  result = await this.getScriptsFolderOfDomain(args.target_domain_required_string);
  break;
        case 'get_shared_documents_folder_of_domain':
  result = await this.getSharedDocumentsFolderOfDomain(args.target_domain_required_string);
  break;
        case 'get_speakable_items_folder_of_domain':
  result = await this.getSpeakableItemsFolderOfDomain(args.target_domain_required_string);
  break;
        case 'get_utilities_folder_of_domain':
  result = await this.getUtilitiesFolderOfDomain(args.target_domain_required_string);
  break;
        case 'get_workflows_folder_of_domain':
  result = await this.getWorkflowsFolderOfDomain(args.target_domain_required_string);
  break;
        case 'get_creator_type_of_file_of_alias_of_disk':
  result = await this.getCreatorTypeOfFileOfAliasOfDisk(args.target_file_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'set_creator_type_of_file_of_alias_of_disk':
  result = await this.setCreatorTypeOfFileOfAliasOfDisk(args.target_file_required_string, args.target_alias_required_string, args.target_disk_required_string, args.value_required_text);
  break;
        case 'get_default_application_of_file_of_alias_of_disk':
  result = await this.getDefaultApplicationOfFileOfAliasOfDisk(args.target_file_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'set_default_application_of_file_of_alias_of_disk':
  result = await this.setDefaultApplicationOfFileOfAliasOfDisk(args.target_file_required_string, args.target_alias_required_string, args.target_disk_required_string, args.value_required_disk_item);
  break;
        case 'get_file_type_of_file_of_alias_of_disk':
  result = await this.getFileTypeOfFileOfAliasOfDisk(args.target_file_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'set_file_type_of_file_of_alias_of_disk':
  result = await this.setFileTypeOfFileOfAliasOfDisk(args.target_file_required_string, args.target_alias_required_string, args.target_disk_required_string, args.value_required_text);
  break;
        case 'get_kind_of_file_of_alias_of_disk':
  result = await this.getKindOfFileOfAliasOfDisk(args.target_file_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'get_product_version_of_file_of_alias_of_disk':
  result = await this.getProductVersionOfFileOfAliasOfDisk(args.target_file_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'get_short_version_of_file_of_alias_of_disk':
  result = await this.getShortVersionOfFileOfAliasOfDisk(args.target_file_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'get_stationery_of_file_of_alias_of_disk':
  result = await this.getStationeryOfFileOfAliasOfDisk(args.target_file_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'set_stationery_of_file_of_alias_of_disk':
  result = await this.setStationeryOfFileOfAliasOfDisk(args.target_file_required_string, args.target_alias_required_string, args.target_disk_required_string, args.value_required_boolean);
  break;
        case 'get_type_identifier_of_file_of_alias_of_disk':
  result = await this.getTypeIdentifierOfFileOfAliasOfDisk(args.target_file_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'get_version_of_file_of_alias_of_disk':
  result = await this.getVersionOfFileOfAliasOfDisk(args.target_file_required_string, args.target_alias_required_string, args.target_disk_required_string);
  break;
        case 'get_desktop_folder_of_user_domain_object':
  result = await this.getDesktopFolderOfUserDomainObject(args.target_user_domain_object_required_string);
  break;
        case 'get_documents_folder_of_user_domain_object':
  result = await this.getDocumentsFolderOfUserDomainObject(args.target_user_domain_object_required_string);
  break;
        case 'get_downloads_folder_of_user_domain_object':
  result = await this.getDownloadsFolderOfUserDomainObject(args.target_user_domain_object_required_string);
  break;
        case 'get_favorites_folder_of_user_domain_object':
  result = await this.getFavoritesFolderOfUserDomainObject(args.target_user_domain_object_required_string);
  break;
        case 'get_home_folder_of_user_domain_object':
  result = await this.getHomeFolderOfUserDomainObject(args.target_user_domain_object_required_string);
  break;
        case 'get_movies_folder_of_user_domain_object':
  result = await this.getMoviesFolderOfUserDomainObject(args.target_user_domain_object_required_string);
  break;
        case 'get_music_folder_of_user_domain_object':
  result = await this.getMusicFolderOfUserDomainObject(args.target_user_domain_object_required_string);
  break;
        case 'get_pictures_folder_of_user_domain_object':
  result = await this.getPicturesFolderOfUserDomainObject(args.target_user_domain_object_required_string);
  break;
        case 'get_public_folder_of_user_domain_object':
  result = await this.getPublicFolderOfUserDomainObject(args.target_user_domain_object_required_string);
  break;
        case 'get_sites_folder_of_user_domain_object':
  result = await this.getSitesFolderOfUserDomainObject(args.target_user_domain_object_required_string);
  break;
        case 'get_temporary_items_folder_of_user_domain_object':
  result = await this.getTemporaryItemsFolderOfUserDomainObject(args.target_user_domain_object_required_string);
  break;
        case 'log_out':
  result = await this.logOut();
  break;
        case 'restart':
  result = await this.restart(args.state_saving_preference_optional_boolean);
  break;
        case 'shut_down':
  result = await this.shutDown(args.state_saving_preference_optional_boolean);
  break;
        case 'sleep':
  result = await this.sleep();
  break;
        case 'click_for_window_of_process':
  result = await this.clickForWindowOfProcess(args.direct_parameter_optional_ui_element, args.target_window_required_string, args.target_process_required_string, args.at_optional_list_of_number);
  break;
        case 'click_for_process':
  result = await this.clickForProcess(args.direct_parameter_optional_ui_element, args.target_process_required_string, args.at_optional_list_of_number);
  break;
        case 'click_for_ui_element_of_window_of_process':
  result = await this.clickForUiElementOfWindowOfProcess(args.direct_parameter_optional_ui_element, args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string, args.at_optional_list_of_number);
  break;
        case 'key_code':
  result = await this.keyCode(args.direct_parameter_required_integer, args.using_optional_emds);
  break;
        case 'keystroke':
  result = await this.keystroke(args.direct_parameter_required_text, args.using_optional_emds);
  break;
        case 'perform_for_action_of_ui_element_of_window_of_process':
  result = await this.performForActionOfUiElementOfWindowOfProcess(args.direct_parameter_required_action, args.target_action_required_string, args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'select_for_window_of_process':
  result = await this.selectForWindowOfProcess(args.direct_parameter_required_ui_element, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'select_for_ui_element_of_window_of_process':
  result = await this.selectForUiElementOfWindowOfProcess(args.direct_parameter_required_ui_element, args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_ui_elements_enabled_of_application':
  result = await this.getUiElementsEnabledOfApplication();
  break;
        case 'get_description_of_action_of_ui_element_of_window_of_process':
  result = await this.getDescriptionOfActionOfUiElementOfWindowOfProcess(args.target_action_required_string, args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_name_of_action_of_ui_element_of_window_of_process':
  result = await this.getNameOfActionOfUiElementOfWindowOfProcess(args.target_action_required_string, args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_application_file_of_application_process':
  result = await this.getApplicationFileOfApplicationProcess(args.target_application_process_required_string);
  break;
        case 'get_name_of_attribute_of_ui_element_of_window_of_process':
  result = await this.getNameOfAttributeOfUiElementOfWindowOfProcess(args.target_attribute_required_string, args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_settable_of_attribute_of_ui_element_of_window_of_process':
  result = await this.getSettableOfAttributeOfUiElementOfWindowOfProcess(args.target_attribute_required_string, args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_value_of_attribute_of_ui_element_of_window_of_process':
  result = await this.getValueOfAttributeOfUiElementOfWindowOfProcess(args.target_attribute_required_string, args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'set_value_of_attribute_of_ui_element_of_window_of_process':
  result = await this.setValueOfAttributeOfUiElementOfWindowOfProcess(args.target_attribute_required_string, args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string, args.value_required_specifier);
  break;
        case 'get_desk_accessory_file_of_desk_accessory_process':
  result = await this.getDeskAccessoryFileOfDeskAccessoryProcess(args.target_desk_accessory_process_required_string);
  break;
        case 'get_accepts_high_level_events_of_process':
  result = await this.getAcceptsHighLevelEventsOfProcess(args.target_process_required_string);
  break;
        case 'get_accepts_remote_events_of_process':
  result = await this.getAcceptsRemoteEventsOfProcess(args.target_process_required_string);
  break;
        case 'get_architecture_of_process':
  result = await this.getArchitectureOfProcess(args.target_process_required_string);
  break;
        case 'get_background_only_of_process':
  result = await this.getBackgroundOnlyOfProcess(args.target_process_required_string);
  break;
        case 'get_bundle_identifier_of_process':
  result = await this.getBundleIdentifierOfProcess(args.target_process_required_string);
  break;
        case 'get_classic_of_process':
  result = await this.getClassicOfProcess(args.target_process_required_string);
  break;
        case 'get_creator_type_of_process':
  result = await this.getCreatorTypeOfProcess(args.target_process_required_string);
  break;
        case 'get_displayed_name_of_process':
  result = await this.getDisplayedNameOfProcess(args.target_process_required_string);
  break;
        case 'get_file_of_process':
  result = await this.getFileOfProcess(args.target_process_required_string);
  break;
        case 'get_file_type_of_process':
  result = await this.getFileTypeOfProcess(args.target_process_required_string);
  break;
        case 'get_frontmost_of_process':
  result = await this.getFrontmostOfProcess(args.target_process_required_string);
  break;
        case 'set_frontmost_of_process':
  result = await this.setFrontmostOfProcess(args.target_process_required_string, args.value_required_boolean);
  break;
        case 'get_has_scripting_terminology_of_process':
  result = await this.getHasScriptingTerminologyOfProcess(args.target_process_required_string);
  break;
        case 'get_id_of_process':
  result = await this.getIdOfProcess(args.target_process_required_string);
  break;
        case 'get_name_of_process':
  result = await this.getNameOfProcess(args.target_process_required_string);
  break;
        case 'get_partition_space_used_of_process':
  result = await this.getPartitionSpaceUsedOfProcess(args.target_process_required_string);
  break;
        case 'get_short_name_of_process':
  result = await this.getShortNameOfProcess(args.target_process_required_string);
  break;
        case 'get_total_partition_size_of_process':
  result = await this.getTotalPartitionSizeOfProcess(args.target_process_required_string);
  break;
        case 'get_unix_id_of_process':
  result = await this.getUnixIdOfProcess(args.target_process_required_string);
  break;
        case 'get_visible_of_process':
  result = await this.getVisibleOfProcess(args.target_process_required_string);
  break;
        case 'set_visible_of_process':
  result = await this.setVisibleOfProcess(args.target_process_required_string, args.value_required_boolean);
  break;
        case 'get_accessibility_description_of_ui_element_of_window_of_process':
  result = await this.getAccessibilityDescriptionOfUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_class_of_ui_element_of_window_of_process':
  result = await this.getClassOfUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_description_of_ui_element_of_window_of_process':
  result = await this.getDescriptionOfUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_enabled_of_ui_element_of_window_of_process':
  result = await this.getEnabledOfUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_entire_contents_of_ui_element_of_window_of_process':
  result = await this.getEntireContentsOfUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_focused_of_ui_element_of_window_of_process':
  result = await this.getFocusedOfUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'set_focused_of_ui_element_of_window_of_process':
  result = await this.setFocusedOfUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string, args.value_required_boolean);
  break;
        case 'get_help_of_ui_element_of_window_of_process':
  result = await this.getHelpOfUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_maximum_value_of_ui_element_of_window_of_process':
  result = await this.getMaximumValueOfUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_minimum_value_of_ui_element_of_window_of_process':
  result = await this.getMinimumValueOfUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_name_of_ui_element_of_window_of_process':
  result = await this.getNameOfUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_orientation_of_ui_element_of_window_of_process':
  result = await this.getOrientationOfUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_position_of_ui_element_of_window_of_process':
  result = await this.getPositionOfUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'set_position_of_ui_element_of_window_of_process':
  result = await this.setPositionOfUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string, args.value_required_number);
  break;
        case 'get_role_of_ui_element_of_window_of_process':
  result = await this.getRoleOfUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_role_description_of_ui_element_of_window_of_process':
  result = await this.getRoleDescriptionOfUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_selected_of_ui_element_of_window_of_process':
  result = await this.getSelectedOfUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'set_selected_of_ui_element_of_window_of_process':
  result = await this.setSelectedOfUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string, args.value_required_boolean);
  break;
        case 'get_size_of_ui_element_of_window_of_process':
  result = await this.getSizeOfUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'set_size_of_ui_element_of_window_of_process':
  result = await this.setSizeOfUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string, args.value_required_number);
  break;
        case 'get_subrole_of_ui_element_of_window_of_process':
  result = await this.getSubroleOfUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_title_of_ui_element_of_window_of_process':
  result = await this.getTitleOfUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_value_of_ui_element_of_window_of_process':
  result = await this.getValueOfUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'set_value_of_ui_element_of_window_of_process':
  result = await this.setValueOfUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string, args.value_required_specifier);
  break;
        case 'get_accessibility_description_of_window_of_process':
  result = await this.getAccessibilityDescriptionOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_class_of_window_of_process':
  result = await this.getClassOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_description_of_window_of_process':
  result = await this.getDescriptionOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_enabled_of_window_of_process':
  result = await this.getEnabledOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_entire_contents_of_window_of_process':
  result = await this.getEntireContentsOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_focused_of_window_of_process':
  result = await this.getFocusedOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'set_focused_of_window_of_process':
  result = await this.setFocusedOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string, args.value_required_boolean);
  break;
        case 'get_help_of_window_of_process':
  result = await this.getHelpOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_maximum_value_of_window_of_process':
  result = await this.getMaximumValueOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_minimum_value_of_window_of_process':
  result = await this.getMinimumValueOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_orientation_of_window_of_process':
  result = await this.getOrientationOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_position_of_window_of_process':
  result = await this.getPositionOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'set_position_of_window_of_process':
  result = await this.setPositionOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string, args.value_required_number);
  break;
        case 'get_role_of_window_of_process':
  result = await this.getRoleOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_role_description_of_window_of_process':
  result = await this.getRoleDescriptionOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_selected_of_window_of_process':
  result = await this.getSelectedOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'set_selected_of_window_of_process':
  result = await this.setSelectedOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string, args.value_required_boolean);
  break;
        case 'get_size_of_window_of_process':
  result = await this.getSizeOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'set_size_of_window_of_process':
  result = await this.setSizeOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string, args.value_required_number);
  break;
        case 'get_subrole_of_window_of_process':
  result = await this.getSubroleOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_title_of_window_of_process':
  result = await this.getTitleOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'get_value_of_window_of_process':
  result = await this.getValueOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'set_value_of_window_of_process':
  result = await this.setValueOfWindowOfProcess(args.target_window_required_string, args.target_process_required_string, args.value_required_specifier);
  break;
        case 'get_kind_of_property_list_item':
  result = await this.getKindOfPropertyListItem(args.target_property_list_item_required_string);
  break;
        case 'get_name_of_property_list_item':
  result = await this.getNameOfPropertyListItem(args.target_property_list_item_required_string);
  break;
        case 'get_text_of_property_list_item':
  result = await this.getTextOfPropertyListItem(args.target_property_list_item_required_string);
  break;
        case 'set_text_of_property_list_item':
  result = await this.setTextOfPropertyListItem(args.target_property_list_item_required_string, args.value_required_text);
  break;
        case 'get_value_of_property_list_item':
  result = await this.getValueOfPropertyListItem(args.target_property_list_item_required_string);
  break;
        case 'set_value_of_property_list_item':
  result = await this.setValueOfPropertyListItem(args.target_property_list_item_required_string, args.value_required_any);
  break;
        case 'get_name_of_xml_attribute_of_xml_element_of_xml_data':
  result = await this.getNameOfXmlAttributeOfXmlElementOfXmlData(args.target_xml_attribute_required_string, args.target_xml_element_required_string, args.target_xml_data_required_string);
  break;
        case 'get_value_of_xml_attribute_of_xml_element_of_xml_data':
  result = await this.getValueOfXmlAttributeOfXmlElementOfXmlData(args.target_xml_attribute_required_string, args.target_xml_element_required_string, args.target_xml_data_required_string);
  break;
        case 'set_value_of_xml_attribute_of_xml_element_of_xml_data':
  result = await this.setValueOfXmlAttributeOfXmlElementOfXmlData(args.target_xml_attribute_required_string, args.target_xml_element_required_string, args.target_xml_data_required_string, args.value_required_boolean);
  break;
        case 'get_id_of_xml_data':
  result = await this.getIdOfXmlData(args.target_xml_data_required_string);
  break;
        case 'get_name_of_xml_data':
  result = await this.getNameOfXmlData(args.target_xml_data_required_string);
  break;
        case 'set_name_of_xml_data':
  result = await this.setNameOfXmlData(args.target_xml_data_required_string, args.value_required_text);
  break;
        case 'get_text_of_xml_data':
  result = await this.getTextOfXmlData(args.target_xml_data_required_string);
  break;
        case 'set_text_of_xml_data':
  result = await this.setTextOfXmlData(args.target_xml_data_required_string, args.value_required_text);
  break;
        case 'get_id_of_xml_element_of_xml_data':
  result = await this.getIdOfXmlElementOfXmlData(args.target_xml_element_required_string, args.target_xml_data_required_string);
  break;
        case 'get_name_of_xml_element_of_xml_data':
  result = await this.getNameOfXmlElementOfXmlData(args.target_xml_element_required_string, args.target_xml_data_required_string);
  break;
        case 'get_value_of_xml_element_of_xml_data':
  result = await this.getValueOfXmlElementOfXmlData(args.target_xml_element_required_string, args.target_xml_data_required_string);
  break;
        case 'set_value_of_xml_element_of_xml_data':
  result = await this.setValueOfXmlElementOfXmlData(args.target_xml_element_required_string, args.target_xml_data_required_string, args.value_required_boolean);
  break;
        case 'get_copies_of_print_settings':
  result = await this.getCopiesOfPrintSettings(args.target_print_settings_required_string);
  break;
        case 'set_copies_of_print_settings':
  result = await this.setCopiesOfPrintSettings(args.target_print_settings_required_string, args.value_required_integer);
  break;
        case 'get_collating_of_print_settings':
  result = await this.getCollatingOfPrintSettings(args.target_print_settings_required_string);
  break;
        case 'set_collating_of_print_settings':
  result = await this.setCollatingOfPrintSettings(args.target_print_settings_required_string, args.value_required_boolean);
  break;
        case 'get_starting_page_of_print_settings':
  result = await this.getStartingPageOfPrintSettings(args.target_print_settings_required_string);
  break;
        case 'set_starting_page_of_print_settings':
  result = await this.setStartingPageOfPrintSettings(args.target_print_settings_required_string, args.value_required_integer);
  break;
        case 'get_ending_page_of_print_settings':
  result = await this.getEndingPageOfPrintSettings(args.target_print_settings_required_string);
  break;
        case 'set_ending_page_of_print_settings':
  result = await this.setEndingPageOfPrintSettings(args.target_print_settings_required_string, args.value_required_integer);
  break;
        case 'get_pages_across_of_print_settings':
  result = await this.getPagesAcrossOfPrintSettings(args.target_print_settings_required_string);
  break;
        case 'set_pages_across_of_print_settings':
  result = await this.setPagesAcrossOfPrintSettings(args.target_print_settings_required_string, args.value_required_integer);
  break;
        case 'get_pages_down_of_print_settings':
  result = await this.getPagesDownOfPrintSettings(args.target_print_settings_required_string);
  break;
        case 'set_pages_down_of_print_settings':
  result = await this.setPagesDownOfPrintSettings(args.target_print_settings_required_string, args.value_required_integer);
  break;
        case 'get_requested_print_time_of_print_settings':
  result = await this.getRequestedPrintTimeOfPrintSettings(args.target_print_settings_required_string);
  break;
        case 'set_requested_print_time_of_print_settings':
  result = await this.setRequestedPrintTimeOfPrintSettings(args.target_print_settings_required_string, args.value_required_date);
  break;
        case 'get_error_handling_of_print_settings':
  result = await this.getErrorHandlingOfPrintSettings(args.target_print_settings_required_string);
  break;
        case 'set_error_handling_of_print_settings':
  result = await this.setErrorHandlingOfPrintSettings(args.target_print_settings_required_string, args.value_required_enum);
  break;
        case 'get_fax_number_of_print_settings':
  result = await this.getFaxNumberOfPrintSettings(args.target_print_settings_required_string);
  break;
        case 'set_fax_number_of_print_settings':
  result = await this.setFaxNumberOfPrintSettings(args.target_print_settings_required_string, args.value_required_text);
  break;
        case 'get_target_printer_of_print_settings':
  result = await this.getTargetPrinterOfPrintSettings(args.target_print_settings_required_string);
  break;
        case 'set_target_printer_of_print_settings':
  result = await this.setTargetPrinterOfPrintSettings(args.target_print_settings_required_string, args.value_required_text);
  break;
        case 'attach_action_to':
  result = await this.attachActionTo(args.direct_parameter_required_specifier, args.using_required_text);
  break;
        case 'attached_scripts':
  result = await this.attachedScripts(args.direct_parameter_required_specifier);
  break;
        case 'cancel_for_window_of_process':
  result = await this.cancelForWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'cancel_for_ui_element_of_window_of_process':
  result = await this.cancelForUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'confirm_for_window_of_process':
  result = await this.confirmForWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'confirm_for_ui_element_of_window_of_process':
  result = await this.confirmForUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'decrement_for_window_of_process':
  result = await this.decrementForWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'decrement_for_ui_element_of_window_of_process':
  result = await this.decrementForUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'do_folder_action':
  result = await this.doFolderAction(args.direct_parameter_required_specifier, args.folder_action_code_required_actn, args.with_item_list_optional_any, args.with_window_size_optional_rectangle);
  break;
        case 'edit_action_of':
  result = await this.editActionOf(args.direct_parameter_required_specifier, args.using_action_name_optional_text, args.using_action_number_optional_integer);
  break;
        case 'increment_for_window_of_process':
  result = await this.incrementForWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'increment_for_ui_element_of_window_of_process':
  result = await this.incrementForUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'key_down':
  result = await this.keyDown(args.direct_parameter_required_text);
  break;
        case 'key_up':
  result = await this.keyUp(args.direct_parameter_required_text);
  break;
        case 'pick_for_window_of_process':
  result = await this.pickForWindowOfProcess(args.target_window_required_string, args.target_process_required_string);
  break;
        case 'pick_for_ui_element_of_window_of_process':
  result = await this.pickForUiElementOfWindowOfProcess(args.target_ui_element_required_string, args.target_window_required_string, args.target_process_required_string);
  break;
        case 'remove_action_from':
  result = await this.removeActionFrom(args.direct_parameter_required_specifier, args.using_action_name_optional_text, args.using_action_number_optional_integer);
  break;
        case 'get_scripting_definition_of_application':
  result = await this.getScriptingDefinitionOfApplication();
  break;
        case 'get_name_of_scripting_class_of_scripting_suite_of_scripting':
  result = await this.getNameOfScriptingClassOfScriptingSuiteOfScripting(args.target_scripting_class_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_id_of_scripting_class_of_scripting_suite_of_scripting':
  result = await this.getIdOfScriptingClassOfScriptingSuiteOfScripting(args.target_scripting_class_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_description_of_scripting_class_of_scripting_suite_of':
  result = await this.getDescriptionOfScriptingClassOfScriptingSuiteOf(args.target_scripting_class_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_hidden_of_scripting_class_of_scripting_suite_of_scripting':
  result = await this.getHiddenOfScriptingClassOfScriptingSuiteOfScripting(args.target_scripting_class_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_plural_name_of_scripting_class_of_scripting_suite_of':
  result = await this.getPluralNameOfScriptingClassOfScriptingSuiteOf(args.target_scripting_class_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_suite_name_of_scripting_class_of_scripting_suite_of':
  result = await this.getSuiteNameOfScriptingClassOfScriptingSuiteOf(args.target_scripting_class_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_superclass_of_scripting_class_of_scripting_suite_of':
  result = await this.getSuperclassOfScriptingClassOfScriptingSuiteOf(args.target_scripting_class_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_name_of_scripting_command_of_scripting_suite_of_scripting':
  result = await this.getNameOfScriptingCommandOfScriptingSuiteOfScripting(args.target_scripting_command_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_id_of_scripting_command_of_scripting_suite_of_scripting':
  result = await this.getIdOfScriptingCommandOfScriptingSuiteOfScripting(args.target_scripting_command_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_description_of_scripting_command_of_scripting_suite_of':
  result = await this.getDescriptionOfScriptingCommandOfScriptingSuiteOf(args.target_scripting_command_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_direct_parameter_of_scripting_command_of_scripting_suite_of':
  result = await this.getDirectParameterOfScriptingCommandOfScriptingSuiteOf(args.target_scripting_command_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_hidden_of_scripting_command_of_scripting_suite_of_scripting':
  result = await this.getHiddenOfScriptingCommandOfScriptingSuiteOfScripting(args.target_scripting_command_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_scripting_result_of_scripting_command_of_scripting_suite_of':
  result = await this.getScriptingResultOfScriptingCommandOfScriptingSuiteOf(args.target_scripting_command_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_suite_name_of_scripting_command_of_scripting_suite_of':
  result = await this.getSuiteNameOfScriptingCommandOfScriptingSuiteOf(args.target_scripting_command_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_name_of_scripting_enumeration_of_scripting_suite_of':
  result = await this.getNameOfScriptingEnumerationOfScriptingSuiteOf(args.target_scripting_enumeration_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_id_of_scripting_enumeration_of_scripting_suite_of_scripting':
  result = await this.getIdOfScriptingEnumerationOfScriptingSuiteOfScripting(args.target_scripting_enumeration_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_hidden_of_scripting_enumeration_of_scripting_suite_of':
  result = await this.getHiddenOfScriptingEnumerationOfScriptingSuiteOf(args.target_scripting_enumeration_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_name_of_scripting_enumerator_of_scripting_enumeration_of':
  result = await this.getNameOfScriptingEnumeratorOfScriptingEnumerationOf(args.target_scripting_enumerator_required_string, args.target_scripting_enumeration_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_id_of_scripting_enumerator_of_scripting_enumeration_of':
  result = await this.getIdOfScriptingEnumeratorOfScriptingEnumerationOf(args.target_scripting_enumerator_required_string, args.target_scripting_enumeration_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_description_of_scripting_enumerator_of_scripting':
  result = await this.getDescriptionOfScriptingEnumeratorOfScripting(args.target_scripting_enumerator_required_string, args.target_scripting_enumeration_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_hidden_of_scripting_enumerator_of_scripting_enumeration_of':
  result = await this.getHiddenOfScriptingEnumeratorOfScriptingEnumerationOf(args.target_scripting_enumerator_required_string, args.target_scripting_enumeration_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_name_of_scripting_parameter_of_scripting_command_of':
  result = await this.getNameOfScriptingParameterOfScriptingCommandOf(args.target_scripting_parameter_required_string, args.target_scripting_command_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_id_of_scripting_parameter_of_scripting_command_of_scripting':
  result = await this.getIdOfScriptingParameterOfScriptingCommandOfScripting(args.target_scripting_parameter_required_string, args.target_scripting_command_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_description_of_scripting_parameter_of_scripting_command_of':
  result = await this.getDescriptionOfScriptingParameterOfScriptingCommandOf(args.target_scripting_parameter_required_string, args.target_scripting_command_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_hidden_of_scripting_parameter_of_scripting_command_of':
  result = await this.getHiddenOfScriptingParameterOfScriptingCommandOf(args.target_scripting_parameter_required_string, args.target_scripting_command_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_kind_of_scripting_parameter_of_scripting_command_of':
  result = await this.getKindOfScriptingParameterOfScriptingCommandOf(args.target_scripting_parameter_required_string, args.target_scripting_command_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_optional_of_scripting_parameter_of_scripting_command_of':
  result = await this.getOptionalOfScriptingParameterOfScriptingCommandOf(args.target_scripting_parameter_required_string, args.target_scripting_command_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_name_of_scripting_property_of_scripting_class_of_scripting':
  result = await this.getNameOfScriptingPropertyOfScriptingClassOfScripting(args.target_scripting_property_required_string, args.target_scripting_class_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_id_of_scripting_property_of_scripting_class_of_scripting':
  result = await this.getIdOfScriptingPropertyOfScriptingClassOfScripting(args.target_scripting_property_required_string, args.target_scripting_class_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_access_of_scripting_property_of_scripting_class_of':
  result = await this.getAccessOfScriptingPropertyOfScriptingClassOf(args.target_scripting_property_required_string, args.target_scripting_class_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_description_of_scripting_property_of_scripting_class_of':
  result = await this.getDescriptionOfScriptingPropertyOfScriptingClassOf(args.target_scripting_property_required_string, args.target_scripting_class_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_enumerated_of_scripting_property_of_scripting_class_of':
  result = await this.getEnumeratedOfScriptingPropertyOfScriptingClassOf(args.target_scripting_property_required_string, args.target_scripting_class_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_hidden_of_scripting_property_of_scripting_class_of':
  result = await this.getHiddenOfScriptingPropertyOfScriptingClassOf(args.target_scripting_property_required_string, args.target_scripting_class_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_kind_of_scripting_property_of_scripting_class_of_scripting':
  result = await this.getKindOfScriptingPropertyOfScriptingClassOfScripting(args.target_scripting_property_required_string, args.target_scripting_class_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_listed_of_scripting_property_of_scripting_class_of':
  result = await this.getListedOfScriptingPropertyOfScriptingClassOf(args.target_scripting_property_required_string, args.target_scripting_class_required_string, args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_description_of_scripting_result_object':
  result = await this.getDescriptionOfScriptingResultObject(args.target_scripting_result_object_required_string);
  break;
        case 'get_enumerated_of_scripting_result_object':
  result = await this.getEnumeratedOfScriptingResultObject(args.target_scripting_result_object_required_string);
  break;
        case 'get_kind_of_scripting_result_object':
  result = await this.getKindOfScriptingResultObject(args.target_scripting_result_object_required_string);
  break;
        case 'get_listed_of_scripting_result_object':
  result = await this.getListedOfScriptingResultObject(args.target_scripting_result_object_required_string);
  break;
        case 'get_name_of_scripting_suite_of_scripting_definition_object':
  result = await this.getNameOfScriptingSuiteOfScriptingDefinitionObject(args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_id_of_scripting_suite_of_scripting_definition_object':
  result = await this.getIdOfScriptingSuiteOfScriptingDefinitionObject(args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_description_of_scripting_suite_of_scripting_definition':
  result = await this.getDescriptionOfScriptingSuiteOfScriptingDefinition(args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        case 'get_hidden_of_scripting_suite_of_scripting_definition_object':
  result = await this.getHiddenOfScriptingSuiteOfScriptingDefinitionObject(args.target_scripting_suite_required_string, args.target_scripting_definition_object_required_string);
  break;
        default:
          throw new Error(`Unknown tool: ${name}`);
      }

      const response = {
        jsonrpc: '2.0',
        id: request.id,
        result: {
          content: [{
            type: 'text',
            text: JSON.stringify(result, null, 2)
          }]
        }
      };
      this.sendResponse(response);

    } catch (error) {
      console.error(`Error in tool '${request.params.name}':`, error);
      const errorResponse = {
        jsonrpc: '2.0',
        id: request.id,
        result: {
          content: [{
            type: 'text',
            text: JSON.stringify({
              success: false,
              error: error.message,
              tool: request.params.name,
              args: request.params.arguments
            }, null, 2)
          }]
        }
      };
      this.sendResponse(errorResponse);
    }
  }

  async openFile(direct_parameter_required_file) {
    if (direct_parameter_required_file === undefined || direct_parameter_required_file === null) {
      throw new Error("direct_parameter_required_file is required");
    }

    const castedDirect_parameter = direct_parameter_required_file ? castAndEscape(direct_parameter_required_file) : null;

    const script = `
      tell application "System Events"
        open "${castedDirect_parameter}"
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_file || null
    };
  }

  async openFile(direct_parameter_required_list_of_file) {
    if (direct_parameter_required_list_of_file === undefined || direct_parameter_required_list_of_file === null) {
      throw new Error("direct_parameter_required_list_of_file is required");
    }

    const castedDirect_parameter = direct_parameter_required_list_of_file ? castAndEscape(direct_parameter_required_list_of_file) : null;

    const script = `
      tell application "System Events"
        open ${castedDirect_parameter}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_list_of_file || null
    };
  }

  async closeForWindowOfProcess(target_window_required_string, target_process_required_string, saving_optional_save_options, saving_in_optional_file) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const castedWindow = castAndEscape(target_window_required_string);
    const castedProcess = castAndEscape(target_process_required_string);
    const castedSaving = saving_optional_save_options ? castAndEscape(saving_optional_save_options) : null;
    const valueForScriptSaving = castedSaving && typeof castedSaving === 'string' && !castedSaving.startsWith('{') && !castedSaving.startsWith('date') ? `"${castedSaving.replace(/"/g, "'")}"` : castedSaving;
    const castedSaving_in = saving_in_optional_file ? castAndEscape(saving_in_optional_file) : null;
    const valueForScriptSaving_in = castedSaving_in && typeof castedSaving_in === 'string' && !castedSaving_in.startsWith('{') && !castedSaving_in.startsWith('date') ? `"${castedSaving_in.replace(/"/g, "'")}"` : castedSaving_in;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell (${castedWindow} of ${castedProcess})
          close it${saving_optional_save_options ? ' saving ' + valueForScriptSaving : ''}${saving_in_optional_file ? ' saving in ' + valueForScriptSaving_in : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string,
      saving: saving_optional_save_options || null,
      saving_in: saving_in_optional_file || null
    };
  }

  async closeForDocument(target_document_required_string, saving_optional_save_options, saving_in_optional_file) {
    if (!target_document_required_string || typeof target_document_required_string !== "string") {
      throw new Error("target_document_required_string is required and must be a string");
    }

    const castedDocument = castAndEscape(target_document_required_string);
    const castedSaving = saving_optional_save_options ? castAndEscape(saving_optional_save_options) : null;
    const valueForScriptSaving = castedSaving && typeof castedSaving === 'string' && !castedSaving.startsWith('{') && !castedSaving.startsWith('date') ? `"${castedSaving.replace(/"/g, "'")}"` : castedSaving;
    const castedSaving_in = saving_in_optional_file ? castAndEscape(saving_in_optional_file) : null;
    const valueForScriptSaving_in = castedSaving_in && typeof castedSaving_in === 'string' && !castedSaving_in.startsWith('{') && !castedSaving_in.startsWith('date') ? `"${castedSaving_in.replace(/"/g, "'")}"` : castedSaving_in;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedDocument}
          close it${saving_optional_save_options ? ' saving ' + valueForScriptSaving : ''}${saving_in_optional_file ? ' saving in ' + valueForScriptSaving_in : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      document: target_document_required_string,
      saving: saving_optional_save_options || null,
      saving_in: saving_in_optional_file || null
    };
  }

  async saveForWindowOfProcess(target_window_required_string, target_process_required_string, inParam_optional_file, as_optional_saveable_file_format) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const castedWindow = castAndEscape(target_window_required_string);
    const castedProcess = castAndEscape(target_process_required_string);
    const castedIn = inParam_optional_file ? castAndEscape(inParam_optional_file) : null;
    const valueForScriptIn = castedIn && typeof castedIn === 'string' && !castedIn.startsWith('{') && !castedIn.startsWith('date') ? `"${castedIn.replace(/"/g, "'")}"` : castedIn;
    const castedAs = as_optional_saveable_file_format ? castAndEscape(as_optional_saveable_file_format) : null;
    const valueForScriptAs = castedAs && typeof castedAs === 'string' && !castedAs.startsWith('{') && !castedAs.startsWith('date') ? `"${castedAs.replace(/"/g, "'")}"` : castedAs;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell (${castedWindow} of ${castedProcess})
          save it${inParam_optional_file ? ' in ' + valueForScriptIn : ''}${as_optional_saveable_file_format ? ' as ' + valueForScriptAs : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string,
      in: inParam_optional_file || null,
      as: as_optional_saveable_file_format || null
    };
  }

  async saveForDocument(target_document_required_string, inParam_optional_file, as_optional_saveable_file_format) {
    if (!target_document_required_string || typeof target_document_required_string !== "string") {
      throw new Error("target_document_required_string is required and must be a string");
    }

    const castedDocument = castAndEscape(target_document_required_string);
    const castedIn = inParam_optional_file ? castAndEscape(inParam_optional_file) : null;
    const valueForScriptIn = castedIn && typeof castedIn === 'string' && !castedIn.startsWith('{') && !castedIn.startsWith('date') ? `"${castedIn.replace(/"/g, "'")}"` : castedIn;
    const castedAs = as_optional_saveable_file_format ? castAndEscape(as_optional_saveable_file_format) : null;
    const valueForScriptAs = castedAs && typeof castedAs === 'string' && !castedAs.startsWith('{') && !castedAs.startsWith('date') ? `"${castedAs.replace(/"/g, "'")}"` : castedAs;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedDocument}
          save it${inParam_optional_file ? ' in ' + valueForScriptIn : ''}${as_optional_saveable_file_format ? ' as ' + valueForScriptAs : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      document: target_document_required_string,
      in: inParam_optional_file || null,
      as: as_optional_saveable_file_format || null
    };
  }

  async printFile(direct_parameter_required_list_of_file, with_properties_optional_print_settings, print_dialog_optional_boolean) {
    if (direct_parameter_required_list_of_file === undefined || direct_parameter_required_list_of_file === null) {
      throw new Error("direct_parameter_required_list_of_file is required");
    }

    const castedDirect_parameter = direct_parameter_required_list_of_file ? castAndEscape(direct_parameter_required_list_of_file) : null;
    const castedWith_properties = with_properties_optional_print_settings ? castAndEscape(with_properties_optional_print_settings) : null;
    const castedPrint_dialog = print_dialog_optional_boolean ? castAndEscape(print_dialog_optional_boolean) : null;

    const script = `
      tell application "System Events"
        print ${castedDirect_parameter}${with_properties_optional_print_settings ? ' with properties ' + castedWith_properties : ''}${print_dialog_optional_boolean ? ' print dialog ' + castedPrint_dialog : ''}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_list_of_file || null,
      with_properties: with_properties_optional_print_settings || null,
      print_dialog: print_dialog_optional_boolean || null
    };
  }

  async printForWindowOfProcess(target_window_required_string, target_process_required_string, with_properties_optional_print_settings, print_dialog_optional_boolean) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const castedWindow = castAndEscape(target_window_required_string);
    const castedProcess = castAndEscape(target_process_required_string);
    const castedWith_properties = with_properties_optional_print_settings ? castAndEscape(with_properties_optional_print_settings) : null;
    const valueForScriptWith_properties = castedWith_properties && typeof castedWith_properties === 'string' && !castedWith_properties.startsWith('{') && !castedWith_properties.startsWith('date') ? `"${castedWith_properties.replace(/"/g, "'")}"` : castedWith_properties;
    const castedPrint_dialog = print_dialog_optional_boolean ? castAndEscape(print_dialog_optional_boolean) : null;
    const valueForScriptPrint_dialog = castedPrint_dialog && typeof castedPrint_dialog === 'string' && !castedPrint_dialog.startsWith('{') && !castedPrint_dialog.startsWith('date') ? `"${castedPrint_dialog.replace(/"/g, "'")}"` : castedPrint_dialog;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell (${castedWindow} of ${castedProcess})
          print it${with_properties_optional_print_settings ? ' with properties ' + valueForScriptWith_properties : ''}${print_dialog_optional_boolean ? ' print dialog ' + valueForScriptPrint_dialog : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string,
      with_properties: with_properties_optional_print_settings || null,
      print_dialog: print_dialog_optional_boolean || null
    };
  }

  async printForDocument(target_document_required_string, with_properties_optional_print_settings, print_dialog_optional_boolean) {
    if (!target_document_required_string || typeof target_document_required_string !== "string") {
      throw new Error("target_document_required_string is required and must be a string");
    }

    const castedDocument = castAndEscape(target_document_required_string);
    const castedWith_properties = with_properties_optional_print_settings ? castAndEscape(with_properties_optional_print_settings) : null;
    const valueForScriptWith_properties = castedWith_properties && typeof castedWith_properties === 'string' && !castedWith_properties.startsWith('{') && !castedWith_properties.startsWith('date') ? `"${castedWith_properties.replace(/"/g, "'")}"` : castedWith_properties;
    const castedPrint_dialog = print_dialog_optional_boolean ? castAndEscape(print_dialog_optional_boolean) : null;
    const valueForScriptPrint_dialog = castedPrint_dialog && typeof castedPrint_dialog === 'string' && !castedPrint_dialog.startsWith('{') && !castedPrint_dialog.startsWith('date') ? `"${castedPrint_dialog.replace(/"/g, "'")}"` : castedPrint_dialog;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedDocument}
          print it${with_properties_optional_print_settings ? ' with properties ' + valueForScriptWith_properties : ''}${print_dialog_optional_boolean ? ' print dialog ' + valueForScriptPrint_dialog : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      document: target_document_required_string,
      with_properties: with_properties_optional_print_settings || null,
      print_dialog: print_dialog_optional_boolean || null
    };
  }

  async quit(saving_optional_save_options) {
    const castedSaving = saving_optional_save_options ? castAndEscape(saving_optional_save_options) : null;

    const script = `
      tell application "System Events"
        quit${saving_optional_save_options ? ' saving ' + castedSaving : ''}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      saving: saving_optional_save_options || null
    };
  }

  async countSecurityPreferencesObject() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each security preferences object 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countClassicDomainObject() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each Classic domain object 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countXmlAttributeOfXmlElement(target_xml_element_required_string) {
    if (!target_xml_element_required_string || typeof target_xml_element_required_string !== "string") {
      throw new Error("target_xml_element_required_string is required and must be a string");
    }

    const castedXmlElement = castAndEscape(target_xml_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedXmlElement}
          count each XML attribute of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      xml_element: target_xml_element_required_string
    };
  }

  async countBrowserOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each browser of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countPopOverOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each pop over of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countSliderOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each slider of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countAppearancePreferencesObject() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each appearance preferences object 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countBusyIndicatorOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each busy indicator of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countDockPreferencesObject() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each dock preferences object 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countGroupOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each group of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countRadioGroupOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each radio group of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countScriptingResultObject() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each scripting result object 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countCdAndDvdPreferencesObject() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each CD and DVD preferences object 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countScreenSaverPreferencesObject() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each screen saver preferences object 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countTableOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each table of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countRadioButtonOfRadioGroup(target_radio_group_required_string) {
    if (!target_radio_group_required_string || typeof target_radio_group_required_string !== "string") {
      throw new Error("target_radio_group_required_string is required and must be a string");
    }

    const castedRadioGroup = castAndEscape(target_radio_group_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedRadioGroup}
          count each radio button of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      radio_group: target_radio_group_required_string
    };
  }

  async countGrowAreaOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each grow area of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countScriptingEnumerationOfScriptingSuite(target_scripting_suite_required_string) {
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }

    const castedScriptingSuite = castAndEscape(target_scripting_suite_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedScriptingSuite}
          count each scripting enumeration of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      scripting_suite: target_scripting_suite_required_string
    };
  }

  async countScrollBarOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each scroll bar of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countScriptingPropertyOfScriptingClass(target_scripting_class_required_string) {
    if (!target_scripting_class_required_string || typeof target_scripting_class_required_string !== "string") {
      throw new Error("target_scripting_class_required_string is required and must be a string");
    }

    const castedScriptingClass = castAndEscape(target_scripting_class_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedScriptingClass}
          count each scripting property of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      scripting_class: target_scripting_class_required_string
    };
  }

  async countAttributeOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each attribute of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countMenuBarItemOfMenuBar(target_menu_bar_required_string) {
    if (!target_menu_bar_required_string || typeof target_menu_bar_required_string !== "string") {
      throw new Error("target_menu_bar_required_string is required and must be a string");
    }

    const castedMenuBar = castAndEscape(target_menu_bar_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedMenuBar}
          count each menu bar item of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      menu_bar: target_menu_bar_required_string
    };
  }

  async countListOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each list of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countDisk() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each disk 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countLocationOfNetworkPreferencesObject(target_network_preferences_object_required_string) {
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }

    const castedNetworkPreferencesObject = castAndEscape(target_network_preferences_object_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedNetworkPreferencesObject}
          count each location of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async countAliasOfDisk(target_disk_required_string) {
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const castedDisk = castAndEscape(target_disk_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedDisk}
          count each alias of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      disk: target_disk_required_string
    };
  }

  async countStaticTextOfGroup(target_group_required_string) {
    if (!target_group_required_string || typeof target_group_required_string !== "string") {
      throw new Error("target_group_required_string is required and must be a string");
    }

    const castedGroup = castAndEscape(target_group_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedGroup}
          count each static text of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      group: target_group_required_string
    };
  }

  async countScriptingDefinitionObject() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each scripting definition object 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countServiceOfLocation(target_location_required_string) {
    if (!target_location_required_string || typeof target_location_required_string !== "string") {
      throw new Error("target_location_required_string is required and must be a string");
    }

    const castedLocation = castAndEscape(target_location_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedLocation}
          count each service of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      location: target_location_required_string
    };
  }

  async countScreenSaver() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each screen saver 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countMenuItemOfMenu(target_menu_required_string) {
    if (!target_menu_required_string || typeof target_menu_required_string !== "string") {
      throw new Error("target_menu_required_string is required and must be a string");
    }

    const castedMenu = castAndEscape(target_menu_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedMenu}
          count each menu item of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      menu: target_menu_required_string
    };
  }

  async countLocalDomainObject() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each local domain object 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countTextAreaOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each text area of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countValueIndicatorOfScrollBar(target_scroll_bar_required_string) {
    if (!target_scroll_bar_required_string || typeof target_scroll_bar_required_string !== "string") {
      throw new Error("target_scroll_bar_required_string is required and must be a string");
    }

    const castedScrollBar = castAndEscape(target_scroll_bar_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedScrollBar}
          count each value indicator of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      scroll_bar: target_scroll_bar_required_string
    };
  }

  async countProgressIndicatorOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each progress indicator of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countScriptingElementOfScriptingClass(target_scripting_class_required_string) {
    if (!target_scripting_class_required_string || typeof target_scripting_class_required_string !== "string") {
      throw new Error("target_scripting_class_required_string is required and must be a string");
    }

    const castedScriptingClass = castAndEscape(target_scripting_class_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedScriptingClass}
          count each scripting element of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      scripting_class: target_scripting_class_required_string
    };
  }

  async countDrawerOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each drawer of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countTabGroupOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each tab group of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countSystemDomainObject() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each system domain object 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countWindowOfProcess(target_process_required_string) {
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const castedProcess = castAndEscape(target_process_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedProcess}
          count each window of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      process: target_process_required_string
    };
  }

  async countNetworkPreferencesObject() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each network preferences object 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countOutlineOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each outline of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countPopUpButtonOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each pop up button of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countSplitterGroupOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each splitter group of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countActionOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each action of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countDiskItemOfAlias(target_alias_required_string) {
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }

    const castedAlias = castAndEscape(target_alias_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedAlias}
          count each disk item of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      alias: target_alias_required_string
    };
  }

  async countFilePackageOfAlias(target_alias_required_string) {
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }

    const castedAlias = castAndEscape(target_alias_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedAlias}
          count each file package of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      alias: target_alias_required_string
    };
  }

  async countProcess() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each process 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countScriptingParameterOfScriptingCommand(target_scripting_command_required_string) {
    if (!target_scripting_command_required_string || typeof target_scripting_command_required_string !== "string") {
      throw new Error("target_scripting_command_required_string is required and must be a string");
    }

    const castedScriptingCommand = castAndEscape(target_scripting_command_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedScriptingCommand}
          count each scripting parameter of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      scripting_command: target_scripting_command_required_string
    };
  }

  async countInsertionPreference() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each insertion preference 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countScriptingClassOfScriptingSuite(target_scripting_suite_required_string) {
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }

    const castedScriptingSuite = castAndEscape(target_scripting_suite_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedScriptingSuite}
          count each scripting class of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      scripting_suite: target_scripting_suite_required_string
    };
  }

  async countConfigurationOfService(target_service_required_string) {
    if (!target_service_required_string || typeof target_service_required_string !== "string") {
      throw new Error("target_service_required_string is required and must be a string");
    }

    const castedService = castAndEscape(target_service_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedService}
          count each configuration of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      service: target_service_required_string
    };
  }

  async countUiElementOfWindow(target_window_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }

    const castedWindow = castAndEscape(target_window_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedWindow}
          count each UI element of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      window: target_window_required_string
    };
  }

  async countPropertyListItem() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each property list item 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countDomain() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each domain 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countMenuBarOfProcess(target_process_required_string) {
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const castedProcess = castAndEscape(target_process_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedProcess}
          count each menu bar of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      process: target_process_required_string
    };
  }

  async countColorWellOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each color well of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countScriptingCommandOfScriptingSuite(target_scripting_suite_required_string) {
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }

    const castedScriptingSuite = castAndEscape(target_scripting_suite_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedScriptingSuite}
          count each scripting command of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      scripting_suite: target_scripting_suite_required_string
    };
  }

  async countButtonOfScrollBar(target_scroll_bar_required_string) {
    if (!target_scroll_bar_required_string || typeof target_scroll_bar_required_string !== "string") {
      throw new Error("target_scroll_bar_required_string is required and must be a string");
    }

    const castedScrollBar = castAndEscape(target_scroll_bar_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedScrollBar}
          count each button of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      scroll_bar: target_scroll_bar_required_string
    };
  }

  async countApplicationProcess() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each application process 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countToolbarOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each toolbar of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countDesktop() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each desktop 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countUserDomainObject() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each user domain object 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countImageOfStaticText(target_static_text_required_string) {
    if (!target_static_text_required_string || typeof target_static_text_required_string !== "string") {
      throw new Error("target_static_text_required_string is required and must be a string");
    }

    const castedStaticText = castAndEscape(target_static_text_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedStaticText}
          count each image of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      static_text: target_static_text_required_string
    };
  }

  async countLoginItem() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each login item 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countUser() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each user 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countRelevanceIndicatorOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each relevance indicator of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countScriptingSuiteOfScriptingDefinitionObject(target_scripting_definition_object_required_string) {
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const castedScriptingDefinitionObject = castAndEscape(target_scripting_definition_object_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedScriptingDefinitionObject}
          count each scripting suite of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async countXmlElementOfXmlData(target_xml_data_required_string) {
    if (!target_xml_data_required_string || typeof target_xml_data_required_string !== "string") {
      throw new Error("target_xml_data_required_string is required and must be a string");
    }

    const castedXmlData = castAndEscape(target_xml_data_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedXmlData}
          count each XML element of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      xml_data: target_xml_data_required_string
    };
  }

  async countPrintSettings() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each print settings 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countXmlFile() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each XML file 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countMenuOfMenuBar(target_menu_bar_required_string) {
    if (!target_menu_bar_required_string || typeof target_menu_bar_required_string !== "string") {
      throw new Error("target_menu_bar_required_string is required and must be a string");
    }

    const castedMenuBar = castAndEscape(target_menu_bar_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedMenuBar}
          count each menu of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      menu_bar: target_menu_bar_required_string
    };
  }

  async countComboBoxOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each combo box of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countXmlData() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each XML data 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countSheetOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each sheet of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countTextFieldOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each text field of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countScriptingEnumeratorOfScriptingEnumeration(target_scripting_enumeration_required_string) {
    if (!target_scripting_enumeration_required_string || typeof target_scripting_enumeration_required_string !== "string") {
      throw new Error("target_scripting_enumeration_required_string is required and must be a string");
    }

    const castedScriptingEnumeration = castAndEscape(target_scripting_enumeration_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedScriptingEnumeration}
          count each scripting enumerator of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      scripting_enumeration: target_scripting_enumeration_required_string
    };
  }

  async countInterfaceOfNetworkPreferencesObject(target_network_preferences_object_required_string) {
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }

    const castedNetworkPreferencesObject = castAndEscape(target_network_preferences_object_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedNetworkPreferencesObject}
          count each interface of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async countRowOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each row of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countDocument() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each document 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countIncrementorOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each incrementor of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countFileOfAlias(target_alias_required_string) {
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }

    const castedAlias = castAndEscape(target_alias_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedAlias}
          count each file of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      alias: target_alias_required_string
    };
  }

  async countFolderOfAlias(target_alias_required_string) {
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }

    const castedAlias = castAndEscape(target_alias_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedAlias}
          count each folder of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      alias: target_alias_required_string
    };
  }

  async countNetworkDomainObject() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each network domain object 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countDeskAccessoryProcess() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each desk accessory process 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countScrollAreaOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each scroll area of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countColumnOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each column of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countPropertyListFile() {


    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        count each property list file 
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async countMenuButtonOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each menu button of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countSplitterOfUiElement(target_ui_element_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          count each splitter of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string
    };
  }

  async countCheckboxOfGroup(target_group_required_string) {
    if (!target_group_required_string || typeof target_group_required_string !== "string") {
      throw new Error("target_group_required_string is required and must be a string");
    }

    const castedGroup = castAndEscape(target_group_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedGroup}
          count each checkbox of it 
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      group: target_group_required_string
    };
  }

  async deleteForDisk(target_disk_required_string) {
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const castedDisk = castAndEscape(target_disk_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedDisk}
          delete it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      disk: target_disk_required_string
    };
  }

  async deleteForAliasOfDisk(target_alias_required_string, target_disk_required_string) {
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const castedAlias = castAndEscape(target_alias_required_string);
    const castedDisk = castAndEscape(target_disk_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell (${castedAlias} of ${castedDisk})
          delete it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async deleteForFilePackageOfAliasOfDisk(target_file_package_required_string, target_alias_required_string, target_disk_required_string) {
    if (!target_file_package_required_string || typeof target_file_package_required_string !== "string") {
      throw new Error("target_file_package_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const castedFilePackage = castAndEscape(target_file_package_required_string);
    const castedAlias = castAndEscape(target_alias_required_string);
    const castedDisk = castAndEscape(target_disk_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell (${castedFilePackage} of ${castedAlias} of ${castedDisk})
          delete it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      file_package: target_file_package_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async deleteForFolderOfAliasOfDisk(target_folder_required_string, target_alias_required_string, target_disk_required_string) {
    if (!target_folder_required_string || typeof target_folder_required_string !== "string") {
      throw new Error("target_folder_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const castedFolder = castAndEscape(target_folder_required_string);
    const castedAlias = castAndEscape(target_alias_required_string);
    const castedDisk = castAndEscape(target_disk_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell (${castedFolder} of ${castedAlias} of ${castedDisk})
          delete it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      folder: target_folder_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async duplicate(direct_parameter_required_specifier, to_optional_location_specifier, with_properties_optional_record) {
    if (direct_parameter_required_specifier === undefined || direct_parameter_required_specifier === null) {
      throw new Error("direct_parameter_required_specifier is required");
    }

    const castedDirect_parameter = direct_parameter_required_specifier ? castAndEscape(direct_parameter_required_specifier) : null;
    const castedTo = to_optional_location_specifier ? castAndEscape(to_optional_location_specifier) : null;
    const castedWith_properties = with_properties_optional_record ? castAndEscape(with_properties_optional_record) : null;

    const script = `
      tell application "System Events"
        duplicate ${castedDirect_parameter}${to_optional_location_specifier ? ' to ' + castedTo : ''}${with_properties_optional_record ? ' with properties ' + castedWith_properties : ''}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_specifier || null,
      to: to_optional_location_specifier || null,
      with_properties: with_properties_optional_record || null
    };
  }

  async exists(direct_parameter_required_any) {
    if (direct_parameter_required_any === undefined || direct_parameter_required_any === null) {
      throw new Error("direct_parameter_required_any is required");
    }

    const castedDirect_parameter = direct_parameter_required_any ? castAndEscape(direct_parameter_required_any) : null;

    const script = `
      tell application "System Events"
        exists ${castedDirect_parameter}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_any || null
    };
  }

  async makeSecurityPreferencesObject(at_optional_location_specifier, with_data_optional_any, with_properties_optional_integer_log_out_when_inactive_interval, with_properties_optional_boolean_automatic_login, with_properties_optional_boolean_log_out_when_inactive, with_properties_optional_boolean_require_password_to_wake, with_properties_optional_boolean_require_password_to_unlock, with_properties_optional_boolean_secure_virtual_memory) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;
    const castedWith_properties_optional_integer_log_out_when_inactive_interval = with_properties_optional_integer_log_out_when_inactive_interval ? castAndEscape(with_properties_optional_integer_log_out_when_inactive_interval) : null;
    const castedWith_properties_optional_boolean_automatic_login = with_properties_optional_boolean_automatic_login ? castAndEscape(with_properties_optional_boolean_automatic_login) : null;
    const castedWith_properties_optional_boolean_log_out_when_inactive = with_properties_optional_boolean_log_out_when_inactive ? castAndEscape(with_properties_optional_boolean_log_out_when_inactive) : null;
    const castedWith_properties_optional_boolean_require_password_to_wake = with_properties_optional_boolean_require_password_to_wake ? castAndEscape(with_properties_optional_boolean_require_password_to_wake) : null;
    const castedWith_properties_optional_boolean_require_password_to_unlock = with_properties_optional_boolean_require_password_to_unlock ? castAndEscape(with_properties_optional_boolean_require_password_to_unlock) : null;
    const castedWith_properties_optional_boolean_secure_virtual_memory = with_properties_optional_boolean_secure_virtual_memory ? castAndEscape(with_properties_optional_boolean_secure_virtual_memory) : null;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new security preferences object ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}${buildPropertiesRecord([{param: 'with_properties_optional_integer_log_out_when_inactive_interval', prop: 'log out when inactive interval', value: with_properties_optional_integer_log_out_when_inactive_interval, type: 'integer'}, {param: 'with_properties_optional_boolean_automatic_login', prop: 'automatic login', value: with_properties_optional_boolean_automatic_login, type: 'boolean'}, {param: 'with_properties_optional_boolean_log_out_when_inactive', prop: 'log out when inactive', value: with_properties_optional_boolean_log_out_when_inactive, type: 'boolean'}, {param: 'with_properties_optional_boolean_require_password_to_wake', prop: 'require password to wake', value: with_properties_optional_boolean_require_password_to_wake, type: 'boolean'}, {param: 'with_properties_optional_boolean_require_password_to_unlock', prop: 'require password to unlock', value: with_properties_optional_boolean_require_password_to_unlock, type: 'boolean'}, {param: 'with_properties_optional_boolean_secure_virtual_memory', prop: 'secure virtual memory', value: with_properties_optional_boolean_secure_virtual_memory, type: 'boolean'}])}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null,
      log_out_when_inactive_interval: with_properties_optional_integer_log_out_when_inactive_interval || null,
      automatic_login: with_properties_optional_boolean_automatic_login || null,
      log_out_when_inactive: with_properties_optional_boolean_log_out_when_inactive || null,
      require_password_to_wake: with_properties_optional_boolean_require_password_to_wake || null,
      require_password_to_unlock: with_properties_optional_boolean_require_password_to_unlock || null,
      secure_virtual_memory: with_properties_optional_boolean_secure_virtual_memory || null
    };
  }

  async makeClassicDomainObject(at_optional_location_specifier, with_data_optional_any) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new Classic domain object ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null
    };
  }

  async makeXmlAttributeOfXmlElement(at_required_location_specifier_xml_element, with_data_optional_any, with_properties_optional_missing_value_value) {
    if (!at_required_location_specifier_xml_element || typeof at_required_location_specifier_xml_element !== "string") {
      throw new Error("at_required_location_specifier_xml_element is required and must be a string");
    }

    const castedXmlElement = castAndEscape(at_required_location_specifier_xml_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;
    const castedWith_properties_optional_missing_value_value = with_properties_optional_missing_value_value ? castAndEscape(with_properties_optional_missing_value_value) : null;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedXmlElement}
          make new XML attribute at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}${buildPropertiesRecord([{param: 'with_properties_optional_missing_value_value', prop: 'value', value: with_properties_optional_missing_value_value, type: 'missing value'}])}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      xml_element: at_required_location_specifier_xml_element,
      with_data: with_data_optional_any || null,
      value: with_properties_optional_missing_value_value || null
    };
  }

  async makeBrowserOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new browser at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makePopOverOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new pop over at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makeSliderOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new slider at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makeAppearancePreferencesObject(at_optional_location_specifier, with_data_optional_any, with_properties_optional_integer_recent_applications_limit, with_properties_optional_fontsmoothingstyles_font_smoothing_style, with_properties_optional_appearances_appearance, with_properties_optional_integer_recent_servers_limit, with_properties_optional_scrollpagebehaviors_scroll_bar_action, with_properties_optional_boolean_smooth_scrolling, with_properties_optional_integer_recent_documents_limit, with_properties_optional_boolean_font_smoothing, with_properties_optional_missing_value_highlight_color, with_properties_optional_boolean_dark_mode) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;
    const castedWith_properties_optional_integer_recent_applications_limit = with_properties_optional_integer_recent_applications_limit ? castAndEscape(with_properties_optional_integer_recent_applications_limit) : null;
    const castedWith_properties_optional_fontsmoothingstyles_font_smoothing_style = with_properties_optional_fontsmoothingstyles_font_smoothing_style ? castAndEscape(with_properties_optional_fontsmoothingstyles_font_smoothing_style) : null;
    const castedWith_properties_optional_appearances_appearance = with_properties_optional_appearances_appearance ? castAndEscape(with_properties_optional_appearances_appearance) : null;
    const castedWith_properties_optional_integer_recent_servers_limit = with_properties_optional_integer_recent_servers_limit ? castAndEscape(with_properties_optional_integer_recent_servers_limit) : null;
    const castedWith_properties_optional_scrollpagebehaviors_scroll_bar_action = with_properties_optional_scrollpagebehaviors_scroll_bar_action ? castAndEscape(with_properties_optional_scrollpagebehaviors_scroll_bar_action) : null;
    const castedWith_properties_optional_boolean_smooth_scrolling = with_properties_optional_boolean_smooth_scrolling ? castAndEscape(with_properties_optional_boolean_smooth_scrolling) : null;
    const castedWith_properties_optional_integer_recent_documents_limit = with_properties_optional_integer_recent_documents_limit ? castAndEscape(with_properties_optional_integer_recent_documents_limit) : null;
    const castedWith_properties_optional_boolean_font_smoothing = with_properties_optional_boolean_font_smoothing ? castAndEscape(with_properties_optional_boolean_font_smoothing) : null;
    const castedWith_properties_optional_missing_value_highlight_color = with_properties_optional_missing_value_highlight_color ? castAndEscape(with_properties_optional_missing_value_highlight_color) : null;
    const castedWith_properties_optional_boolean_dark_mode = with_properties_optional_boolean_dark_mode ? castAndEscape(with_properties_optional_boolean_dark_mode) : null;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new appearance preferences object ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}${buildPropertiesRecord([{param: 'with_properties_optional_integer_recent_applications_limit', prop: 'recent applications limit', value: with_properties_optional_integer_recent_applications_limit, type: 'integer'}, {param: 'with_properties_optional_fontsmoothingstyles_font_smoothing_style', prop: 'font smoothing style', value: with_properties_optional_fontsmoothingstyles_font_smoothing_style, type: 'FontSmoothingStyles'}, {param: 'with_properties_optional_appearances_appearance', prop: 'appearance', value: with_properties_optional_appearances_appearance, type: 'Appearances'}, {param: 'with_properties_optional_integer_recent_servers_limit', prop: 'recent servers limit', value: with_properties_optional_integer_recent_servers_limit, type: 'integer'}, {param: 'with_properties_optional_scrollpagebehaviors_scroll_bar_action', prop: 'scroll bar action', value: with_properties_optional_scrollpagebehaviors_scroll_bar_action, type: 'ScrollPageBehaviors'}, {param: 'with_properties_optional_boolean_smooth_scrolling', prop: 'smooth scrolling', value: with_properties_optional_boolean_smooth_scrolling, type: 'boolean'}, {param: 'with_properties_optional_integer_recent_documents_limit', prop: 'recent documents limit', value: with_properties_optional_integer_recent_documents_limit, type: 'integer'}, {param: 'with_properties_optional_boolean_font_smoothing', prop: 'font smoothing', value: with_properties_optional_boolean_font_smoothing, type: 'boolean'}, {param: 'with_properties_optional_missing_value_highlight_color', prop: 'highlight color', value: with_properties_optional_missing_value_highlight_color, type: 'missing value'}, {param: 'with_properties_optional_boolean_dark_mode', prop: 'dark mode', value: with_properties_optional_boolean_dark_mode, type: 'boolean'}])}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null,
      recent_applications_limit: with_properties_optional_integer_recent_applications_limit || null,
      font_smoothing_style: with_properties_optional_fontsmoothingstyles_font_smoothing_style || null,
      appearance: with_properties_optional_appearances_appearance || null,
      recent_servers_limit: with_properties_optional_integer_recent_servers_limit || null,
      scroll_bar_action: with_properties_optional_scrollpagebehaviors_scroll_bar_action || null,
      smooth_scrolling: with_properties_optional_boolean_smooth_scrolling || null,
      recent_documents_limit: with_properties_optional_integer_recent_documents_limit || null,
      font_smoothing: with_properties_optional_boolean_font_smoothing || null,
      highlight_color: with_properties_optional_missing_value_highlight_color || null,
      dark_mode: with_properties_optional_boolean_dark_mode || null
    };
  }

  async makeBusyIndicatorOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new busy indicator at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makeDockPreferencesObject(at_optional_location_specifier, with_data_optional_any, with_properties_optional_boolean_minimize_into_application, with_properties_optional_boolean_autohide, with_properties_optional_real_magnification_size, with_properties_optional_dpbh_double_click_behavior, with_properties_optional_boolean_autohide_menu_bar, with_properties_optional_dpef_minimize_effect, with_properties_optional_boolean_magnification, with_properties_optional_dpls_screen_edge, with_properties_optional_boolean_show_recents, with_properties_optional_boolean_show_indicators, with_properties_optional_real_dock_size, with_properties_optional_boolean_animate) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;
    const castedWith_properties_optional_boolean_minimize_into_application = with_properties_optional_boolean_minimize_into_application ? castAndEscape(with_properties_optional_boolean_minimize_into_application) : null;
    const castedWith_properties_optional_boolean_autohide = with_properties_optional_boolean_autohide ? castAndEscape(with_properties_optional_boolean_autohide) : null;
    const castedWith_properties_optional_real_magnification_size = with_properties_optional_real_magnification_size ? castAndEscape(with_properties_optional_real_magnification_size) : null;
    const castedWith_properties_optional_dpbh_double_click_behavior = with_properties_optional_dpbh_double_click_behavior ? castAndEscape(with_properties_optional_dpbh_double_click_behavior) : null;
    const castedWith_properties_optional_boolean_autohide_menu_bar = with_properties_optional_boolean_autohide_menu_bar ? castAndEscape(with_properties_optional_boolean_autohide_menu_bar) : null;
    const castedWith_properties_optional_dpef_minimize_effect = with_properties_optional_dpef_minimize_effect ? castAndEscape(with_properties_optional_dpef_minimize_effect) : null;
    const castedWith_properties_optional_boolean_magnification = with_properties_optional_boolean_magnification ? castAndEscape(with_properties_optional_boolean_magnification) : null;
    const castedWith_properties_optional_dpls_screen_edge = with_properties_optional_dpls_screen_edge ? castAndEscape(with_properties_optional_dpls_screen_edge) : null;
    const castedWith_properties_optional_boolean_show_recents = with_properties_optional_boolean_show_recents ? castAndEscape(with_properties_optional_boolean_show_recents) : null;
    const castedWith_properties_optional_boolean_show_indicators = with_properties_optional_boolean_show_indicators ? castAndEscape(with_properties_optional_boolean_show_indicators) : null;
    const castedWith_properties_optional_real_dock_size = with_properties_optional_real_dock_size ? castAndEscape(with_properties_optional_real_dock_size) : null;
    const castedWith_properties_optional_boolean_animate = with_properties_optional_boolean_animate ? castAndEscape(with_properties_optional_boolean_animate) : null;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new dock preferences object ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}${buildPropertiesRecord([{param: 'with_properties_optional_boolean_minimize_into_application', prop: 'minimize into application', value: with_properties_optional_boolean_minimize_into_application, type: 'boolean'}, {param: 'with_properties_optional_boolean_autohide', prop: 'autohide', value: with_properties_optional_boolean_autohide, type: 'boolean'}, {param: 'with_properties_optional_real_magnification_size', prop: 'magnification size', value: with_properties_optional_real_magnification_size, type: 'real'}, {param: 'with_properties_optional_dpbh_double_click_behavior', prop: 'double click behavior', value: with_properties_optional_dpbh_double_click_behavior, type: 'dpbh'}, {param: 'with_properties_optional_boolean_autohide_menu_bar', prop: 'autohide menu bar', value: with_properties_optional_boolean_autohide_menu_bar, type: 'boolean'}, {param: 'with_properties_optional_dpef_minimize_effect', prop: 'minimize effect', value: with_properties_optional_dpef_minimize_effect, type: 'dpef'}, {param: 'with_properties_optional_boolean_magnification', prop: 'magnification', value: with_properties_optional_boolean_magnification, type: 'boolean'}, {param: 'with_properties_optional_dpls_screen_edge', prop: 'screen edge', value: with_properties_optional_dpls_screen_edge, type: 'dpls'}, {param: 'with_properties_optional_boolean_show_recents', prop: 'show recents', value: with_properties_optional_boolean_show_recents, type: 'boolean'}, {param: 'with_properties_optional_boolean_show_indicators', prop: 'show indicators', value: with_properties_optional_boolean_show_indicators, type: 'boolean'}, {param: 'with_properties_optional_real_dock_size', prop: 'dock size', value: with_properties_optional_real_dock_size, type: 'real'}, {param: 'with_properties_optional_boolean_animate', prop: 'animate', value: with_properties_optional_boolean_animate, type: 'boolean'}])}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null,
      minimize_into_application: with_properties_optional_boolean_minimize_into_application || null,
      autohide: with_properties_optional_boolean_autohide || null,
      magnification_size: with_properties_optional_real_magnification_size || null,
      double_click_behavior: with_properties_optional_dpbh_double_click_behavior || null,
      autohide_menu_bar: with_properties_optional_boolean_autohide_menu_bar || null,
      minimize_effect: with_properties_optional_dpef_minimize_effect || null,
      magnification: with_properties_optional_boolean_magnification || null,
      screen_edge: with_properties_optional_dpls_screen_edge || null,
      show_recents: with_properties_optional_boolean_show_recents || null,
      show_indicators: with_properties_optional_boolean_show_indicators || null,
      dock_size: with_properties_optional_real_dock_size || null,
      animate: with_properties_optional_boolean_animate || null
    };
  }

  async makeGroupOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new group at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makeRadioGroupOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new radio group at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makeScriptingResultObject(at_optional_location_specifier, with_data_optional_any) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new scripting result object ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null
    };
  }

  async makeCdAndDvdPreferencesObject(at_optional_location_specifier, with_data_optional_any) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new CD and DVD preferences object ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null
    };
  }

  async makeScreenSaverPreferencesObject(at_optional_location_specifier, with_data_optional_any, with_properties_optional_boolean_main_screen_only, with_properties_optional_integer_delay_interval, with_properties_optional_boolean_show_clock) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;
    const castedWith_properties_optional_boolean_main_screen_only = with_properties_optional_boolean_main_screen_only ? castAndEscape(with_properties_optional_boolean_main_screen_only) : null;
    const castedWith_properties_optional_integer_delay_interval = with_properties_optional_integer_delay_interval ? castAndEscape(with_properties_optional_integer_delay_interval) : null;
    const castedWith_properties_optional_boolean_show_clock = with_properties_optional_boolean_show_clock ? castAndEscape(with_properties_optional_boolean_show_clock) : null;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new screen saver preferences object ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}${buildPropertiesRecord([{param: 'with_properties_optional_boolean_main_screen_only', prop: 'main screen only', value: with_properties_optional_boolean_main_screen_only, type: 'boolean'}, {param: 'with_properties_optional_integer_delay_interval', prop: 'delay interval', value: with_properties_optional_integer_delay_interval, type: 'integer'}, {param: 'with_properties_optional_boolean_show_clock', prop: 'show clock', value: with_properties_optional_boolean_show_clock, type: 'boolean'}])}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null,
      main_screen_only: with_properties_optional_boolean_main_screen_only || null,
      delay_interval: with_properties_optional_integer_delay_interval || null,
      show_clock: with_properties_optional_boolean_show_clock || null
    };
  }

  async makeTableOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new table at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makeRadioButtonOfRadioGroup(at_required_location_specifier_radio_group, with_data_optional_any) {
    if (!at_required_location_specifier_radio_group || typeof at_required_location_specifier_radio_group !== "string") {
      throw new Error("at_required_location_specifier_radio_group is required and must be a string");
    }

    const castedRadioGroup = castAndEscape(at_required_location_specifier_radio_group);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedRadioGroup}
          make new radio button at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      radio_group: at_required_location_specifier_radio_group,
      with_data: with_data_optional_any || null
    };
  }

  async makeGrowAreaOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new grow area at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makeScriptingEnumerationOfScriptingSuite(at_required_location_specifier_scripting_suite, with_data_optional_any) {
    if (!at_required_location_specifier_scripting_suite || typeof at_required_location_specifier_scripting_suite !== "string") {
      throw new Error("at_required_location_specifier_scripting_suite is required and must be a string");
    }

    const castedScriptingSuite = castAndEscape(at_required_location_specifier_scripting_suite);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedScriptingSuite}
          make new scripting enumeration at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      scripting_suite: at_required_location_specifier_scripting_suite,
      with_data: with_data_optional_any || null
    };
  }

  async makeScrollBarOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new scroll bar at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makeScriptingPropertyOfScriptingClass(at_required_location_specifier_scripting_class, with_data_optional_any) {
    if (!at_required_location_specifier_scripting_class || typeof at_required_location_specifier_scripting_class !== "string") {
      throw new Error("at_required_location_specifier_scripting_class is required and must be a string");
    }

    const castedScriptingClass = castAndEscape(at_required_location_specifier_scripting_class);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedScriptingClass}
          make new scripting property at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      scripting_class: at_required_location_specifier_scripting_class,
      with_data: with_data_optional_any || null
    };
  }

  async makeAttributeOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any, with_properties_optional_missing_value_value) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;
    const castedWith_properties_optional_missing_value_value = with_properties_optional_missing_value_value ? castAndEscape(with_properties_optional_missing_value_value) : null;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new attribute at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}${buildPropertiesRecord([{param: 'with_properties_optional_missing_value_value', prop: 'value', value: with_properties_optional_missing_value_value, type: 'missing value'}])}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null,
      value: with_properties_optional_missing_value_value || null
    };
  }

  async makeMenuBarItemOfMenuBar(at_required_location_specifier_menu_bar, with_data_optional_any) {
    if (!at_required_location_specifier_menu_bar || typeof at_required_location_specifier_menu_bar !== "string") {
      throw new Error("at_required_location_specifier_menu_bar is required and must be a string");
    }

    const castedMenuBar = castAndEscape(at_required_location_specifier_menu_bar);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedMenuBar}
          make new menu bar item at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      menu_bar: at_required_location_specifier_menu_bar,
      with_data: with_data_optional_any || null
    };
  }

  async makeListOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new list at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makeDisk(at_optional_location_specifier, with_data_optional_any, with_properties_optional_boolean_ignore_privileges) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;
    const castedWith_properties_optional_boolean_ignore_privileges = with_properties_optional_boolean_ignore_privileges ? castAndEscape(with_properties_optional_boolean_ignore_privileges) : null;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new disk ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}${buildPropertiesRecord([{param: 'with_properties_optional_boolean_ignore_privileges', prop: 'ignore privileges', value: with_properties_optional_boolean_ignore_privileges, type: 'boolean'}])}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null,
      ignore_privileges: with_properties_optional_boolean_ignore_privileges || null
    };
  }

  async makeLocationOfNetworkPreferencesObject(at_required_location_specifier_network_preferences_object, with_data_optional_any, with_properties_optional_text_name) {
    if (!at_required_location_specifier_network_preferences_object || typeof at_required_location_specifier_network_preferences_object !== "string") {
      throw new Error("at_required_location_specifier_network_preferences_object is required and must be a string");
    }

    const castedNetworkPreferencesObject = castAndEscape(at_required_location_specifier_network_preferences_object);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;
    const castedWith_properties_optional_text_name = with_properties_optional_text_name ? castAndEscape(with_properties_optional_text_name) : null;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedNetworkPreferencesObject}
          make new location at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}${buildPropertiesRecord([{param: 'with_properties_optional_text_name', prop: 'name', value: with_properties_optional_text_name, type: 'text'}])}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      network_preferences_object: at_required_location_specifier_network_preferences_object,
      with_data: with_data_optional_any || null,
      name: with_properties_optional_text_name || null
    };
  }

  async makeAliasOfDisk(at_required_location_specifier_disk, with_data_optional_any, with_properties_optional_missing_value_file_type, with_properties_optional_boolean_stationery, with_properties_optional_missing_value_default_application, with_properties_optional_missing_value_creator_type) {
    if (!at_required_location_specifier_disk || typeof at_required_location_specifier_disk !== "string") {
      throw new Error("at_required_location_specifier_disk is required and must be a string");
    }

    const castedDisk = castAndEscape(at_required_location_specifier_disk);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;
    const castedWith_properties_optional_missing_value_file_type = with_properties_optional_missing_value_file_type ? castAndEscape(with_properties_optional_missing_value_file_type) : null;
    const castedWith_properties_optional_boolean_stationery = with_properties_optional_boolean_stationery ? castAndEscape(with_properties_optional_boolean_stationery) : null;
    const castedWith_properties_optional_missing_value_default_application = with_properties_optional_missing_value_default_application ? castAndEscape(with_properties_optional_missing_value_default_application) : null;
    const castedWith_properties_optional_missing_value_creator_type = with_properties_optional_missing_value_creator_type ? castAndEscape(with_properties_optional_missing_value_creator_type) : null;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedDisk}
          make new alias at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}${buildPropertiesRecord([{param: 'with_properties_optional_missing_value_file_type', prop: 'file type', value: with_properties_optional_missing_value_file_type, type: 'missing value'}, {param: 'with_properties_optional_boolean_stationery', prop: 'stationery', value: with_properties_optional_boolean_stationery, type: 'boolean'}, {param: 'with_properties_optional_missing_value_default_application', prop: 'default application', value: with_properties_optional_missing_value_default_application, type: 'missing value'}, {param: 'with_properties_optional_missing_value_creator_type', prop: 'creator type', value: with_properties_optional_missing_value_creator_type, type: 'missing value'}])}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      disk: at_required_location_specifier_disk,
      with_data: with_data_optional_any || null,
      file_type: with_properties_optional_missing_value_file_type || null,
      stationery: with_properties_optional_boolean_stationery || null,
      default_application: with_properties_optional_missing_value_default_application || null,
      creator_type: with_properties_optional_missing_value_creator_type || null
    };
  }

  async makeStaticTextOfGroup(at_required_location_specifier_group, with_data_optional_any) {
    if (!at_required_location_specifier_group || typeof at_required_location_specifier_group !== "string") {
      throw new Error("at_required_location_specifier_group is required and must be a string");
    }

    const castedGroup = castAndEscape(at_required_location_specifier_group);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedGroup}
          make new static text at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      group: at_required_location_specifier_group,
      with_data: with_data_optional_any || null
    };
  }

  async makeScriptingDefinitionObject(at_optional_location_specifier, with_data_optional_any) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new scripting definition object ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null
    };
  }

  async makeServiceOfLocation(at_required_location_specifier_location, with_data_optional_any, with_properties_optional_configuration_current_configuration, with_properties_optional_text_name) {
    if (!at_required_location_specifier_location || typeof at_required_location_specifier_location !== "string") {
      throw new Error("at_required_location_specifier_location is required and must be a string");
    }

    const castedLocation = castAndEscape(at_required_location_specifier_location);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;
    const castedWith_properties_optional_configuration_current_configuration = with_properties_optional_configuration_current_configuration ? castAndEscape(with_properties_optional_configuration_current_configuration) : null;
    const castedWith_properties_optional_text_name = with_properties_optional_text_name ? castAndEscape(with_properties_optional_text_name) : null;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedLocation}
          make new service at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}${buildPropertiesRecord([{param: 'with_properties_optional_configuration_current_configuration', prop: 'current configuration', value: with_properties_optional_configuration_current_configuration, type: 'configuration'}, {param: 'with_properties_optional_text_name', prop: 'name', value: with_properties_optional_text_name, type: 'text'}])}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      location: at_required_location_specifier_location,
      with_data: with_data_optional_any || null,
      current_configuration: with_properties_optional_configuration_current_configuration || null,
      name: with_properties_optional_text_name || null
    };
  }

  async makeScreenSaver(at_optional_location_specifier, with_data_optional_any, with_properties_optional_text_picture_display_style) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;
    const castedWith_properties_optional_text_picture_display_style = with_properties_optional_text_picture_display_style ? castAndEscape(with_properties_optional_text_picture_display_style) : null;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new screen saver ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}${buildPropertiesRecord([{param: 'with_properties_optional_text_picture_display_style', prop: 'picture display style', value: with_properties_optional_text_picture_display_style, type: 'text'}])}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null,
      picture_display_style: with_properties_optional_text_picture_display_style || null
    };
  }

  async makeMenuItemOfMenu(at_required_location_specifier_menu, with_data_optional_any) {
    if (!at_required_location_specifier_menu || typeof at_required_location_specifier_menu !== "string") {
      throw new Error("at_required_location_specifier_menu is required and must be a string");
    }

    const castedMenu = castAndEscape(at_required_location_specifier_menu);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedMenu}
          make new menu item at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      menu: at_required_location_specifier_menu,
      with_data: with_data_optional_any || null
    };
  }

  async makeLocalDomainObject(at_optional_location_specifier, with_data_optional_any) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new local domain object ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null
    };
  }

  async makeTextAreaOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new text area at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makeValueIndicatorOfScrollBar(at_required_location_specifier_scroll_bar, with_data_optional_any) {
    if (!at_required_location_specifier_scroll_bar || typeof at_required_location_specifier_scroll_bar !== "string") {
      throw new Error("at_required_location_specifier_scroll_bar is required and must be a string");
    }

    const castedScrollBar = castAndEscape(at_required_location_specifier_scroll_bar);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedScrollBar}
          make new value indicator at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      scroll_bar: at_required_location_specifier_scroll_bar,
      with_data: with_data_optional_any || null
    };
  }

  async makeProgressIndicatorOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new progress indicator at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makeScriptingElementOfScriptingClass(at_required_location_specifier_scripting_class, with_data_optional_any) {
    if (!at_required_location_specifier_scripting_class || typeof at_required_location_specifier_scripting_class !== "string") {
      throw new Error("at_required_location_specifier_scripting_class is required and must be a string");
    }

    const castedScriptingClass = castAndEscape(at_required_location_specifier_scripting_class);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedScriptingClass}
          make new scripting element at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      scripting_class: at_required_location_specifier_scripting_class,
      with_data: with_data_optional_any || null
    };
  }

  async makeDrawerOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new drawer at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makeTabGroupOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new tab group at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makeSystemDomainObject(at_optional_location_specifier, with_data_optional_any) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new system domain object ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null
    };
  }

  async makeWindowOfProcess(at_required_location_specifier_process, with_data_optional_any, with_properties_optional_missing_value_value, with_properties_optional_missing_value_position, with_properties_optional_integer_index, with_properties_optional_missing_value_size, with_properties_optional_rectangle_bounds, with_properties_optional_boolean_miniaturized, with_properties_optional_missing_value_selected, with_properties_optional_boolean_zoomed, with_properties_optional_missing_value_focused, with_properties_optional_boolean_visible) {
    if (!at_required_location_specifier_process || typeof at_required_location_specifier_process !== "string") {
      throw new Error("at_required_location_specifier_process is required and must be a string");
    }

    const castedProcess = castAndEscape(at_required_location_specifier_process);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;
    const castedWith_properties_optional_missing_value_value = with_properties_optional_missing_value_value ? castAndEscape(with_properties_optional_missing_value_value) : null;
    const castedWith_properties_optional_missing_value_position = with_properties_optional_missing_value_position ? castAndEscape(with_properties_optional_missing_value_position) : null;
    const castedWith_properties_optional_integer_index = with_properties_optional_integer_index ? castAndEscape(with_properties_optional_integer_index) : null;
    const castedWith_properties_optional_missing_value_size = with_properties_optional_missing_value_size ? castAndEscape(with_properties_optional_missing_value_size) : null;
    const castedWith_properties_optional_rectangle_bounds = with_properties_optional_rectangle_bounds ? castAndEscape(with_properties_optional_rectangle_bounds) : null;
    const castedWith_properties_optional_boolean_miniaturized = with_properties_optional_boolean_miniaturized ? castAndEscape(with_properties_optional_boolean_miniaturized) : null;
    const castedWith_properties_optional_missing_value_selected = with_properties_optional_missing_value_selected ? castAndEscape(with_properties_optional_missing_value_selected) : null;
    const castedWith_properties_optional_boolean_zoomed = with_properties_optional_boolean_zoomed ? castAndEscape(with_properties_optional_boolean_zoomed) : null;
    const castedWith_properties_optional_missing_value_focused = with_properties_optional_missing_value_focused ? castAndEscape(with_properties_optional_missing_value_focused) : null;
    const castedWith_properties_optional_boolean_visible = with_properties_optional_boolean_visible ? castAndEscape(with_properties_optional_boolean_visible) : null;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedProcess}
          make new window at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}${buildPropertiesRecord([{param: 'with_properties_optional_missing_value_value', prop: 'value', value: with_properties_optional_missing_value_value, type: 'missing value'}, {param: 'with_properties_optional_missing_value_position', prop: 'position', value: with_properties_optional_missing_value_position, type: 'missing value'}, {param: 'with_properties_optional_integer_index', prop: 'index', value: with_properties_optional_integer_index, type: 'integer'}, {param: 'with_properties_optional_missing_value_size', prop: 'size', value: with_properties_optional_missing_value_size, type: 'missing value'}, {param: 'with_properties_optional_rectangle_bounds', prop: 'bounds', value: with_properties_optional_rectangle_bounds, type: 'rectangle'}, {param: 'with_properties_optional_boolean_miniaturized', prop: 'miniaturized', value: with_properties_optional_boolean_miniaturized, type: 'boolean'}, {param: 'with_properties_optional_missing_value_selected', prop: 'selected', value: with_properties_optional_missing_value_selected, type: 'missing value'}, {param: 'with_properties_optional_boolean_zoomed', prop: 'zoomed', value: with_properties_optional_boolean_zoomed, type: 'boolean'}, {param: 'with_properties_optional_missing_value_focused', prop: 'focused', value: with_properties_optional_missing_value_focused, type: 'missing value'}, {param: 'with_properties_optional_boolean_visible', prop: 'visible', value: with_properties_optional_boolean_visible, type: 'boolean'}])}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      process: at_required_location_specifier_process,
      with_data: with_data_optional_any || null,
      value: with_properties_optional_missing_value_value || null,
      position: with_properties_optional_missing_value_position || null,
      index: with_properties_optional_integer_index || null,
      size: with_properties_optional_missing_value_size || null,
      bounds: with_properties_optional_rectangle_bounds || null,
      miniaturized: with_properties_optional_boolean_miniaturized || null,
      selected: with_properties_optional_missing_value_selected || null,
      zoomed: with_properties_optional_boolean_zoomed || null,
      focused: with_properties_optional_missing_value_focused || null,
      visible: with_properties_optional_boolean_visible || null
    };
  }

  async makeNetworkPreferencesObject(at_optional_location_specifier, with_data_optional_any, with_properties_optional_location_current_location) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;
    const castedWith_properties_optional_location_current_location = with_properties_optional_location_current_location ? castAndEscape(with_properties_optional_location_current_location) : null;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new network preferences object ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}${buildPropertiesRecord([{param: 'with_properties_optional_location_current_location', prop: 'current location', value: with_properties_optional_location_current_location, type: 'location'}])}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null,
      current_location: with_properties_optional_location_current_location || null
    };
  }

  async makeOutlineOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new outline at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makePopUpButtonOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new pop up button at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makeSplitterGroupOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new splitter group at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makeActionOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new action at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makeDiskItemOfAlias(at_required_location_specifier_alias, with_data_optional_any, with_properties_optional_date_modification_date, with_properties_optional_boolean_visible, with_properties_optional_text_name) {
    if (!at_required_location_specifier_alias || typeof at_required_location_specifier_alias !== "string") {
      throw new Error("at_required_location_specifier_alias is required and must be a string");
    }

    const castedAlias = castAndEscape(at_required_location_specifier_alias);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;
    const castedWith_properties_optional_date_modification_date = with_properties_optional_date_modification_date ? castAndEscape(with_properties_optional_date_modification_date) : null;
    const castedWith_properties_optional_boolean_visible = with_properties_optional_boolean_visible ? castAndEscape(with_properties_optional_boolean_visible) : null;
    const castedWith_properties_optional_text_name = with_properties_optional_text_name ? castAndEscape(with_properties_optional_text_name) : null;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedAlias}
          make new disk item at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}${buildPropertiesRecord([{param: 'with_properties_optional_date_modification_date', prop: 'modification date', value: with_properties_optional_date_modification_date, type: 'date'}, {param: 'with_properties_optional_boolean_visible', prop: 'visible', value: with_properties_optional_boolean_visible, type: 'boolean'}, {param: 'with_properties_optional_text_name', prop: 'name', value: with_properties_optional_text_name, type: 'text'}])}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      alias: at_required_location_specifier_alias,
      with_data: with_data_optional_any || null,
      modification_date: with_properties_optional_date_modification_date || null,
      visible: with_properties_optional_boolean_visible || null,
      name: with_properties_optional_text_name || null
    };
  }

  async makeFilePackageOfAlias(at_required_location_specifier_alias, with_data_optional_any) {
    if (!at_required_location_specifier_alias || typeof at_required_location_specifier_alias !== "string") {
      throw new Error("at_required_location_specifier_alias is required and must be a string");
    }

    const castedAlias = castAndEscape(at_required_location_specifier_alias);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedAlias}
          make new file package at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      alias: at_required_location_specifier_alias,
      with_data: with_data_optional_any || null
    };
  }

  async makeProcess(at_optional_location_specifier, with_data_optional_any, with_properties_optional_boolean_frontmost, with_properties_optional_missing_value_visible) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;
    const castedWith_properties_optional_boolean_frontmost = with_properties_optional_boolean_frontmost ? castAndEscape(with_properties_optional_boolean_frontmost) : null;
    const castedWith_properties_optional_missing_value_visible = with_properties_optional_missing_value_visible ? castAndEscape(with_properties_optional_missing_value_visible) : null;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new process ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}${buildPropertiesRecord([{param: 'with_properties_optional_boolean_frontmost', prop: 'frontmost', value: with_properties_optional_boolean_frontmost, type: 'boolean'}, {param: 'with_properties_optional_missing_value_visible', prop: 'visible', value: with_properties_optional_missing_value_visible, type: 'missing value'}])}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null,
      frontmost: with_properties_optional_boolean_frontmost || null,
      visible: with_properties_optional_missing_value_visible || null
    };
  }

  async makeScriptingParameterOfScriptingCommand(at_required_location_specifier_scripting_command, with_data_optional_any) {
    if (!at_required_location_specifier_scripting_command || typeof at_required_location_specifier_scripting_command !== "string") {
      throw new Error("at_required_location_specifier_scripting_command is required and must be a string");
    }

    const castedScriptingCommand = castAndEscape(at_required_location_specifier_scripting_command);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedScriptingCommand}
          make new scripting parameter at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      scripting_command: at_required_location_specifier_scripting_command,
      with_data: with_data_optional_any || null
    };
  }

  async makeInsertionPreference(at_optional_location_specifier, with_data_optional_any, with_properties_optional_missing_value_custom_script, with_properties_optional_missing_value_custom_application, with_properties_optional_dhac_insertion_action) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;
    const castedWith_properties_optional_missing_value_custom_script = with_properties_optional_missing_value_custom_script ? castAndEscape(with_properties_optional_missing_value_custom_script) : null;
    const castedWith_properties_optional_missing_value_custom_application = with_properties_optional_missing_value_custom_application ? castAndEscape(with_properties_optional_missing_value_custom_application) : null;
    const castedWith_properties_optional_dhac_insertion_action = with_properties_optional_dhac_insertion_action ? castAndEscape(with_properties_optional_dhac_insertion_action) : null;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new insertion preference ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}${buildPropertiesRecord([{param: 'with_properties_optional_missing_value_custom_script', prop: 'custom script', value: with_properties_optional_missing_value_custom_script, type: 'missing value'}, {param: 'with_properties_optional_missing_value_custom_application', prop: 'custom application', value: with_properties_optional_missing_value_custom_application, type: 'missing value'}, {param: 'with_properties_optional_dhac_insertion_action', prop: 'insertion action', value: with_properties_optional_dhac_insertion_action, type: 'dhac'}])}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null,
      custom_script: with_properties_optional_missing_value_custom_script || null,
      custom_application: with_properties_optional_missing_value_custom_application || null,
      insertion_action: with_properties_optional_dhac_insertion_action || null
    };
  }

  async makeScriptingClassOfScriptingSuite(at_required_location_specifier_scripting_suite, with_data_optional_any) {
    if (!at_required_location_specifier_scripting_suite || typeof at_required_location_specifier_scripting_suite !== "string") {
      throw new Error("at_required_location_specifier_scripting_suite is required and must be a string");
    }

    const castedScriptingSuite = castAndEscape(at_required_location_specifier_scripting_suite);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedScriptingSuite}
          make new scripting class at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      scripting_suite: at_required_location_specifier_scripting_suite,
      with_data: with_data_optional_any || null
    };
  }

  async makeConfigurationOfService(at_required_location_specifier_service, with_data_optional_any, with_properties_optional_text_account_name) {
    if (!at_required_location_specifier_service || typeof at_required_location_specifier_service !== "string") {
      throw new Error("at_required_location_specifier_service is required and must be a string");
    }

    const castedService = castAndEscape(at_required_location_specifier_service);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;
    const castedWith_properties_optional_text_account_name = with_properties_optional_text_account_name ? castAndEscape(with_properties_optional_text_account_name) : null;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedService}
          make new configuration at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}${buildPropertiesRecord([{param: 'with_properties_optional_text_account_name', prop: 'account name', value: with_properties_optional_text_account_name, type: 'text'}])}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      service: at_required_location_specifier_service,
      with_data: with_data_optional_any || null,
      account_name: with_properties_optional_text_account_name || null
    };
  }

  async makeUiElementOfWindow(at_required_location_specifier_window, with_data_optional_any, with_properties_optional_missing_value_selected, with_properties_optional_missing_value_position, with_properties_optional_missing_value_focused, with_properties_optional_missing_value_size, with_properties_optional_missing_value_value) {
    if (!at_required_location_specifier_window || typeof at_required_location_specifier_window !== "string") {
      throw new Error("at_required_location_specifier_window is required and must be a string");
    }

    const castedWindow = castAndEscape(at_required_location_specifier_window);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;
    const castedWith_properties_optional_missing_value_selected = with_properties_optional_missing_value_selected ? castAndEscape(with_properties_optional_missing_value_selected) : null;
    const castedWith_properties_optional_missing_value_position = with_properties_optional_missing_value_position ? castAndEscape(with_properties_optional_missing_value_position) : null;
    const castedWith_properties_optional_missing_value_focused = with_properties_optional_missing_value_focused ? castAndEscape(with_properties_optional_missing_value_focused) : null;
    const castedWith_properties_optional_missing_value_size = with_properties_optional_missing_value_size ? castAndEscape(with_properties_optional_missing_value_size) : null;
    const castedWith_properties_optional_missing_value_value = with_properties_optional_missing_value_value ? castAndEscape(with_properties_optional_missing_value_value) : null;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedWindow}
          make new UI element at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}${buildPropertiesRecord([{param: 'with_properties_optional_missing_value_selected', prop: 'selected', value: with_properties_optional_missing_value_selected, type: 'missing value'}, {param: 'with_properties_optional_missing_value_position', prop: 'position', value: with_properties_optional_missing_value_position, type: 'missing value'}, {param: 'with_properties_optional_missing_value_focused', prop: 'focused', value: with_properties_optional_missing_value_focused, type: 'missing value'}, {param: 'with_properties_optional_missing_value_size', prop: 'size', value: with_properties_optional_missing_value_size, type: 'missing value'}, {param: 'with_properties_optional_missing_value_value', prop: 'value', value: with_properties_optional_missing_value_value, type: 'missing value'}])}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      window: at_required_location_specifier_window,
      with_data: with_data_optional_any || null,
      selected: with_properties_optional_missing_value_selected || null,
      position: with_properties_optional_missing_value_position || null,
      focused: with_properties_optional_missing_value_focused || null,
      size: with_properties_optional_missing_value_size || null,
      value: with_properties_optional_missing_value_value || null
    };
  }

  async makePropertyListItem(at_optional_location_specifier, with_data_optional_any, with_properties_optional_missing_value_value, with_properties_optional_text_text) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;
    const castedWith_properties_optional_missing_value_value = with_properties_optional_missing_value_value ? castAndEscape(with_properties_optional_missing_value_value) : null;
    const castedWith_properties_optional_text_text = with_properties_optional_text_text ? castAndEscape(with_properties_optional_text_text) : null;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new property list item ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}${buildPropertiesRecord([{param: 'with_properties_optional_missing_value_value', prop: 'value', value: with_properties_optional_missing_value_value, type: 'missing value'}, {param: 'with_properties_optional_text_text', prop: 'text', value: with_properties_optional_text_text, type: 'text'}])}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null,
      value: with_properties_optional_missing_value_value || null,
      text: with_properties_optional_text_text || null
    };
  }

  async makeDomain(at_optional_location_specifier, with_data_optional_any) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new domain ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null
    };
  }

  async makeMenuBarOfProcess(at_required_location_specifier_process, with_data_optional_any) {
    if (!at_required_location_specifier_process || typeof at_required_location_specifier_process !== "string") {
      throw new Error("at_required_location_specifier_process is required and must be a string");
    }

    const castedProcess = castAndEscape(at_required_location_specifier_process);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedProcess}
          make new menu bar at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      process: at_required_location_specifier_process,
      with_data: with_data_optional_any || null
    };
  }

  async makeColorWellOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new color well at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makeScriptingCommandOfScriptingSuite(at_required_location_specifier_scripting_suite, with_data_optional_any) {
    if (!at_required_location_specifier_scripting_suite || typeof at_required_location_specifier_scripting_suite !== "string") {
      throw new Error("at_required_location_specifier_scripting_suite is required and must be a string");
    }

    const castedScriptingSuite = castAndEscape(at_required_location_specifier_scripting_suite);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedScriptingSuite}
          make new scripting command at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      scripting_suite: at_required_location_specifier_scripting_suite,
      with_data: with_data_optional_any || null
    };
  }

  async makeButtonOfScrollBar(at_required_location_specifier_scroll_bar, with_data_optional_any) {
    if (!at_required_location_specifier_scroll_bar || typeof at_required_location_specifier_scroll_bar !== "string") {
      throw new Error("at_required_location_specifier_scroll_bar is required and must be a string");
    }

    const castedScrollBar = castAndEscape(at_required_location_specifier_scroll_bar);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedScrollBar}
          make new button at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      scroll_bar: at_required_location_specifier_scroll_bar,
      with_data: with_data_optional_any || null
    };
  }

  async makeApplicationProcess(at_optional_location_specifier, with_data_optional_any) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new application process ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null
    };
  }

  async makeToolbarOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new toolbar at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makeDesktop(at_optional_location_specifier, with_data_optional_any, with_properties_optional_missing_value_pictures_folder, with_properties_optional_real_change_interval, with_properties_optional_boolean_random_order, with_properties_optional_integer_picture_rotation, with_properties_optional_missing_value_picture, with_properties_optional_dynamic_style_dynamic_style, with_properties_optional_boolean_translucent_menu_bar) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;
    const castedWith_properties_optional_missing_value_pictures_folder = with_properties_optional_missing_value_pictures_folder ? castAndEscape(with_properties_optional_missing_value_pictures_folder) : null;
    const castedWith_properties_optional_real_change_interval = with_properties_optional_real_change_interval ? castAndEscape(with_properties_optional_real_change_interval) : null;
    const castedWith_properties_optional_boolean_random_order = with_properties_optional_boolean_random_order ? castAndEscape(with_properties_optional_boolean_random_order) : null;
    const castedWith_properties_optional_integer_picture_rotation = with_properties_optional_integer_picture_rotation ? castAndEscape(with_properties_optional_integer_picture_rotation) : null;
    const castedWith_properties_optional_missing_value_picture = with_properties_optional_missing_value_picture ? castAndEscape(with_properties_optional_missing_value_picture) : null;
    const castedWith_properties_optional_dynamic_style_dynamic_style = with_properties_optional_dynamic_style_dynamic_style ? castAndEscape(with_properties_optional_dynamic_style_dynamic_style) : null;
    const castedWith_properties_optional_boolean_translucent_menu_bar = with_properties_optional_boolean_translucent_menu_bar ? castAndEscape(with_properties_optional_boolean_translucent_menu_bar) : null;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new desktop ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}${buildPropertiesRecord([{param: 'with_properties_optional_missing_value_pictures_folder', prop: 'pictures folder', value: with_properties_optional_missing_value_pictures_folder, type: 'missing value'}, {param: 'with_properties_optional_real_change_interval', prop: 'change interval', value: with_properties_optional_real_change_interval, type: 'real'}, {param: 'with_properties_optional_boolean_random_order', prop: 'random order', value: with_properties_optional_boolean_random_order, type: 'boolean'}, {param: 'with_properties_optional_integer_picture_rotation', prop: 'picture rotation', value: with_properties_optional_integer_picture_rotation, type: 'integer'}, {param: 'with_properties_optional_missing_value_picture', prop: 'picture', value: with_properties_optional_missing_value_picture, type: 'missing value'}, {param: 'with_properties_optional_dynamic_style_dynamic_style', prop: 'dynamic style', value: with_properties_optional_dynamic_style_dynamic_style, type: 'dynamic style'}, {param: 'with_properties_optional_boolean_translucent_menu_bar', prop: 'translucent menu bar', value: with_properties_optional_boolean_translucent_menu_bar, type: 'boolean'}])}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null,
      pictures_folder: with_properties_optional_missing_value_pictures_folder || null,
      change_interval: with_properties_optional_real_change_interval || null,
      random_order: with_properties_optional_boolean_random_order || null,
      picture_rotation: with_properties_optional_integer_picture_rotation || null,
      picture: with_properties_optional_missing_value_picture || null,
      dynamic_style: with_properties_optional_dynamic_style_dynamic_style || null,
      translucent_menu_bar: with_properties_optional_boolean_translucent_menu_bar || null
    };
  }

  async makeUserDomainObject(at_optional_location_specifier, with_data_optional_any) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new user domain object ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null
    };
  }

  async makeImageOfStaticText(at_required_location_specifier_static_text, with_data_optional_any) {
    if (!at_required_location_specifier_static_text || typeof at_required_location_specifier_static_text !== "string") {
      throw new Error("at_required_location_specifier_static_text is required and must be a string");
    }

    const castedStaticText = castAndEscape(at_required_location_specifier_static_text);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedStaticText}
          make new image at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      static_text: at_required_location_specifier_static_text,
      with_data: with_data_optional_any || null
    };
  }

  async makeLoginItem(at_optional_location_specifier, with_data_optional_any, with_properties_optional_boolean_hidden) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;
    const castedWith_properties_optional_boolean_hidden = with_properties_optional_boolean_hidden ? castAndEscape(with_properties_optional_boolean_hidden) : null;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new login item ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}${buildPropertiesRecord([{param: 'with_properties_optional_boolean_hidden', prop: 'hidden', value: with_properties_optional_boolean_hidden, type: 'boolean'}])}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null,
      hidden: with_properties_optional_boolean_hidden || null
    };
  }

  async makeUser(at_optional_location_specifier, with_data_optional_any, with_properties_optional_missing_value_picture_path) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;
    const castedWith_properties_optional_missing_value_picture_path = with_properties_optional_missing_value_picture_path ? castAndEscape(with_properties_optional_missing_value_picture_path) : null;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new user ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}${buildPropertiesRecord([{param: 'with_properties_optional_missing_value_picture_path', prop: 'picture path', value: with_properties_optional_missing_value_picture_path, type: 'missing value'}])}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null,
      picture_path: with_properties_optional_missing_value_picture_path || null
    };
  }

  async makeRelevanceIndicatorOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new relevance indicator at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makeScriptingSuiteOfScriptingDefinitionObject(at_required_location_specifier_scripting_definition_object, with_data_optional_any) {
    if (!at_required_location_specifier_scripting_definition_object || typeof at_required_location_specifier_scripting_definition_object !== "string") {
      throw new Error("at_required_location_specifier_scripting_definition_object is required and must be a string");
    }

    const castedScriptingDefinitionObject = castAndEscape(at_required_location_specifier_scripting_definition_object);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedScriptingDefinitionObject}
          make new scripting suite at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      scripting_definition_object: at_required_location_specifier_scripting_definition_object,
      with_data: with_data_optional_any || null
    };
  }

  async makeXmlElementOfXmlData(at_required_location_specifier_xml_data, with_data_optional_any, with_properties_optional_missing_value_value) {
    if (!at_required_location_specifier_xml_data || typeof at_required_location_specifier_xml_data !== "string") {
      throw new Error("at_required_location_specifier_xml_data is required and must be a string");
    }

    const castedXmlData = castAndEscape(at_required_location_specifier_xml_data);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;
    const castedWith_properties_optional_missing_value_value = with_properties_optional_missing_value_value ? castAndEscape(with_properties_optional_missing_value_value) : null;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedXmlData}
          make new XML element at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}${buildPropertiesRecord([{param: 'with_properties_optional_missing_value_value', prop: 'value', value: with_properties_optional_missing_value_value, type: 'missing value'}])}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      xml_data: at_required_location_specifier_xml_data,
      with_data: with_data_optional_any || null,
      value: with_properties_optional_missing_value_value || null
    };
  }

  async makePrintSettings(at_optional_location_specifier, with_data_optional_any, with_properties_optional_integer_copies, with_properties_optional_text_fax_number, with_properties_optional_integer_pages_down, with_properties_optional_text_target_printer, with_properties_optional_integer_ending_page, with_properties_optional_integer_pages_across, with_properties_optional_integer_starting_page, with_properties_optional_date_requested_print_time, with_properties_optional_boolean_collating, with_properties_optional_enum_error_handling) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;
    const castedWith_properties_optional_integer_copies = with_properties_optional_integer_copies ? castAndEscape(with_properties_optional_integer_copies) : null;
    const castedWith_properties_optional_text_fax_number = with_properties_optional_text_fax_number ? castAndEscape(with_properties_optional_text_fax_number) : null;
    const castedWith_properties_optional_integer_pages_down = with_properties_optional_integer_pages_down ? castAndEscape(with_properties_optional_integer_pages_down) : null;
    const castedWith_properties_optional_text_target_printer = with_properties_optional_text_target_printer ? castAndEscape(with_properties_optional_text_target_printer) : null;
    const castedWith_properties_optional_integer_ending_page = with_properties_optional_integer_ending_page ? castAndEscape(with_properties_optional_integer_ending_page) : null;
    const castedWith_properties_optional_integer_pages_across = with_properties_optional_integer_pages_across ? castAndEscape(with_properties_optional_integer_pages_across) : null;
    const castedWith_properties_optional_integer_starting_page = with_properties_optional_integer_starting_page ? castAndEscape(with_properties_optional_integer_starting_page) : null;
    const castedWith_properties_optional_date_requested_print_time = with_properties_optional_date_requested_print_time ? castAndEscape(with_properties_optional_date_requested_print_time) : null;
    const castedWith_properties_optional_boolean_collating = with_properties_optional_boolean_collating ? castAndEscape(with_properties_optional_boolean_collating) : null;
    const castedWith_properties_optional_enum_error_handling = with_properties_optional_enum_error_handling ? castAndEscape(with_properties_optional_enum_error_handling) : null;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new print settings ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}${buildPropertiesRecord([{param: 'with_properties_optional_integer_copies', prop: 'copies', value: with_properties_optional_integer_copies, type: 'integer'}, {param: 'with_properties_optional_text_fax_number', prop: 'fax number', value: with_properties_optional_text_fax_number, type: 'text'}, {param: 'with_properties_optional_integer_pages_down', prop: 'pages down', value: with_properties_optional_integer_pages_down, type: 'integer'}, {param: 'with_properties_optional_text_target_printer', prop: 'target printer', value: with_properties_optional_text_target_printer, type: 'text'}, {param: 'with_properties_optional_integer_ending_page', prop: 'ending page', value: with_properties_optional_integer_ending_page, type: 'integer'}, {param: 'with_properties_optional_integer_pages_across', prop: 'pages across', value: with_properties_optional_integer_pages_across, type: 'integer'}, {param: 'with_properties_optional_integer_starting_page', prop: 'starting page', value: with_properties_optional_integer_starting_page, type: 'integer'}, {param: 'with_properties_optional_date_requested_print_time', prop: 'requested print time', value: with_properties_optional_date_requested_print_time, type: 'date'}, {param: 'with_properties_optional_boolean_collating', prop: 'collating', value: with_properties_optional_boolean_collating, type: 'boolean'}, {param: 'with_properties_optional_enum_error_handling', prop: 'error handling', value: with_properties_optional_enum_error_handling, type: 'enum'}])}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null,
      copies: with_properties_optional_integer_copies || null,
      fax_number: with_properties_optional_text_fax_number || null,
      pages_down: with_properties_optional_integer_pages_down || null,
      target_printer: with_properties_optional_text_target_printer || null,
      ending_page: with_properties_optional_integer_ending_page || null,
      pages_across: with_properties_optional_integer_pages_across || null,
      starting_page: with_properties_optional_integer_starting_page || null,
      requested_print_time: with_properties_optional_date_requested_print_time || null,
      collating: with_properties_optional_boolean_collating || null,
      error_handling: with_properties_optional_enum_error_handling || null
    };
  }

  async makeXmlFile(at_optional_location_specifier, with_data_optional_any) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new XML file ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null
    };
  }

  async makeMenuOfMenuBar(at_required_location_specifier_menu_bar, with_data_optional_any) {
    if (!at_required_location_specifier_menu_bar || typeof at_required_location_specifier_menu_bar !== "string") {
      throw new Error("at_required_location_specifier_menu_bar is required and must be a string");
    }

    const castedMenuBar = castAndEscape(at_required_location_specifier_menu_bar);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedMenuBar}
          make new menu at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      menu_bar: at_required_location_specifier_menu_bar,
      with_data: with_data_optional_any || null
    };
  }

  async makeComboBoxOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new combo box at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makeXmlData(at_optional_location_specifier, with_data_optional_any, with_properties_optional_text_name, with_properties_optional_text_text) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;
    const castedWith_properties_optional_text_name = with_properties_optional_text_name ? castAndEscape(with_properties_optional_text_name) : null;
    const castedWith_properties_optional_text_text = with_properties_optional_text_text ? castAndEscape(with_properties_optional_text_text) : null;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new XML data ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}${buildPropertiesRecord([{param: 'with_properties_optional_text_name', prop: 'name', value: with_properties_optional_text_name, type: 'text'}, {param: 'with_properties_optional_text_text', prop: 'text', value: with_properties_optional_text_text, type: 'text'}])}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null,
      name: with_properties_optional_text_name || null,
      text: with_properties_optional_text_text || null
    };
  }

  async makeSheetOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new sheet at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makeTextFieldOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new text field at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makeScriptingEnumeratorOfScriptingEnumeration(at_required_location_specifier_scripting_enumeration, with_data_optional_any) {
    if (!at_required_location_specifier_scripting_enumeration || typeof at_required_location_specifier_scripting_enumeration !== "string") {
      throw new Error("at_required_location_specifier_scripting_enumeration is required and must be a string");
    }

    const castedScriptingEnumeration = castAndEscape(at_required_location_specifier_scripting_enumeration);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedScriptingEnumeration}
          make new scripting enumerator at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      scripting_enumeration: at_required_location_specifier_scripting_enumeration,
      with_data: with_data_optional_any || null
    };
  }

  async makeInterfaceOfNetworkPreferencesObject(at_required_location_specifier_network_preferences_object, with_data_optional_any, with_properties_optional_text_duplex, with_properties_optional_integer_speed, with_properties_optional_integer_mtu, with_properties_optional_boolean_automatic) {
    if (!at_required_location_specifier_network_preferences_object || typeof at_required_location_specifier_network_preferences_object !== "string") {
      throw new Error("at_required_location_specifier_network_preferences_object is required and must be a string");
    }

    const castedNetworkPreferencesObject = castAndEscape(at_required_location_specifier_network_preferences_object);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;
    const castedWith_properties_optional_text_duplex = with_properties_optional_text_duplex ? castAndEscape(with_properties_optional_text_duplex) : null;
    const castedWith_properties_optional_integer_speed = with_properties_optional_integer_speed ? castAndEscape(with_properties_optional_integer_speed) : null;
    const castedWith_properties_optional_integer_mtu = with_properties_optional_integer_mtu ? castAndEscape(with_properties_optional_integer_mtu) : null;
    const castedWith_properties_optional_boolean_automatic = with_properties_optional_boolean_automatic ? castAndEscape(with_properties_optional_boolean_automatic) : null;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedNetworkPreferencesObject}
          make new interface at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}${buildPropertiesRecord([{param: 'with_properties_optional_text_duplex', prop: 'duplex', value: with_properties_optional_text_duplex, type: 'text'}, {param: 'with_properties_optional_integer_speed', prop: 'speed', value: with_properties_optional_integer_speed, type: 'integer'}, {param: 'with_properties_optional_integer_mtu', prop: 'mtu', value: with_properties_optional_integer_mtu, type: 'integer'}, {param: 'with_properties_optional_boolean_automatic', prop: 'automatic', value: with_properties_optional_boolean_automatic, type: 'boolean'}])}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      network_preferences_object: at_required_location_specifier_network_preferences_object,
      with_data: with_data_optional_any || null,
      duplex: with_properties_optional_text_duplex || null,
      speed: with_properties_optional_integer_speed || null,
      mtu: with_properties_optional_integer_mtu || null,
      automatic: with_properties_optional_boolean_automatic || null
    };
  }

  async makeRowOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new row at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makeDocument(at_optional_location_specifier, with_data_optional_any) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new document ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null
    };
  }

  async makeIncrementorOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new incrementor at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makeFileOfAlias(at_required_location_specifier_alias, with_data_optional_any, with_properties_optional_missing_value_file_type, with_properties_optional_boolean_stationery, with_properties_optional_missing_value_default_application, with_properties_optional_missing_value_creator_type) {
    if (!at_required_location_specifier_alias || typeof at_required_location_specifier_alias !== "string") {
      throw new Error("at_required_location_specifier_alias is required and must be a string");
    }

    const castedAlias = castAndEscape(at_required_location_specifier_alias);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;
    const castedWith_properties_optional_missing_value_file_type = with_properties_optional_missing_value_file_type ? castAndEscape(with_properties_optional_missing_value_file_type) : null;
    const castedWith_properties_optional_boolean_stationery = with_properties_optional_boolean_stationery ? castAndEscape(with_properties_optional_boolean_stationery) : null;
    const castedWith_properties_optional_missing_value_default_application = with_properties_optional_missing_value_default_application ? castAndEscape(with_properties_optional_missing_value_default_application) : null;
    const castedWith_properties_optional_missing_value_creator_type = with_properties_optional_missing_value_creator_type ? castAndEscape(with_properties_optional_missing_value_creator_type) : null;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedAlias}
          make new file at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}${buildPropertiesRecord([{param: 'with_properties_optional_missing_value_file_type', prop: 'file type', value: with_properties_optional_missing_value_file_type, type: 'missing value'}, {param: 'with_properties_optional_boolean_stationery', prop: 'stationery', value: with_properties_optional_boolean_stationery, type: 'boolean'}, {param: 'with_properties_optional_missing_value_default_application', prop: 'default application', value: with_properties_optional_missing_value_default_application, type: 'missing value'}, {param: 'with_properties_optional_missing_value_creator_type', prop: 'creator type', value: with_properties_optional_missing_value_creator_type, type: 'missing value'}])}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      alias: at_required_location_specifier_alias,
      with_data: with_data_optional_any || null,
      file_type: with_properties_optional_missing_value_file_type || null,
      stationery: with_properties_optional_boolean_stationery || null,
      default_application: with_properties_optional_missing_value_default_application || null,
      creator_type: with_properties_optional_missing_value_creator_type || null
    };
  }

  async makeFolderOfAlias(at_required_location_specifier_alias, with_data_optional_any) {
    if (!at_required_location_specifier_alias || typeof at_required_location_specifier_alias !== "string") {
      throw new Error("at_required_location_specifier_alias is required and must be a string");
    }

    const castedAlias = castAndEscape(at_required_location_specifier_alias);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedAlias}
          make new folder at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      alias: at_required_location_specifier_alias,
      with_data: with_data_optional_any || null
    };
  }

  async makeNetworkDomainObject(at_optional_location_specifier, with_data_optional_any) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new network domain object ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null
    };
  }

  async makeDeskAccessoryProcess(at_optional_location_specifier, with_data_optional_any) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new desk accessory process ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null
    };
  }

  async makeScrollAreaOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new scroll area at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makeColumnOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new column at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makePropertyListFile(at_optional_location_specifier, with_data_optional_any) {

    const castedAt = at_optional_location_specifier ? castAndEscape(at_optional_location_specifier) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        make new property list file ${at_optional_location_specifier ? ' at ' + valueForScriptAt : ''}${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      at: at_optional_location_specifier || null,
      with_data: with_data_optional_any || null
    };
  }

  async makeMenuButtonOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new menu button at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makeSplitterOfUiElement(at_required_location_specifier_ui_element, with_data_optional_any) {
    if (!at_required_location_specifier_ui_element || typeof at_required_location_specifier_ui_element !== "string") {
      throw new Error("at_required_location_specifier_ui_element is required and must be a string");
    }

    const castedUiElement = castAndEscape(at_required_location_specifier_ui_element);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedUiElement}
          make new splitter at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: at_required_location_specifier_ui_element,
      with_data: with_data_optional_any || null
    };
  }

  async makeCheckboxOfGroup(at_required_location_specifier_group, with_data_optional_any) {
    if (!at_required_location_specifier_group || typeof at_required_location_specifier_group !== "string") {
      throw new Error("at_required_location_specifier_group is required and must be a string");
    }

    const castedGroup = castAndEscape(at_required_location_specifier_group);
    const castedWith_data = with_data_optional_any ? castAndEscape(with_data_optional_any) : null;
    const valueForScriptWith_data = castedWith_data && typeof castedWith_data === 'string' && !castedWith_data.startsWith('{') && !castedWith_data.startsWith('date') ? `"${castedWith_data.replace(/"/g, "'")}"` : castedWith_data;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedGroup}
          make new checkbox at it ${with_data_optional_any ? ' with data ' + valueForScriptWith_data : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      group: at_required_location_specifier_group,
      with_data: with_data_optional_any || null
    };
  }

  async moveForDiskItemOfAliasOfDisk(target_disk_item_required_string, target_alias_required_string, target_disk_required_string, to_required_location_specifier) {
    if (!target_disk_item_required_string || typeof target_disk_item_required_string !== "string") {
      throw new Error("target_disk_item_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }
    if (to_required_location_specifier === undefined || to_required_location_specifier === null) {
      throw new Error("to_required_location_specifier is required");
    }

    const castedDiskItem = castAndEscape(target_disk_item_required_string);
    const castedAlias = castAndEscape(target_alias_required_string);
    const castedDisk = castAndEscape(target_disk_required_string);
    const castedTo = to_required_location_specifier ? castAndEscape(to_required_location_specifier) : null;
    const valueForScriptTo = castedTo && typeof castedTo === 'string' && !castedTo.startsWith('{') && !castedTo.startsWith('date') ? `"${castedTo.replace(/"/g, "'")}"` : castedTo;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell (${castedDiskItem} of ${castedAlias} of ${castedDisk})
          move it to ${valueForScriptTo}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      disk_item: target_disk_item_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string,
      to: to_required_location_specifier || null
    };
  }

  async getNameOfApplication() {
    const script = `
      tell application "System Events"
        return name
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getFrontmostOfApplication() {
    const script = `
      tell application "System Events"
        return frontmost
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getVersionOfApplication() {
    const script = `
      tell application "System Events"
        return version
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getNameOfDocument(target_document_required_string) {
    if (!target_document_required_string || typeof target_document_required_string !== "string") {
      throw new Error("target_document_required_string is required and must be a string");
    }

    const escapedDocument = escapeForAppleScript(target_document_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDocument}
          return name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      document: target_document_required_string
    };
  }

  async getModifiedOfDocument(target_document_required_string) {
    if (!target_document_required_string || typeof target_document_required_string !== "string") {
      throw new Error("target_document_required_string is required and must be a string");
    }

    const escapedDocument = escapeForAppleScript(target_document_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDocument}
          return modified of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      document: target_document_required_string
    };
  }

  async getFileOfDocument(target_document_required_string) {
    if (!target_document_required_string || typeof target_document_required_string !== "string") {
      throw new Error("target_document_required_string is required and must be a string");
    }

    const escapedDocument = escapeForAppleScript(target_document_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDocument}
          return file of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      document: target_document_required_string
    };
  }

  async getNameOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getIdOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return id of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getIndexOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return index of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async setIndexOfWindowOfProcess(target_window_required_string, target_process_required_string, value_required_integer) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }
    if (value_required_integer === undefined || value_required_integer === null) {
      throw new Error("value_required_integer is required");
    }

    const castedWindow = castAndEscape(target_window_required_string, 'string');
    const castedProcess = castAndEscape(target_process_required_string, 'string');
    const castedValue = castAndEscape(value_required_integer, 'integer');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedWindow} of ${castedProcess})
          set index of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_integer,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getBoundsOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return bounds of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async setBoundsOfWindowOfProcess(target_window_required_string, target_process_required_string, value_required_rectangle) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }
    if (value_required_rectangle === undefined || value_required_rectangle === null) {
      throw new Error("value_required_rectangle is required");
    }

    const castedWindow = castAndEscape(target_window_required_string, 'string');
    const castedProcess = castAndEscape(target_process_required_string, 'string');
    const castedValue = castAndEscape(value_required_rectangle, 'rectangle');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedWindow} of ${castedProcess})
          set bounds of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_rectangle,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getCloseableOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return closeable of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getMiniaturizableOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return miniaturizable of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getMiniaturizedOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return miniaturized of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async setMiniaturizedOfWindowOfProcess(target_window_required_string, target_process_required_string, value_required_boolean) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedWindow = castAndEscape(target_window_required_string, 'string');
    const castedProcess = castAndEscape(target_process_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedWindow} of ${castedProcess})
          set miniaturized of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getResizableOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return resizable of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getVisibleOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return visible of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async setVisibleOfWindowOfProcess(target_window_required_string, target_process_required_string, value_required_boolean) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedWindow = castAndEscape(target_window_required_string, 'string');
    const castedProcess = castAndEscape(target_process_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedWindow} of ${castedProcess})
          set visible of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getZoomableOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return zoomable of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getZoomedOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return zoomed of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async setZoomedOfWindowOfProcess(target_window_required_string, target_process_required_string, value_required_boolean) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedWindow = castAndEscape(target_window_required_string, 'string');
    const castedProcess = castAndEscape(target_process_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedWindow} of ${castedProcess})
          set zoomed of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getDocumentOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return document of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async abortTransaction() {
    const script = `
      tell application "System Events"
        abort transaction
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async beginTransaction() {
    const script = `
      tell application "System Events"
        begin transaction
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async endTransaction() {
    const script = `
      tell application "System Events"
        end transaction
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async getQuitDelayOfApplication() {
    const script = `
      tell application "System Events"
        return quit delay
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async setQuitDelayOfApplication(value_required_integer) {
    if (value_required_integer === undefined || value_required_integer === null) {
      throw new Error("value_required_integer is required");
    }

    const castedValue = castAndEscape(value_required_integer, 'integer');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        set quit delay to ${valueForScript}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_integer,
      script: script
    };
  }

  async getScriptMenuEnabledOfApplication() {
    const script = `
      tell application "System Events"
        return script menu enabled
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getCurrentUserOfApplication() {
    const script = `
      tell application "System Events"
        return current user
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getFullNameOfUser(target_user_required_string) {
    if (!target_user_required_string || typeof target_user_required_string !== "string") {
      throw new Error("target_user_required_string is required and must be a string");
    }

    const escapedUser = escapeForAppleScript(target_user_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedUser}
          return full name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      user: target_user_required_string
    };
  }

  async getHomeDirectoryOfUser(target_user_required_string) {
    if (!target_user_required_string || typeof target_user_required_string !== "string") {
      throw new Error("target_user_required_string is required and must be a string");
    }

    const escapedUser = escapeForAppleScript(target_user_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedUser}
          return home directory of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      user: target_user_required_string
    };
  }

  async getNameOfUser(target_user_required_string) {
    if (!target_user_required_string || typeof target_user_required_string !== "string") {
      throw new Error("target_user_required_string is required and must be a string");
    }

    const escapedUser = escapeForAppleScript(target_user_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedUser}
          return name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      user: target_user_required_string
    };
  }

  async getPicturePathOfUser(target_user_required_string) {
    if (!target_user_required_string || typeof target_user_required_string !== "string") {
      throw new Error("target_user_required_string is required and must be a string");
    }

    const escapedUser = escapeForAppleScript(target_user_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedUser}
          return picture path of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      user: target_user_required_string
    };
  }

  async setPicturePathOfUser(target_user_required_string, value_required_text) {
    if (!target_user_required_string || typeof target_user_required_string !== "string") {
      throw new Error("target_user_required_string is required and must be a string");
    }
    if (value_required_text === undefined || value_required_text === null) {
      throw new Error("value_required_text is required");
    }

    const castedUser = castAndEscape(target_user_required_string, 'string');
    const castedValue = castAndEscape(value_required_text, 'text');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedUser}
          set picture path of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_text,
      script: script,
      user: target_user_required_string
    };
  }

  async getAppearancePreferencesOfApplication() {
    const script = `
      tell application "System Events"
        return appearance preferences
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async setAppearancePreferencesOfApplication(value_required_appearance_preferences_object) {
    if (value_required_appearance_preferences_object === undefined || value_required_appearance_preferences_object === null) {
      throw new Error("value_required_appearance_preferences_object is required");
    }

    const castedValue = castAndEscape(value_required_appearance_preferences_object, 'appearance preferences object');
    // Determine value format for AppleScript
    let valueForScript;
    // Property type 'appearance preferences object' is a class reference - treat as object
    valueForScript = castedValue; // Object reference - no quotes

    const script = `
      tell application "System Events"
        set appearance preferences to ${valueForScript}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_appearance_preferences_object,
      script: script
    };
  }

  async getAppearanceOfAppearancePreferencesObject(target_appearance_preferences_object_required_string) {
    if (!target_appearance_preferences_object_required_string || typeof target_appearance_preferences_object_required_string !== "string") {
      throw new Error("target_appearance_preferences_object_required_string is required and must be a string");
    }

    const escapedAppearancePreferencesObject = escapeForAppleScript(target_appearance_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedAppearancePreferencesObject}
          return appearance of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      appearance_preferences_object: target_appearance_preferences_object_required_string
    };
  }

  async setAppearanceOfAppearancePreferencesObject(target_appearance_preferences_object_required_string, value_required_appearances) {
    if (!target_appearance_preferences_object_required_string || typeof target_appearance_preferences_object_required_string !== "string") {
      throw new Error("target_appearance_preferences_object_required_string is required and must be a string");
    }
    if (value_required_appearances === undefined || value_required_appearances === null) {
      throw new Error("value_required_appearances is required");
    }

    const castedAppearancePreferencesObject = castAndEscape(target_appearance_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_appearances, 'Appearances');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedAppearancePreferencesObject}
          set appearance of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_appearances,
      script: script,
      appearance_preferences_object: target_appearance_preferences_object_required_string
    };
  }

  async getFontSmoothingOfAppearancePreferencesObject(target_appearance_preferences_object_required_string) {
    if (!target_appearance_preferences_object_required_string || typeof target_appearance_preferences_object_required_string !== "string") {
      throw new Error("target_appearance_preferences_object_required_string is required and must be a string");
    }

    const escapedAppearancePreferencesObject = escapeForAppleScript(target_appearance_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedAppearancePreferencesObject}
          return font smoothing of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      appearance_preferences_object: target_appearance_preferences_object_required_string
    };
  }

  async setFontSmoothingOfAppearancePreferencesObject(target_appearance_preferences_object_required_string, value_required_boolean) {
    if (!target_appearance_preferences_object_required_string || typeof target_appearance_preferences_object_required_string !== "string") {
      throw new Error("target_appearance_preferences_object_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedAppearancePreferencesObject = castAndEscape(target_appearance_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedAppearancePreferencesObject}
          set font smoothing of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      appearance_preferences_object: target_appearance_preferences_object_required_string
    };
  }

  async getFontSmoothingLimitOfAppearancePreferencesObject(target_appearance_preferences_object_required_string) {
    if (!target_appearance_preferences_object_required_string || typeof target_appearance_preferences_object_required_string !== "string") {
      throw new Error("target_appearance_preferences_object_required_string is required and must be a string");
    }

    const escapedAppearancePreferencesObject = escapeForAppleScript(target_appearance_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedAppearancePreferencesObject}
          return font smoothing limit of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      appearance_preferences_object: target_appearance_preferences_object_required_string
    };
  }

  async getFontSmoothingStyleOfAppearancePreferencesObject(target_appearance_preferences_object_required_string) {
    if (!target_appearance_preferences_object_required_string || typeof target_appearance_preferences_object_required_string !== "string") {
      throw new Error("target_appearance_preferences_object_required_string is required and must be a string");
    }

    const escapedAppearancePreferencesObject = escapeForAppleScript(target_appearance_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedAppearancePreferencesObject}
          return font smoothing style of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      appearance_preferences_object: target_appearance_preferences_object_required_string
    };
  }

  async setFontSmoothingStyleOfAppearancePreferencesObject(target_appearance_preferences_object_required_string, value_required_fontsmoothingstyles) {
    if (!target_appearance_preferences_object_required_string || typeof target_appearance_preferences_object_required_string !== "string") {
      throw new Error("target_appearance_preferences_object_required_string is required and must be a string");
    }
    if (value_required_fontsmoothingstyles === undefined || value_required_fontsmoothingstyles === null) {
      throw new Error("value_required_fontsmoothingstyles is required");
    }

    const castedAppearancePreferencesObject = castAndEscape(target_appearance_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_fontsmoothingstyles, 'FontSmoothingStyles');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedAppearancePreferencesObject}
          set font smoothing style of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_fontsmoothingstyles,
      script: script,
      appearance_preferences_object: target_appearance_preferences_object_required_string
    };
  }

  async getHighlightColorOfAppearancePreferencesObject(target_appearance_preferences_object_required_string) {
    if (!target_appearance_preferences_object_required_string || typeof target_appearance_preferences_object_required_string !== "string") {
      throw new Error("target_appearance_preferences_object_required_string is required and must be a string");
    }

    const escapedAppearancePreferencesObject = escapeForAppleScript(target_appearance_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedAppearancePreferencesObject}
          return highlight color of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      appearance_preferences_object: target_appearance_preferences_object_required_string
    };
  }

  async setHighlightColorOfAppearancePreferencesObject(target_appearance_preferences_object_required_string, value_required_highlightcolors) {
    if (!target_appearance_preferences_object_required_string || typeof target_appearance_preferences_object_required_string !== "string") {
      throw new Error("target_appearance_preferences_object_required_string is required and must be a string");
    }
    if (value_required_highlightcolors === undefined || value_required_highlightcolors === null) {
      throw new Error("value_required_highlightcolors is required");
    }

    const castedAppearancePreferencesObject = castAndEscape(target_appearance_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_highlightcolors, 'HighlightColors');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedAppearancePreferencesObject}
          set highlight color of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_highlightcolors,
      script: script,
      appearance_preferences_object: target_appearance_preferences_object_required_string
    };
  }

  async getRecentApplicationsLimitOfAppearancePreferencesObject(target_appearance_preferences_object_required_string) {
    if (!target_appearance_preferences_object_required_string || typeof target_appearance_preferences_object_required_string !== "string") {
      throw new Error("target_appearance_preferences_object_required_string is required and must be a string");
    }

    const escapedAppearancePreferencesObject = escapeForAppleScript(target_appearance_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedAppearancePreferencesObject}
          return recent applications limit of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      appearance_preferences_object: target_appearance_preferences_object_required_string
    };
  }

  async setRecentApplicationsLimitOfAppearancePreferencesObject(target_appearance_preferences_object_required_string, value_required_integer) {
    if (!target_appearance_preferences_object_required_string || typeof target_appearance_preferences_object_required_string !== "string") {
      throw new Error("target_appearance_preferences_object_required_string is required and must be a string");
    }
    if (value_required_integer === undefined || value_required_integer === null) {
      throw new Error("value_required_integer is required");
    }

    const castedAppearancePreferencesObject = castAndEscape(target_appearance_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_integer, 'integer');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedAppearancePreferencesObject}
          set recent applications limit of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_integer,
      script: script,
      appearance_preferences_object: target_appearance_preferences_object_required_string
    };
  }

  async getRecentDocumentsLimitOfAppearancePreferencesObject(target_appearance_preferences_object_required_string) {
    if (!target_appearance_preferences_object_required_string || typeof target_appearance_preferences_object_required_string !== "string") {
      throw new Error("target_appearance_preferences_object_required_string is required and must be a string");
    }

    const escapedAppearancePreferencesObject = escapeForAppleScript(target_appearance_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedAppearancePreferencesObject}
          return recent documents limit of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      appearance_preferences_object: target_appearance_preferences_object_required_string
    };
  }

  async setRecentDocumentsLimitOfAppearancePreferencesObject(target_appearance_preferences_object_required_string, value_required_integer) {
    if (!target_appearance_preferences_object_required_string || typeof target_appearance_preferences_object_required_string !== "string") {
      throw new Error("target_appearance_preferences_object_required_string is required and must be a string");
    }
    if (value_required_integer === undefined || value_required_integer === null) {
      throw new Error("value_required_integer is required");
    }

    const castedAppearancePreferencesObject = castAndEscape(target_appearance_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_integer, 'integer');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedAppearancePreferencesObject}
          set recent documents limit of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_integer,
      script: script,
      appearance_preferences_object: target_appearance_preferences_object_required_string
    };
  }

  async getRecentServersLimitOfAppearancePreferencesObject(target_appearance_preferences_object_required_string) {
    if (!target_appearance_preferences_object_required_string || typeof target_appearance_preferences_object_required_string !== "string") {
      throw new Error("target_appearance_preferences_object_required_string is required and must be a string");
    }

    const escapedAppearancePreferencesObject = escapeForAppleScript(target_appearance_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedAppearancePreferencesObject}
          return recent servers limit of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      appearance_preferences_object: target_appearance_preferences_object_required_string
    };
  }

  async setRecentServersLimitOfAppearancePreferencesObject(target_appearance_preferences_object_required_string, value_required_integer) {
    if (!target_appearance_preferences_object_required_string || typeof target_appearance_preferences_object_required_string !== "string") {
      throw new Error("target_appearance_preferences_object_required_string is required and must be a string");
    }
    if (value_required_integer === undefined || value_required_integer === null) {
      throw new Error("value_required_integer is required");
    }

    const castedAppearancePreferencesObject = castAndEscape(target_appearance_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_integer, 'integer');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedAppearancePreferencesObject}
          set recent servers limit of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_integer,
      script: script,
      appearance_preferences_object: target_appearance_preferences_object_required_string
    };
  }

  async getScrollBarActionOfAppearancePreferencesObject(target_appearance_preferences_object_required_string) {
    if (!target_appearance_preferences_object_required_string || typeof target_appearance_preferences_object_required_string !== "string") {
      throw new Error("target_appearance_preferences_object_required_string is required and must be a string");
    }

    const escapedAppearancePreferencesObject = escapeForAppleScript(target_appearance_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedAppearancePreferencesObject}
          return scroll bar action of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      appearance_preferences_object: target_appearance_preferences_object_required_string
    };
  }

  async setScrollBarActionOfAppearancePreferencesObject(target_appearance_preferences_object_required_string, value_required_scrollpagebehaviors) {
    if (!target_appearance_preferences_object_required_string || typeof target_appearance_preferences_object_required_string !== "string") {
      throw new Error("target_appearance_preferences_object_required_string is required and must be a string");
    }
    if (value_required_scrollpagebehaviors === undefined || value_required_scrollpagebehaviors === null) {
      throw new Error("value_required_scrollpagebehaviors is required");
    }

    const castedAppearancePreferencesObject = castAndEscape(target_appearance_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_scrollpagebehaviors, 'ScrollPageBehaviors');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedAppearancePreferencesObject}
          set scroll bar action of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_scrollpagebehaviors,
      script: script,
      appearance_preferences_object: target_appearance_preferences_object_required_string
    };
  }

  async getSmoothScrollingOfAppearancePreferencesObject(target_appearance_preferences_object_required_string) {
    if (!target_appearance_preferences_object_required_string || typeof target_appearance_preferences_object_required_string !== "string") {
      throw new Error("target_appearance_preferences_object_required_string is required and must be a string");
    }

    const escapedAppearancePreferencesObject = escapeForAppleScript(target_appearance_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedAppearancePreferencesObject}
          return smooth scrolling of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      appearance_preferences_object: target_appearance_preferences_object_required_string
    };
  }

  async setSmoothScrollingOfAppearancePreferencesObject(target_appearance_preferences_object_required_string, value_required_boolean) {
    if (!target_appearance_preferences_object_required_string || typeof target_appearance_preferences_object_required_string !== "string") {
      throw new Error("target_appearance_preferences_object_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedAppearancePreferencesObject = castAndEscape(target_appearance_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedAppearancePreferencesObject}
          set smooth scrolling of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      appearance_preferences_object: target_appearance_preferences_object_required_string
    };
  }

  async getDarkModeOfAppearancePreferencesObject(target_appearance_preferences_object_required_string) {
    if (!target_appearance_preferences_object_required_string || typeof target_appearance_preferences_object_required_string !== "string") {
      throw new Error("target_appearance_preferences_object_required_string is required and must be a string");
    }

    const escapedAppearancePreferencesObject = escapeForAppleScript(target_appearance_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedAppearancePreferencesObject}
          return dark mode of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      appearance_preferences_object: target_appearance_preferences_object_required_string
    };
  }

  async setDarkModeOfAppearancePreferencesObject(target_appearance_preferences_object_required_string, value_required_boolean) {
    if (!target_appearance_preferences_object_required_string || typeof target_appearance_preferences_object_required_string !== "string") {
      throw new Error("target_appearance_preferences_object_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedAppearancePreferencesObject = castAndEscape(target_appearance_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedAppearancePreferencesObject}
          set dark mode of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      appearance_preferences_object: target_appearance_preferences_object_required_string
    };
  }

  async getCdAndDvdPreferencesOfApplication() {
    const script = `
      tell application "System Events"
        return CD and DVD preferences
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async setCdAndDvdPreferencesOfApplication(value_required_cd_and_dvd_preferences_object) {
    if (value_required_cd_and_dvd_preferences_object === undefined || value_required_cd_and_dvd_preferences_object === null) {
      throw new Error("value_required_cd_and_dvd_preferences_object is required");
    }

    const castedValue = castAndEscape(value_required_cd_and_dvd_preferences_object, 'CD and DVD preferences object');
    // Determine value format for AppleScript
    let valueForScript;
    // Property type 'CD and DVD preferences object' is a class reference - treat as object
    valueForScript = castedValue; // Object reference - no quotes

    const script = `
      tell application "System Events"
        set CD and DVD preferences to ${valueForScript}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_cd_and_dvd_preferences_object,
      script: script
    };
  }

  async getBlankCdOfCdAndDvdPreferencesObject(target_cd_and_dvd_preferences_object_required_string) {
    if (!target_cd_and_dvd_preferences_object_required_string || typeof target_cd_and_dvd_preferences_object_required_string !== "string") {
      throw new Error("target_cd_and_dvd_preferences_object_required_string is required and must be a string");
    }

    const escapedCdAndDvdPreferencesObject = escapeForAppleScript(target_cd_and_dvd_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedCdAndDvdPreferencesObject}
          return blank CD of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      cd_and_dvd_preferences_object: target_cd_and_dvd_preferences_object_required_string
    };
  }

  async getBlankDvdOfCdAndDvdPreferencesObject(target_cd_and_dvd_preferences_object_required_string) {
    if (!target_cd_and_dvd_preferences_object_required_string || typeof target_cd_and_dvd_preferences_object_required_string !== "string") {
      throw new Error("target_cd_and_dvd_preferences_object_required_string is required and must be a string");
    }

    const escapedCdAndDvdPreferencesObject = escapeForAppleScript(target_cd_and_dvd_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedCdAndDvdPreferencesObject}
          return blank DVD of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      cd_and_dvd_preferences_object: target_cd_and_dvd_preferences_object_required_string
    };
  }

  async getBlankBdOfCdAndDvdPreferencesObject(target_cd_and_dvd_preferences_object_required_string) {
    if (!target_cd_and_dvd_preferences_object_required_string || typeof target_cd_and_dvd_preferences_object_required_string !== "string") {
      throw new Error("target_cd_and_dvd_preferences_object_required_string is required and must be a string");
    }

    const escapedCdAndDvdPreferencesObject = escapeForAppleScript(target_cd_and_dvd_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedCdAndDvdPreferencesObject}
          return blank BD of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      cd_and_dvd_preferences_object: target_cd_and_dvd_preferences_object_required_string
    };
  }

  async getMusicCdOfCdAndDvdPreferencesObject(target_cd_and_dvd_preferences_object_required_string) {
    if (!target_cd_and_dvd_preferences_object_required_string || typeof target_cd_and_dvd_preferences_object_required_string !== "string") {
      throw new Error("target_cd_and_dvd_preferences_object_required_string is required and must be a string");
    }

    const escapedCdAndDvdPreferencesObject = escapeForAppleScript(target_cd_and_dvd_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedCdAndDvdPreferencesObject}
          return music CD of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      cd_and_dvd_preferences_object: target_cd_and_dvd_preferences_object_required_string
    };
  }

  async getPictureCdOfCdAndDvdPreferencesObject(target_cd_and_dvd_preferences_object_required_string) {
    if (!target_cd_and_dvd_preferences_object_required_string || typeof target_cd_and_dvd_preferences_object_required_string !== "string") {
      throw new Error("target_cd_and_dvd_preferences_object_required_string is required and must be a string");
    }

    const escapedCdAndDvdPreferencesObject = escapeForAppleScript(target_cd_and_dvd_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedCdAndDvdPreferencesObject}
          return picture CD of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      cd_and_dvd_preferences_object: target_cd_and_dvd_preferences_object_required_string
    };
  }

  async getVideoDvdOfCdAndDvdPreferencesObject(target_cd_and_dvd_preferences_object_required_string) {
    if (!target_cd_and_dvd_preferences_object_required_string || typeof target_cd_and_dvd_preferences_object_required_string !== "string") {
      throw new Error("target_cd_and_dvd_preferences_object_required_string is required and must be a string");
    }

    const escapedCdAndDvdPreferencesObject = escapeForAppleScript(target_cd_and_dvd_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedCdAndDvdPreferencesObject}
          return video DVD of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      cd_and_dvd_preferences_object: target_cd_and_dvd_preferences_object_required_string
    };
  }

  async getVideoBdOfCdAndDvdPreferencesObject(target_cd_and_dvd_preferences_object_required_string) {
    if (!target_cd_and_dvd_preferences_object_required_string || typeof target_cd_and_dvd_preferences_object_required_string !== "string") {
      throw new Error("target_cd_and_dvd_preferences_object_required_string is required and must be a string");
    }

    const escapedCdAndDvdPreferencesObject = escapeForAppleScript(target_cd_and_dvd_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedCdAndDvdPreferencesObject}
          return video BD of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      cd_and_dvd_preferences_object: target_cd_and_dvd_preferences_object_required_string
    };
  }

  async getCustomApplicationOfInsertionPreference(target_insertion_preference_required_string) {
    if (!target_insertion_preference_required_string || typeof target_insertion_preference_required_string !== "string") {
      throw new Error("target_insertion_preference_required_string is required and must be a string");
    }

    const escapedInsertionPreference = escapeForAppleScript(target_insertion_preference_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedInsertionPreference}
          return custom application of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      insertion_preference: target_insertion_preference_required_string
    };
  }

  async setCustomApplicationOfInsertionPreference(target_insertion_preference_required_string, value_required_text) {
    if (!target_insertion_preference_required_string || typeof target_insertion_preference_required_string !== "string") {
      throw new Error("target_insertion_preference_required_string is required and must be a string");
    }
    if (value_required_text === undefined || value_required_text === null) {
      throw new Error("value_required_text is required");
    }

    const castedInsertionPreference = castAndEscape(target_insertion_preference_required_string, 'string');
    const castedValue = castAndEscape(value_required_text, 'text');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedInsertionPreference}
          set custom application of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_text,
      script: script,
      insertion_preference: target_insertion_preference_required_string
    };
  }

  async getCustomScriptOfInsertionPreference(target_insertion_preference_required_string) {
    if (!target_insertion_preference_required_string || typeof target_insertion_preference_required_string !== "string") {
      throw new Error("target_insertion_preference_required_string is required and must be a string");
    }

    const escapedInsertionPreference = escapeForAppleScript(target_insertion_preference_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedInsertionPreference}
          return custom script of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      insertion_preference: target_insertion_preference_required_string
    };
  }

  async setCustomScriptOfInsertionPreference(target_insertion_preference_required_string, value_required_text) {
    if (!target_insertion_preference_required_string || typeof target_insertion_preference_required_string !== "string") {
      throw new Error("target_insertion_preference_required_string is required and must be a string");
    }
    if (value_required_text === undefined || value_required_text === null) {
      throw new Error("value_required_text is required");
    }

    const castedInsertionPreference = castAndEscape(target_insertion_preference_required_string, 'string');
    const castedValue = castAndEscape(value_required_text, 'text');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedInsertionPreference}
          set custom script of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_text,
      script: script,
      insertion_preference: target_insertion_preference_required_string
    };
  }

  async getInsertionActionOfInsertionPreference(target_insertion_preference_required_string) {
    if (!target_insertion_preference_required_string || typeof target_insertion_preference_required_string !== "string") {
      throw new Error("target_insertion_preference_required_string is required and must be a string");
    }

    const escapedInsertionPreference = escapeForAppleScript(target_insertion_preference_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedInsertionPreference}
          return insertion action of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      insertion_preference: target_insertion_preference_required_string
    };
  }

  async setInsertionActionOfInsertionPreference(target_insertion_preference_required_string, value_required_dhac) {
    if (!target_insertion_preference_required_string || typeof target_insertion_preference_required_string !== "string") {
      throw new Error("target_insertion_preference_required_string is required and must be a string");
    }
    if (value_required_dhac === undefined || value_required_dhac === null) {
      throw new Error("value_required_dhac is required");
    }

    const castedInsertionPreference = castAndEscape(target_insertion_preference_required_string, 'string');
    const castedValue = castAndEscape(value_required_dhac, 'dhac');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedInsertionPreference}
          set insertion action of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_dhac,
      script: script,
      insertion_preference: target_insertion_preference_required_string
    };
  }

  async getCurrentDesktopOfApplication() {
    const script = `
      tell application "System Events"
        return current desktop
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getNameOfDesktop(target_desktop_required_string) {
    if (!target_desktop_required_string || typeof target_desktop_required_string !== "string") {
      throw new Error("target_desktop_required_string is required and must be a string");
    }

    const escapedDesktop = escapeForAppleScript(target_desktop_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDesktop}
          return name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      desktop: target_desktop_required_string
    };
  }

  async getIdOfDesktop(target_desktop_required_string) {
    if (!target_desktop_required_string || typeof target_desktop_required_string !== "string") {
      throw new Error("target_desktop_required_string is required and must be a string");
    }

    const escapedDesktop = escapeForAppleScript(target_desktop_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDesktop}
          return id of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      desktop: target_desktop_required_string
    };
  }

  async getChangeIntervalOfDesktop(target_desktop_required_string) {
    if (!target_desktop_required_string || typeof target_desktop_required_string !== "string") {
      throw new Error("target_desktop_required_string is required and must be a string");
    }

    const escapedDesktop = escapeForAppleScript(target_desktop_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDesktop}
          return change interval of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      desktop: target_desktop_required_string
    };
  }

  async setChangeIntervalOfDesktop(target_desktop_required_string, value_required_real) {
    if (!target_desktop_required_string || typeof target_desktop_required_string !== "string") {
      throw new Error("target_desktop_required_string is required and must be a string");
    }
    if (value_required_real === undefined || value_required_real === null) {
      throw new Error("value_required_real is required");
    }

    const castedDesktop = castAndEscape(target_desktop_required_string, 'string');
    const castedValue = castAndEscape(value_required_real, 'real');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedDesktop}
          set change interval of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_real,
      script: script,
      desktop: target_desktop_required_string
    };
  }

  async getDisplayNameOfDesktop(target_desktop_required_string) {
    if (!target_desktop_required_string || typeof target_desktop_required_string !== "string") {
      throw new Error("target_desktop_required_string is required and must be a string");
    }

    const escapedDesktop = escapeForAppleScript(target_desktop_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDesktop}
          return display name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      desktop: target_desktop_required_string
    };
  }

  async getPictureOfDesktop(target_desktop_required_string) {
    if (!target_desktop_required_string || typeof target_desktop_required_string !== "string") {
      throw new Error("target_desktop_required_string is required and must be a string");
    }

    const escapedDesktop = escapeForAppleScript(target_desktop_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDesktop}
          return picture of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      desktop: target_desktop_required_string
    };
  }

  async setPictureOfDesktop(target_desktop_required_string, value_required_text) {
    if (!target_desktop_required_string || typeof target_desktop_required_string !== "string") {
      throw new Error("target_desktop_required_string is required and must be a string");
    }
    if (value_required_text === undefined || value_required_text === null) {
      throw new Error("value_required_text is required");
    }

    const castedDesktop = castAndEscape(target_desktop_required_string, 'string');
    const castedValue = castAndEscape(value_required_text, 'text');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedDesktop}
          set picture of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_text,
      script: script,
      desktop: target_desktop_required_string
    };
  }

  async getPictureRotationOfDesktop(target_desktop_required_string) {
    if (!target_desktop_required_string || typeof target_desktop_required_string !== "string") {
      throw new Error("target_desktop_required_string is required and must be a string");
    }

    const escapedDesktop = escapeForAppleScript(target_desktop_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDesktop}
          return picture rotation of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      desktop: target_desktop_required_string
    };
  }

  async setPictureRotationOfDesktop(target_desktop_required_string, value_required_integer) {
    if (!target_desktop_required_string || typeof target_desktop_required_string !== "string") {
      throw new Error("target_desktop_required_string is required and must be a string");
    }
    if (value_required_integer === undefined || value_required_integer === null) {
      throw new Error("value_required_integer is required");
    }

    const castedDesktop = castAndEscape(target_desktop_required_string, 'string');
    const castedValue = castAndEscape(value_required_integer, 'integer');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedDesktop}
          set picture rotation of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_integer,
      script: script,
      desktop: target_desktop_required_string
    };
  }

  async getPicturesFolderOfDesktop(target_desktop_required_string) {
    if (!target_desktop_required_string || typeof target_desktop_required_string !== "string") {
      throw new Error("target_desktop_required_string is required and must be a string");
    }

    const escapedDesktop = escapeForAppleScript(target_desktop_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDesktop}
          return pictures folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      desktop: target_desktop_required_string
    };
  }

  async setPicturesFolderOfDesktop(target_desktop_required_string, value_required_text) {
    if (!target_desktop_required_string || typeof target_desktop_required_string !== "string") {
      throw new Error("target_desktop_required_string is required and must be a string");
    }
    if (value_required_text === undefined || value_required_text === null) {
      throw new Error("value_required_text is required");
    }

    const castedDesktop = castAndEscape(target_desktop_required_string, 'string');
    const castedValue = castAndEscape(value_required_text, 'text');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedDesktop}
          set pictures folder of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_text,
      script: script,
      desktop: target_desktop_required_string
    };
  }

  async getRandomOrderOfDesktop(target_desktop_required_string) {
    if (!target_desktop_required_string || typeof target_desktop_required_string !== "string") {
      throw new Error("target_desktop_required_string is required and must be a string");
    }

    const escapedDesktop = escapeForAppleScript(target_desktop_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDesktop}
          return random order of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      desktop: target_desktop_required_string
    };
  }

  async setRandomOrderOfDesktop(target_desktop_required_string, value_required_boolean) {
    if (!target_desktop_required_string || typeof target_desktop_required_string !== "string") {
      throw new Error("target_desktop_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedDesktop = castAndEscape(target_desktop_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedDesktop}
          set random order of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      desktop: target_desktop_required_string
    };
  }

  async getTranslucentMenuBarOfDesktop(target_desktop_required_string) {
    if (!target_desktop_required_string || typeof target_desktop_required_string !== "string") {
      throw new Error("target_desktop_required_string is required and must be a string");
    }

    const escapedDesktop = escapeForAppleScript(target_desktop_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDesktop}
          return translucent menu bar of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      desktop: target_desktop_required_string
    };
  }

  async setTranslucentMenuBarOfDesktop(target_desktop_required_string, value_required_boolean) {
    if (!target_desktop_required_string || typeof target_desktop_required_string !== "string") {
      throw new Error("target_desktop_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedDesktop = castAndEscape(target_desktop_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedDesktop}
          set translucent menu bar of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      desktop: target_desktop_required_string
    };
  }

  async getDynamicStyleOfDesktop(target_desktop_required_string) {
    if (!target_desktop_required_string || typeof target_desktop_required_string !== "string") {
      throw new Error("target_desktop_required_string is required and must be a string");
    }

    const escapedDesktop = escapeForAppleScript(target_desktop_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDesktop}
          return dynamic style of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      desktop: target_desktop_required_string
    };
  }

  async setDynamicStyleOfDesktop(target_desktop_required_string, value_required_dynamic_style) {
    if (!target_desktop_required_string || typeof target_desktop_required_string !== "string") {
      throw new Error("target_desktop_required_string is required and must be a string");
    }
    if (value_required_dynamic_style === undefined || value_required_dynamic_style === null) {
      throw new Error("value_required_dynamic_style is required");
    }

    const castedDesktop = castAndEscape(target_desktop_required_string, 'string');
    const castedValue = castAndEscape(value_required_dynamic_style, 'dynamic style');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedDesktop}
          set dynamic style of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_dynamic_style,
      script: script,
      desktop: target_desktop_required_string
    };
  }

  async getDockPreferencesOfApplication() {
    const script = `
      tell application "System Events"
        return dock preferences
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async setDockPreferencesOfApplication(value_required_dock_preferences_object) {
    if (value_required_dock_preferences_object === undefined || value_required_dock_preferences_object === null) {
      throw new Error("value_required_dock_preferences_object is required");
    }

    const castedValue = castAndEscape(value_required_dock_preferences_object, 'dock preferences object');
    // Determine value format for AppleScript
    let valueForScript;
    // Property type 'dock preferences object' is a class reference - treat as object
    valueForScript = castedValue; // Object reference - no quotes

    const script = `
      tell application "System Events"
        set dock preferences to ${valueForScript}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_dock_preferences_object,
      script: script
    };
  }

  async getAnimateOfDockPreferencesObject(target_dock_preferences_object_required_string) {
    if (!target_dock_preferences_object_required_string || typeof target_dock_preferences_object_required_string !== "string") {
      throw new Error("target_dock_preferences_object_required_string is required and must be a string");
    }

    const escapedDockPreferencesObject = escapeForAppleScript(target_dock_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDockPreferencesObject}
          return animate of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      dock_preferences_object: target_dock_preferences_object_required_string
    };
  }

  async setAnimateOfDockPreferencesObject(target_dock_preferences_object_required_string, value_required_boolean) {
    if (!target_dock_preferences_object_required_string || typeof target_dock_preferences_object_required_string !== "string") {
      throw new Error("target_dock_preferences_object_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedDockPreferencesObject = castAndEscape(target_dock_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedDockPreferencesObject}
          set animate of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      dock_preferences_object: target_dock_preferences_object_required_string
    };
  }

  async getAutohideOfDockPreferencesObject(target_dock_preferences_object_required_string) {
    if (!target_dock_preferences_object_required_string || typeof target_dock_preferences_object_required_string !== "string") {
      throw new Error("target_dock_preferences_object_required_string is required and must be a string");
    }

    const escapedDockPreferencesObject = escapeForAppleScript(target_dock_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDockPreferencesObject}
          return autohide of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      dock_preferences_object: target_dock_preferences_object_required_string
    };
  }

  async setAutohideOfDockPreferencesObject(target_dock_preferences_object_required_string, value_required_boolean) {
    if (!target_dock_preferences_object_required_string || typeof target_dock_preferences_object_required_string !== "string") {
      throw new Error("target_dock_preferences_object_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedDockPreferencesObject = castAndEscape(target_dock_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedDockPreferencesObject}
          set autohide of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      dock_preferences_object: target_dock_preferences_object_required_string
    };
  }

  async getDockSizeOfDockPreferencesObject(target_dock_preferences_object_required_string) {
    if (!target_dock_preferences_object_required_string || typeof target_dock_preferences_object_required_string !== "string") {
      throw new Error("target_dock_preferences_object_required_string is required and must be a string");
    }

    const escapedDockPreferencesObject = escapeForAppleScript(target_dock_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDockPreferencesObject}
          return dock size of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      dock_preferences_object: target_dock_preferences_object_required_string
    };
  }

  async setDockSizeOfDockPreferencesObject(target_dock_preferences_object_required_string, value_required_real) {
    if (!target_dock_preferences_object_required_string || typeof target_dock_preferences_object_required_string !== "string") {
      throw new Error("target_dock_preferences_object_required_string is required and must be a string");
    }
    if (value_required_real === undefined || value_required_real === null) {
      throw new Error("value_required_real is required");
    }

    const castedDockPreferencesObject = castAndEscape(target_dock_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_real, 'real');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedDockPreferencesObject}
          set dock size of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_real,
      script: script,
      dock_preferences_object: target_dock_preferences_object_required_string
    };
  }

  async getAutohideMenuBarOfDockPreferencesObject(target_dock_preferences_object_required_string) {
    if (!target_dock_preferences_object_required_string || typeof target_dock_preferences_object_required_string !== "string") {
      throw new Error("target_dock_preferences_object_required_string is required and must be a string");
    }

    const escapedDockPreferencesObject = escapeForAppleScript(target_dock_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDockPreferencesObject}
          return autohide menu bar of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      dock_preferences_object: target_dock_preferences_object_required_string
    };
  }

  async setAutohideMenuBarOfDockPreferencesObject(target_dock_preferences_object_required_string, value_required_boolean) {
    if (!target_dock_preferences_object_required_string || typeof target_dock_preferences_object_required_string !== "string") {
      throw new Error("target_dock_preferences_object_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedDockPreferencesObject = castAndEscape(target_dock_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedDockPreferencesObject}
          set autohide menu bar of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      dock_preferences_object: target_dock_preferences_object_required_string
    };
  }

  async getDoubleClickBehaviorOfDockPreferencesObject(target_dock_preferences_object_required_string) {
    if (!target_dock_preferences_object_required_string || typeof target_dock_preferences_object_required_string !== "string") {
      throw new Error("target_dock_preferences_object_required_string is required and must be a string");
    }

    const escapedDockPreferencesObject = escapeForAppleScript(target_dock_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDockPreferencesObject}
          return double click behavior of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      dock_preferences_object: target_dock_preferences_object_required_string
    };
  }

  async setDoubleClickBehaviorOfDockPreferencesObject(target_dock_preferences_object_required_string, value_required_dpbh) {
    if (!target_dock_preferences_object_required_string || typeof target_dock_preferences_object_required_string !== "string") {
      throw new Error("target_dock_preferences_object_required_string is required and must be a string");
    }
    if (value_required_dpbh === undefined || value_required_dpbh === null) {
      throw new Error("value_required_dpbh is required");
    }

    const castedDockPreferencesObject = castAndEscape(target_dock_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_dpbh, 'dpbh');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedDockPreferencesObject}
          set double click behavior of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_dpbh,
      script: script,
      dock_preferences_object: target_dock_preferences_object_required_string
    };
  }

  async getMagnificationOfDockPreferencesObject(target_dock_preferences_object_required_string) {
    if (!target_dock_preferences_object_required_string || typeof target_dock_preferences_object_required_string !== "string") {
      throw new Error("target_dock_preferences_object_required_string is required and must be a string");
    }

    const escapedDockPreferencesObject = escapeForAppleScript(target_dock_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDockPreferencesObject}
          return magnification of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      dock_preferences_object: target_dock_preferences_object_required_string
    };
  }

  async setMagnificationOfDockPreferencesObject(target_dock_preferences_object_required_string, value_required_boolean) {
    if (!target_dock_preferences_object_required_string || typeof target_dock_preferences_object_required_string !== "string") {
      throw new Error("target_dock_preferences_object_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedDockPreferencesObject = castAndEscape(target_dock_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedDockPreferencesObject}
          set magnification of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      dock_preferences_object: target_dock_preferences_object_required_string
    };
  }

  async getMagnificationSizeOfDockPreferencesObject(target_dock_preferences_object_required_string) {
    if (!target_dock_preferences_object_required_string || typeof target_dock_preferences_object_required_string !== "string") {
      throw new Error("target_dock_preferences_object_required_string is required and must be a string");
    }

    const escapedDockPreferencesObject = escapeForAppleScript(target_dock_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDockPreferencesObject}
          return magnification size of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      dock_preferences_object: target_dock_preferences_object_required_string
    };
  }

  async setMagnificationSizeOfDockPreferencesObject(target_dock_preferences_object_required_string, value_required_real) {
    if (!target_dock_preferences_object_required_string || typeof target_dock_preferences_object_required_string !== "string") {
      throw new Error("target_dock_preferences_object_required_string is required and must be a string");
    }
    if (value_required_real === undefined || value_required_real === null) {
      throw new Error("value_required_real is required");
    }

    const castedDockPreferencesObject = castAndEscape(target_dock_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_real, 'real');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedDockPreferencesObject}
          set magnification size of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_real,
      script: script,
      dock_preferences_object: target_dock_preferences_object_required_string
    };
  }

  async getMinimizeEffectOfDockPreferencesObject(target_dock_preferences_object_required_string) {
    if (!target_dock_preferences_object_required_string || typeof target_dock_preferences_object_required_string !== "string") {
      throw new Error("target_dock_preferences_object_required_string is required and must be a string");
    }

    const escapedDockPreferencesObject = escapeForAppleScript(target_dock_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDockPreferencesObject}
          return minimize effect of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      dock_preferences_object: target_dock_preferences_object_required_string
    };
  }

  async setMinimizeEffectOfDockPreferencesObject(target_dock_preferences_object_required_string, value_required_dpef) {
    if (!target_dock_preferences_object_required_string || typeof target_dock_preferences_object_required_string !== "string") {
      throw new Error("target_dock_preferences_object_required_string is required and must be a string");
    }
    if (value_required_dpef === undefined || value_required_dpef === null) {
      throw new Error("value_required_dpef is required");
    }

    const castedDockPreferencesObject = castAndEscape(target_dock_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_dpef, 'dpef');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedDockPreferencesObject}
          set minimize effect of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_dpef,
      script: script,
      dock_preferences_object: target_dock_preferences_object_required_string
    };
  }

  async getMinimizeIntoApplicationOfDockPreferencesObject(target_dock_preferences_object_required_string) {
    if (!target_dock_preferences_object_required_string || typeof target_dock_preferences_object_required_string !== "string") {
      throw new Error("target_dock_preferences_object_required_string is required and must be a string");
    }

    const escapedDockPreferencesObject = escapeForAppleScript(target_dock_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDockPreferencesObject}
          return minimize into application of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      dock_preferences_object: target_dock_preferences_object_required_string
    };
  }

  async setMinimizeIntoApplicationOfDockPreferencesObject(target_dock_preferences_object_required_string, value_required_boolean) {
    if (!target_dock_preferences_object_required_string || typeof target_dock_preferences_object_required_string !== "string") {
      throw new Error("target_dock_preferences_object_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedDockPreferencesObject = castAndEscape(target_dock_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedDockPreferencesObject}
          set minimize into application of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      dock_preferences_object: target_dock_preferences_object_required_string
    };
  }

  async getScreenEdgeOfDockPreferencesObject(target_dock_preferences_object_required_string) {
    if (!target_dock_preferences_object_required_string || typeof target_dock_preferences_object_required_string !== "string") {
      throw new Error("target_dock_preferences_object_required_string is required and must be a string");
    }

    const escapedDockPreferencesObject = escapeForAppleScript(target_dock_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDockPreferencesObject}
          return screen edge of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      dock_preferences_object: target_dock_preferences_object_required_string
    };
  }

  async setScreenEdgeOfDockPreferencesObject(target_dock_preferences_object_required_string, value_required_dpls) {
    if (!target_dock_preferences_object_required_string || typeof target_dock_preferences_object_required_string !== "string") {
      throw new Error("target_dock_preferences_object_required_string is required and must be a string");
    }
    if (value_required_dpls === undefined || value_required_dpls === null) {
      throw new Error("value_required_dpls is required");
    }

    const castedDockPreferencesObject = castAndEscape(target_dock_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_dpls, 'dpls');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedDockPreferencesObject}
          set screen edge of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_dpls,
      script: script,
      dock_preferences_object: target_dock_preferences_object_required_string
    };
  }

  async getShowIndicatorsOfDockPreferencesObject(target_dock_preferences_object_required_string) {
    if (!target_dock_preferences_object_required_string || typeof target_dock_preferences_object_required_string !== "string") {
      throw new Error("target_dock_preferences_object_required_string is required and must be a string");
    }

    const escapedDockPreferencesObject = escapeForAppleScript(target_dock_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDockPreferencesObject}
          return show indicators of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      dock_preferences_object: target_dock_preferences_object_required_string
    };
  }

  async setShowIndicatorsOfDockPreferencesObject(target_dock_preferences_object_required_string, value_required_boolean) {
    if (!target_dock_preferences_object_required_string || typeof target_dock_preferences_object_required_string !== "string") {
      throw new Error("target_dock_preferences_object_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedDockPreferencesObject = castAndEscape(target_dock_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedDockPreferencesObject}
          set show indicators of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      dock_preferences_object: target_dock_preferences_object_required_string
    };
  }

  async getShowRecentsOfDockPreferencesObject(target_dock_preferences_object_required_string) {
    if (!target_dock_preferences_object_required_string || typeof target_dock_preferences_object_required_string !== "string") {
      throw new Error("target_dock_preferences_object_required_string is required and must be a string");
    }

    const escapedDockPreferencesObject = escapeForAppleScript(target_dock_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDockPreferencesObject}
          return show recents of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      dock_preferences_object: target_dock_preferences_object_required_string
    };
  }

  async setShowRecentsOfDockPreferencesObject(target_dock_preferences_object_required_string, value_required_boolean) {
    if (!target_dock_preferences_object_required_string || typeof target_dock_preferences_object_required_string !== "string") {
      throw new Error("target_dock_preferences_object_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedDockPreferencesObject = castAndEscape(target_dock_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedDockPreferencesObject}
          set show recents of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      dock_preferences_object: target_dock_preferences_object_required_string
    };
  }

  async getHiddenOfLoginItem(target_login_item_required_string) {
    if (!target_login_item_required_string || typeof target_login_item_required_string !== "string") {
      throw new Error("target_login_item_required_string is required and must be a string");
    }

    const escapedLoginItem = escapeForAppleScript(target_login_item_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedLoginItem}
          return hidden of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      login_item: target_login_item_required_string
    };
  }

  async setHiddenOfLoginItem(target_login_item_required_string, value_required_boolean) {
    if (!target_login_item_required_string || typeof target_login_item_required_string !== "string") {
      throw new Error("target_login_item_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedLoginItem = castAndEscape(target_login_item_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedLoginItem}
          set hidden of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      login_item: target_login_item_required_string
    };
  }

  async getKindOfLoginItem(target_login_item_required_string) {
    if (!target_login_item_required_string || typeof target_login_item_required_string !== "string") {
      throw new Error("target_login_item_required_string is required and must be a string");
    }

    const escapedLoginItem = escapeForAppleScript(target_login_item_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedLoginItem}
          return kind of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      login_item: target_login_item_required_string
    };
  }

  async getNameOfLoginItem(target_login_item_required_string) {
    if (!target_login_item_required_string || typeof target_login_item_required_string !== "string") {
      throw new Error("target_login_item_required_string is required and must be a string");
    }

    const escapedLoginItem = escapeForAppleScript(target_login_item_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedLoginItem}
          return name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      login_item: target_login_item_required_string
    };
  }

  async getPathOfLoginItem(target_login_item_required_string) {
    if (!target_login_item_required_string || typeof target_login_item_required_string !== "string") {
      throw new Error("target_login_item_required_string is required and must be a string");
    }

    const escapedLoginItem = escapeForAppleScript(target_login_item_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedLoginItem}
          return path of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      login_item: target_login_item_required_string
    };
  }

  async connectConfiguration(direct_parameter_required_configuration) {
    if (direct_parameter_required_configuration === undefined || direct_parameter_required_configuration === null) {
      throw new Error("direct_parameter_required_configuration is required");
    }

    const castedDirect_parameter = direct_parameter_required_configuration ? castAndEscape(direct_parameter_required_configuration) : null;

    const script = `
      tell application "System Events"
        connect ${castedDirect_parameter}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_configuration || null
    };
  }

  async connectService(direct_parameter_required_service) {
    if (direct_parameter_required_service === undefined || direct_parameter_required_service === null) {
      throw new Error("direct_parameter_required_service is required");
    }

    const castedDirect_parameter = direct_parameter_required_service ? castAndEscape(direct_parameter_required_service) : null;

    const script = `
      tell application "System Events"
        connect ${castedDirect_parameter}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_service || null
    };
  }

  async disconnectConfiguration(direct_parameter_required_configuration) {
    if (direct_parameter_required_configuration === undefined || direct_parameter_required_configuration === null) {
      throw new Error("direct_parameter_required_configuration is required");
    }

    const castedDirect_parameter = direct_parameter_required_configuration ? castAndEscape(direct_parameter_required_configuration) : null;

    const script = `
      tell application "System Events"
        disconnect ${castedDirect_parameter}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_configuration || null
    };
  }

  async disconnectService(direct_parameter_required_service) {
    if (direct_parameter_required_service === undefined || direct_parameter_required_service === null) {
      throw new Error("direct_parameter_required_service is required");
    }

    const castedDirect_parameter = direct_parameter_required_service ? castAndEscape(direct_parameter_required_service) : null;

    const script = `
      tell application "System Events"
        disconnect ${castedDirect_parameter}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_service || null
    };
  }

  async getNetworkPreferencesOfApplication() {
    const script = `
      tell application "System Events"
        return network preferences
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async setNetworkPreferencesOfApplication(value_required_network_preferences_object) {
    if (value_required_network_preferences_object === undefined || value_required_network_preferences_object === null) {
      throw new Error("value_required_network_preferences_object is required");
    }

    const castedValue = castAndEscape(value_required_network_preferences_object, 'network preferences object');
    // Determine value format for AppleScript
    let valueForScript;
    // Property type 'network preferences object' is a class reference - treat as object
    valueForScript = castedValue; // Object reference - no quotes

    const script = `
      tell application "System Events"
        set network preferences to ${valueForScript}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_network_preferences_object,
      script: script
    };
  }

  async getAccountNameOfConfigurationOfServiceOfLocationOf(target_configuration_required_string, target_service_required_string, target_location_required_string, target_network_preferences_object_required_string) {
    if (!target_configuration_required_string || typeof target_configuration_required_string !== "string") {
      throw new Error("target_configuration_required_string is required and must be a string");
    }
    if (!target_service_required_string || typeof target_service_required_string !== "string") {
      throw new Error("target_service_required_string is required and must be a string");
    }
    if (!target_location_required_string || typeof target_location_required_string !== "string") {
      throw new Error("target_location_required_string is required and must be a string");
    }
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }

    const escapedConfiguration = escapeForAppleScript(target_configuration_required_string);
    const escapedService = escapeForAppleScript(target_service_required_string);
    const escapedLocation = escapeForAppleScript(target_location_required_string);
    const escapedNetworkPreferencesObject = escapeForAppleScript(target_network_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedConfiguration} of ${escapedService} of ${escapedLocation} of ${escapedNetworkPreferencesObject})
          return account name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      configuration: target_configuration_required_string,
      service: target_service_required_string,
      location: target_location_required_string,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async setAccountNameOfConfigurationOfServiceOfLocationOf(target_configuration_required_string, target_service_required_string, target_location_required_string, target_network_preferences_object_required_string, value_required_text) {
    if (!target_configuration_required_string || typeof target_configuration_required_string !== "string") {
      throw new Error("target_configuration_required_string is required and must be a string");
    }
    if (!target_service_required_string || typeof target_service_required_string !== "string") {
      throw new Error("target_service_required_string is required and must be a string");
    }
    if (!target_location_required_string || typeof target_location_required_string !== "string") {
      throw new Error("target_location_required_string is required and must be a string");
    }
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }
    if (value_required_text === undefined || value_required_text === null) {
      throw new Error("value_required_text is required");
    }

    const castedConfiguration = castAndEscape(target_configuration_required_string, 'string');
    const castedService = castAndEscape(target_service_required_string, 'string');
    const castedLocation = castAndEscape(target_location_required_string, 'string');
    const castedNetworkPreferencesObject = castAndEscape(target_network_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_text, 'text');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedConfiguration} of ${castedService} of ${castedLocation} of ${castedNetworkPreferencesObject})
          set account name of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_text,
      script: script,
      configuration: target_configuration_required_string,
      service: target_service_required_string,
      location: target_location_required_string,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async getConnectedOfConfigurationOfServiceOfLocationOf(target_configuration_required_string, target_service_required_string, target_location_required_string, target_network_preferences_object_required_string) {
    if (!target_configuration_required_string || typeof target_configuration_required_string !== "string") {
      throw new Error("target_configuration_required_string is required and must be a string");
    }
    if (!target_service_required_string || typeof target_service_required_string !== "string") {
      throw new Error("target_service_required_string is required and must be a string");
    }
    if (!target_location_required_string || typeof target_location_required_string !== "string") {
      throw new Error("target_location_required_string is required and must be a string");
    }
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }

    const escapedConfiguration = escapeForAppleScript(target_configuration_required_string);
    const escapedService = escapeForAppleScript(target_service_required_string);
    const escapedLocation = escapeForAppleScript(target_location_required_string);
    const escapedNetworkPreferencesObject = escapeForAppleScript(target_network_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedConfiguration} of ${escapedService} of ${escapedLocation} of ${escapedNetworkPreferencesObject})
          return connected of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      configuration: target_configuration_required_string,
      service: target_service_required_string,
      location: target_location_required_string,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async getIdOfConfigurationOfServiceOfLocationOfNetwork(target_configuration_required_string, target_service_required_string, target_location_required_string, target_network_preferences_object_required_string) {
    if (!target_configuration_required_string || typeof target_configuration_required_string !== "string") {
      throw new Error("target_configuration_required_string is required and must be a string");
    }
    if (!target_service_required_string || typeof target_service_required_string !== "string") {
      throw new Error("target_service_required_string is required and must be a string");
    }
    if (!target_location_required_string || typeof target_location_required_string !== "string") {
      throw new Error("target_location_required_string is required and must be a string");
    }
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }

    const escapedConfiguration = escapeForAppleScript(target_configuration_required_string);
    const escapedService = escapeForAppleScript(target_service_required_string);
    const escapedLocation = escapeForAppleScript(target_location_required_string);
    const escapedNetworkPreferencesObject = escapeForAppleScript(target_network_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedConfiguration} of ${escapedService} of ${escapedLocation} of ${escapedNetworkPreferencesObject})
          return id of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      configuration: target_configuration_required_string,
      service: target_service_required_string,
      location: target_location_required_string,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async getNameOfConfigurationOfServiceOfLocationOfNetwork(target_configuration_required_string, target_service_required_string, target_location_required_string, target_network_preferences_object_required_string) {
    if (!target_configuration_required_string || typeof target_configuration_required_string !== "string") {
      throw new Error("target_configuration_required_string is required and must be a string");
    }
    if (!target_service_required_string || typeof target_service_required_string !== "string") {
      throw new Error("target_service_required_string is required and must be a string");
    }
    if (!target_location_required_string || typeof target_location_required_string !== "string") {
      throw new Error("target_location_required_string is required and must be a string");
    }
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }

    const escapedConfiguration = escapeForAppleScript(target_configuration_required_string);
    const escapedService = escapeForAppleScript(target_service_required_string);
    const escapedLocation = escapeForAppleScript(target_location_required_string);
    const escapedNetworkPreferencesObject = escapeForAppleScript(target_network_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedConfiguration} of ${escapedService} of ${escapedLocation} of ${escapedNetworkPreferencesObject})
          return name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      configuration: target_configuration_required_string,
      service: target_service_required_string,
      location: target_location_required_string,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async getAutomaticOfInterfaceOfNetworkPreferencesObject(target_interface_required_string, target_network_preferences_object_required_string) {
    if (!target_interface_required_string || typeof target_interface_required_string !== "string") {
      throw new Error("target_interface_required_string is required and must be a string");
    }
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }

    const escapedInterface = escapeForAppleScript(target_interface_required_string);
    const escapedNetworkPreferencesObject = escapeForAppleScript(target_network_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedInterface} of ${escapedNetworkPreferencesObject})
          return automatic of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      interface: target_interface_required_string,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async setAutomaticOfInterfaceOfNetworkPreferencesObject(target_interface_required_string, target_network_preferences_object_required_string, value_required_boolean) {
    if (!target_interface_required_string || typeof target_interface_required_string !== "string") {
      throw new Error("target_interface_required_string is required and must be a string");
    }
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedInterface = castAndEscape(target_interface_required_string, 'string');
    const castedNetworkPreferencesObject = castAndEscape(target_network_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedInterface} of ${castedNetworkPreferencesObject})
          set automatic of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      interface: target_interface_required_string,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async getDuplexOfInterfaceOfNetworkPreferencesObject(target_interface_required_string, target_network_preferences_object_required_string) {
    if (!target_interface_required_string || typeof target_interface_required_string !== "string") {
      throw new Error("target_interface_required_string is required and must be a string");
    }
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }

    const escapedInterface = escapeForAppleScript(target_interface_required_string);
    const escapedNetworkPreferencesObject = escapeForAppleScript(target_network_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedInterface} of ${escapedNetworkPreferencesObject})
          return duplex of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      interface: target_interface_required_string,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async setDuplexOfInterfaceOfNetworkPreferencesObject(target_interface_required_string, target_network_preferences_object_required_string, value_required_text) {
    if (!target_interface_required_string || typeof target_interface_required_string !== "string") {
      throw new Error("target_interface_required_string is required and must be a string");
    }
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }
    if (value_required_text === undefined || value_required_text === null) {
      throw new Error("value_required_text is required");
    }

    const castedInterface = castAndEscape(target_interface_required_string, 'string');
    const castedNetworkPreferencesObject = castAndEscape(target_network_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_text, 'text');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedInterface} of ${castedNetworkPreferencesObject})
          set duplex of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_text,
      script: script,
      interface: target_interface_required_string,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async getIdOfInterfaceOfNetworkPreferencesObject(target_interface_required_string, target_network_preferences_object_required_string) {
    if (!target_interface_required_string || typeof target_interface_required_string !== "string") {
      throw new Error("target_interface_required_string is required and must be a string");
    }
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }

    const escapedInterface = escapeForAppleScript(target_interface_required_string);
    const escapedNetworkPreferencesObject = escapeForAppleScript(target_network_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedInterface} of ${escapedNetworkPreferencesObject})
          return id of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      interface: target_interface_required_string,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async getKindOfInterfaceOfNetworkPreferencesObject(target_interface_required_string, target_network_preferences_object_required_string) {
    if (!target_interface_required_string || typeof target_interface_required_string !== "string") {
      throw new Error("target_interface_required_string is required and must be a string");
    }
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }

    const escapedInterface = escapeForAppleScript(target_interface_required_string);
    const escapedNetworkPreferencesObject = escapeForAppleScript(target_network_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedInterface} of ${escapedNetworkPreferencesObject})
          return kind of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      interface: target_interface_required_string,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async getMacAddressOfInterfaceOfNetworkPreferencesObject(target_interface_required_string, target_network_preferences_object_required_string) {
    if (!target_interface_required_string || typeof target_interface_required_string !== "string") {
      throw new Error("target_interface_required_string is required and must be a string");
    }
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }

    const escapedInterface = escapeForAppleScript(target_interface_required_string);
    const escapedNetworkPreferencesObject = escapeForAppleScript(target_network_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedInterface} of ${escapedNetworkPreferencesObject})
          return MAC address of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      interface: target_interface_required_string,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async getMtuOfInterfaceOfNetworkPreferencesObject(target_interface_required_string, target_network_preferences_object_required_string) {
    if (!target_interface_required_string || typeof target_interface_required_string !== "string") {
      throw new Error("target_interface_required_string is required and must be a string");
    }
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }

    const escapedInterface = escapeForAppleScript(target_interface_required_string);
    const escapedNetworkPreferencesObject = escapeForAppleScript(target_network_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedInterface} of ${escapedNetworkPreferencesObject})
          return mtu of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      interface: target_interface_required_string,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async setMtuOfInterfaceOfNetworkPreferencesObject(target_interface_required_string, target_network_preferences_object_required_string, value_required_integer) {
    if (!target_interface_required_string || typeof target_interface_required_string !== "string") {
      throw new Error("target_interface_required_string is required and must be a string");
    }
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }
    if (value_required_integer === undefined || value_required_integer === null) {
      throw new Error("value_required_integer is required");
    }

    const castedInterface = castAndEscape(target_interface_required_string, 'string');
    const castedNetworkPreferencesObject = castAndEscape(target_network_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_integer, 'integer');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedInterface} of ${castedNetworkPreferencesObject})
          set mtu of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_integer,
      script: script,
      interface: target_interface_required_string,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async getNameOfInterfaceOfNetworkPreferencesObject(target_interface_required_string, target_network_preferences_object_required_string) {
    if (!target_interface_required_string || typeof target_interface_required_string !== "string") {
      throw new Error("target_interface_required_string is required and must be a string");
    }
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }

    const escapedInterface = escapeForAppleScript(target_interface_required_string);
    const escapedNetworkPreferencesObject = escapeForAppleScript(target_network_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedInterface} of ${escapedNetworkPreferencesObject})
          return name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      interface: target_interface_required_string,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async getSpeedOfInterfaceOfNetworkPreferencesObject(target_interface_required_string, target_network_preferences_object_required_string) {
    if (!target_interface_required_string || typeof target_interface_required_string !== "string") {
      throw new Error("target_interface_required_string is required and must be a string");
    }
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }

    const escapedInterface = escapeForAppleScript(target_interface_required_string);
    const escapedNetworkPreferencesObject = escapeForAppleScript(target_network_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedInterface} of ${escapedNetworkPreferencesObject})
          return speed of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      interface: target_interface_required_string,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async setSpeedOfInterfaceOfNetworkPreferencesObject(target_interface_required_string, target_network_preferences_object_required_string, value_required_integer) {
    if (!target_interface_required_string || typeof target_interface_required_string !== "string") {
      throw new Error("target_interface_required_string is required and must be a string");
    }
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }
    if (value_required_integer === undefined || value_required_integer === null) {
      throw new Error("value_required_integer is required");
    }

    const castedInterface = castAndEscape(target_interface_required_string, 'string');
    const castedNetworkPreferencesObject = castAndEscape(target_network_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_integer, 'integer');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedInterface} of ${castedNetworkPreferencesObject})
          set speed of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_integer,
      script: script,
      interface: target_interface_required_string,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async getIdOfLocationOfNetworkPreferencesObject(target_location_required_string, target_network_preferences_object_required_string) {
    if (!target_location_required_string || typeof target_location_required_string !== "string") {
      throw new Error("target_location_required_string is required and must be a string");
    }
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }

    const escapedLocation = escapeForAppleScript(target_location_required_string);
    const escapedNetworkPreferencesObject = escapeForAppleScript(target_network_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedLocation} of ${escapedNetworkPreferencesObject})
          return id of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      location: target_location_required_string,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async getNameOfLocationOfNetworkPreferencesObject(target_location_required_string, target_network_preferences_object_required_string) {
    if (!target_location_required_string || typeof target_location_required_string !== "string") {
      throw new Error("target_location_required_string is required and must be a string");
    }
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }

    const escapedLocation = escapeForAppleScript(target_location_required_string);
    const escapedNetworkPreferencesObject = escapeForAppleScript(target_network_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedLocation} of ${escapedNetworkPreferencesObject})
          return name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      location: target_location_required_string,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async setNameOfLocationOfNetworkPreferencesObject(target_location_required_string, target_network_preferences_object_required_string, value_required_text) {
    if (!target_location_required_string || typeof target_location_required_string !== "string") {
      throw new Error("target_location_required_string is required and must be a string");
    }
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }
    if (value_required_text === undefined || value_required_text === null) {
      throw new Error("value_required_text is required");
    }

    const castedLocation = castAndEscape(target_location_required_string, 'string');
    const castedNetworkPreferencesObject = castAndEscape(target_network_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_text, 'text');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedLocation} of ${castedNetworkPreferencesObject})
          set name of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_text,
      script: script,
      location: target_location_required_string,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async getCurrentLocationOfNetworkPreferencesObject(target_network_preferences_object_required_string) {
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }

    const escapedNetworkPreferencesObject = escapeForAppleScript(target_network_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedNetworkPreferencesObject}
          return current location of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async setCurrentLocationOfNetworkPreferencesObject(target_network_preferences_object_required_string, value_required_location) {
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }
    if (value_required_location === undefined || value_required_location === null) {
      throw new Error("value_required_location is required");
    }

    const castedNetworkPreferencesObject = castAndEscape(target_network_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_location, 'location');
    // Determine value format for AppleScript
    let valueForScript;
    // Property type 'location' is a class reference - treat as object
    valueForScript = castedValue; // Object reference - no quotes

    const script = `
      tell application "System Events"
        tell ${castedNetworkPreferencesObject}
          set current location of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_location,
      script: script,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async getActiveOfServiceOfLocationOfNetworkPreferencesObject(target_service_required_string, target_location_required_string, target_network_preferences_object_required_string) {
    if (!target_service_required_string || typeof target_service_required_string !== "string") {
      throw new Error("target_service_required_string is required and must be a string");
    }
    if (!target_location_required_string || typeof target_location_required_string !== "string") {
      throw new Error("target_location_required_string is required and must be a string");
    }
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }

    const escapedService = escapeForAppleScript(target_service_required_string);
    const escapedLocation = escapeForAppleScript(target_location_required_string);
    const escapedNetworkPreferencesObject = escapeForAppleScript(target_network_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedService} of ${escapedLocation} of ${escapedNetworkPreferencesObject})
          return active of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      service: target_service_required_string,
      location: target_location_required_string,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async getCurrentConfigurationOfServiceOfLocationOfNetwork(target_service_required_string, target_location_required_string, target_network_preferences_object_required_string) {
    if (!target_service_required_string || typeof target_service_required_string !== "string") {
      throw new Error("target_service_required_string is required and must be a string");
    }
    if (!target_location_required_string || typeof target_location_required_string !== "string") {
      throw new Error("target_location_required_string is required and must be a string");
    }
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }

    const escapedService = escapeForAppleScript(target_service_required_string);
    const escapedLocation = escapeForAppleScript(target_location_required_string);
    const escapedNetworkPreferencesObject = escapeForAppleScript(target_network_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedService} of ${escapedLocation} of ${escapedNetworkPreferencesObject})
          return current configuration of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      service: target_service_required_string,
      location: target_location_required_string,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async setCurrentConfigurationOfServiceOfLocationOfNetwork(target_service_required_string, target_location_required_string, target_network_preferences_object_required_string, value_required_configuration) {
    if (!target_service_required_string || typeof target_service_required_string !== "string") {
      throw new Error("target_service_required_string is required and must be a string");
    }
    if (!target_location_required_string || typeof target_location_required_string !== "string") {
      throw new Error("target_location_required_string is required and must be a string");
    }
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }
    if (value_required_configuration === undefined || value_required_configuration === null) {
      throw new Error("value_required_configuration is required");
    }

    const castedService = castAndEscape(target_service_required_string, 'string');
    const castedLocation = castAndEscape(target_location_required_string, 'string');
    const castedNetworkPreferencesObject = castAndEscape(target_network_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_configuration, 'configuration');
    // Determine value format for AppleScript
    let valueForScript;
    // Property type 'configuration' is a class reference - treat as object
    valueForScript = castedValue; // Object reference - no quotes

    const script = `
      tell application "System Events"
        tell (${castedService} of ${castedLocation} of ${castedNetworkPreferencesObject})
          set current configuration of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_configuration,
      script: script,
      service: target_service_required_string,
      location: target_location_required_string,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async getIdOfServiceOfLocationOfNetworkPreferencesObject(target_service_required_string, target_location_required_string, target_network_preferences_object_required_string) {
    if (!target_service_required_string || typeof target_service_required_string !== "string") {
      throw new Error("target_service_required_string is required and must be a string");
    }
    if (!target_location_required_string || typeof target_location_required_string !== "string") {
      throw new Error("target_location_required_string is required and must be a string");
    }
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }

    const escapedService = escapeForAppleScript(target_service_required_string);
    const escapedLocation = escapeForAppleScript(target_location_required_string);
    const escapedNetworkPreferencesObject = escapeForAppleScript(target_network_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedService} of ${escapedLocation} of ${escapedNetworkPreferencesObject})
          return id of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      service: target_service_required_string,
      location: target_location_required_string,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async getInterfaceOfServiceOfLocationOfNetworkPreferences(target_service_required_string, target_location_required_string, target_network_preferences_object_required_string) {
    if (!target_service_required_string || typeof target_service_required_string !== "string") {
      throw new Error("target_service_required_string is required and must be a string");
    }
    if (!target_location_required_string || typeof target_location_required_string !== "string") {
      throw new Error("target_location_required_string is required and must be a string");
    }
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }

    const escapedService = escapeForAppleScript(target_service_required_string);
    const escapedLocation = escapeForAppleScript(target_location_required_string);
    const escapedNetworkPreferencesObject = escapeForAppleScript(target_network_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedService} of ${escapedLocation} of ${escapedNetworkPreferencesObject})
          return interface of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      service: target_service_required_string,
      location: target_location_required_string,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async getKindOfServiceOfLocationOfNetworkPreferencesObject(target_service_required_string, target_location_required_string, target_network_preferences_object_required_string) {
    if (!target_service_required_string || typeof target_service_required_string !== "string") {
      throw new Error("target_service_required_string is required and must be a string");
    }
    if (!target_location_required_string || typeof target_location_required_string !== "string") {
      throw new Error("target_location_required_string is required and must be a string");
    }
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }

    const escapedService = escapeForAppleScript(target_service_required_string);
    const escapedLocation = escapeForAppleScript(target_location_required_string);
    const escapedNetworkPreferencesObject = escapeForAppleScript(target_network_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedService} of ${escapedLocation} of ${escapedNetworkPreferencesObject})
          return kind of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      service: target_service_required_string,
      location: target_location_required_string,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async getNameOfServiceOfLocationOfNetworkPreferencesObject(target_service_required_string, target_location_required_string, target_network_preferences_object_required_string) {
    if (!target_service_required_string || typeof target_service_required_string !== "string") {
      throw new Error("target_service_required_string is required and must be a string");
    }
    if (!target_location_required_string || typeof target_location_required_string !== "string") {
      throw new Error("target_location_required_string is required and must be a string");
    }
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }

    const escapedService = escapeForAppleScript(target_service_required_string);
    const escapedLocation = escapeForAppleScript(target_location_required_string);
    const escapedNetworkPreferencesObject = escapeForAppleScript(target_network_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedService} of ${escapedLocation} of ${escapedNetworkPreferencesObject})
          return name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      service: target_service_required_string,
      location: target_location_required_string,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async setNameOfServiceOfLocationOfNetworkPreferencesObject(target_service_required_string, target_location_required_string, target_network_preferences_object_required_string, value_required_text) {
    if (!target_service_required_string || typeof target_service_required_string !== "string") {
      throw new Error("target_service_required_string is required and must be a string");
    }
    if (!target_location_required_string || typeof target_location_required_string !== "string") {
      throw new Error("target_location_required_string is required and must be a string");
    }
    if (!target_network_preferences_object_required_string || typeof target_network_preferences_object_required_string !== "string") {
      throw new Error("target_network_preferences_object_required_string is required and must be a string");
    }
    if (value_required_text === undefined || value_required_text === null) {
      throw new Error("value_required_text is required");
    }

    const castedService = castAndEscape(target_service_required_string, 'string');
    const castedLocation = castAndEscape(target_location_required_string, 'string');
    const castedNetworkPreferencesObject = castAndEscape(target_network_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_text, 'text');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedService} of ${castedLocation} of ${castedNetworkPreferencesObject})
          set name of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_text,
      script: script,
      service: target_service_required_string,
      location: target_location_required_string,
      network_preferences_object: target_network_preferences_object_required_string
    };
  }

  async startScreenSaver(direct_parameter_required_screen_saver) {
    if (direct_parameter_required_screen_saver === undefined || direct_parameter_required_screen_saver === null) {
      throw new Error("direct_parameter_required_screen_saver is required");
    }

    const castedDirect_parameter = direct_parameter_required_screen_saver ? castAndEscape(direct_parameter_required_screen_saver) : null;

    const script = `
      tell application "System Events"
        start ${castedDirect_parameter}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_screen_saver || null
    };
  }

  async startScreenSaverPreferencesObject(direct_parameter_required_screen_saver_preferences_object) {
    if (direct_parameter_required_screen_saver_preferences_object === undefined || direct_parameter_required_screen_saver_preferences_object === null) {
      throw new Error("direct_parameter_required_screen_saver_preferences_object is required");
    }

    const castedDirect_parameter = direct_parameter_required_screen_saver_preferences_object ? castAndEscape(direct_parameter_required_screen_saver_preferences_object) : null;

    const script = `
      tell application "System Events"
        start ${castedDirect_parameter}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_screen_saver_preferences_object || null
    };
  }

  async stopScreenSaver(direct_parameter_required_screen_saver) {
    if (direct_parameter_required_screen_saver === undefined || direct_parameter_required_screen_saver === null) {
      throw new Error("direct_parameter_required_screen_saver is required");
    }

    const castedDirect_parameter = direct_parameter_required_screen_saver ? castAndEscape(direct_parameter_required_screen_saver) : null;

    const script = `
      tell application "System Events"
        stop ${castedDirect_parameter}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_screen_saver || null
    };
  }

  async stopScreenSaverPreferencesObject(direct_parameter_required_screen_saver_preferences_object) {
    if (direct_parameter_required_screen_saver_preferences_object === undefined || direct_parameter_required_screen_saver_preferences_object === null) {
      throw new Error("direct_parameter_required_screen_saver_preferences_object is required");
    }

    const castedDirect_parameter = direct_parameter_required_screen_saver_preferences_object ? castAndEscape(direct_parameter_required_screen_saver_preferences_object) : null;

    const script = `
      tell application "System Events"
        stop ${castedDirect_parameter}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_screen_saver_preferences_object || null
    };
  }

  async getCurrentScreenSaverOfApplication() {
    const script = `
      tell application "System Events"
        return current screen saver
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async setCurrentScreenSaverOfApplication(value_required_screen_saver) {
    if (value_required_screen_saver === undefined || value_required_screen_saver === null) {
      throw new Error("value_required_screen_saver is required");
    }

    const castedValue = castAndEscape(value_required_screen_saver, 'screen saver');
    // Determine value format for AppleScript
    let valueForScript;
    // Property type 'screen saver' is a class reference - treat as object
    valueForScript = castedValue; // Object reference - no quotes

    const script = `
      tell application "System Events"
        set current screen saver to ${valueForScript}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_screen_saver,
      script: script
    };
  }

  async getScreenSaverPreferencesOfApplication() {
    const script = `
      tell application "System Events"
        return screen saver preferences
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async setScreenSaverPreferencesOfApplication(value_required_screen_saver_preferences_object) {
    if (value_required_screen_saver_preferences_object === undefined || value_required_screen_saver_preferences_object === null) {
      throw new Error("value_required_screen_saver_preferences_object is required");
    }

    const castedValue = castAndEscape(value_required_screen_saver_preferences_object, 'screen saver preferences object');
    // Determine value format for AppleScript
    let valueForScript;
    // Property type 'screen saver preferences object' is a class reference - treat as object
    valueForScript = castedValue; // Object reference - no quotes

    const script = `
      tell application "System Events"
        set screen saver preferences to ${valueForScript}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_screen_saver_preferences_object,
      script: script
    };
  }

  async getDisplayedNameOfScreenSaver(target_screen_saver_required_string) {
    if (!target_screen_saver_required_string || typeof target_screen_saver_required_string !== "string") {
      throw new Error("target_screen_saver_required_string is required and must be a string");
    }

    const escapedScreenSaver = escapeForAppleScript(target_screen_saver_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedScreenSaver}
          return displayed name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      screen_saver: target_screen_saver_required_string
    };
  }

  async getNameOfScreenSaver(target_screen_saver_required_string) {
    if (!target_screen_saver_required_string || typeof target_screen_saver_required_string !== "string") {
      throw new Error("target_screen_saver_required_string is required and must be a string");
    }

    const escapedScreenSaver = escapeForAppleScript(target_screen_saver_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedScreenSaver}
          return name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      screen_saver: target_screen_saver_required_string
    };
  }

  async getPathOfScreenSaver(target_screen_saver_required_string) {
    if (!target_screen_saver_required_string || typeof target_screen_saver_required_string !== "string") {
      throw new Error("target_screen_saver_required_string is required and must be a string");
    }

    const escapedScreenSaver = escapeForAppleScript(target_screen_saver_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedScreenSaver}
          return path of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      screen_saver: target_screen_saver_required_string
    };
  }

  async getPictureDisplayStyleOfScreenSaver(target_screen_saver_required_string) {
    if (!target_screen_saver_required_string || typeof target_screen_saver_required_string !== "string") {
      throw new Error("target_screen_saver_required_string is required and must be a string");
    }

    const escapedScreenSaver = escapeForAppleScript(target_screen_saver_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedScreenSaver}
          return picture display style of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      screen_saver: target_screen_saver_required_string
    };
  }

  async setPictureDisplayStyleOfScreenSaver(target_screen_saver_required_string, value_required_text) {
    if (!target_screen_saver_required_string || typeof target_screen_saver_required_string !== "string") {
      throw new Error("target_screen_saver_required_string is required and must be a string");
    }
    if (value_required_text === undefined || value_required_text === null) {
      throw new Error("value_required_text is required");
    }

    const castedScreenSaver = castAndEscape(target_screen_saver_required_string, 'string');
    const castedValue = castAndEscape(value_required_text, 'text');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedScreenSaver}
          set picture display style of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_text,
      script: script,
      screen_saver: target_screen_saver_required_string
    };
  }

  async getDelayIntervalOfScreenSaverPreferencesObject(target_screen_saver_preferences_object_required_string) {
    if (!target_screen_saver_preferences_object_required_string || typeof target_screen_saver_preferences_object_required_string !== "string") {
      throw new Error("target_screen_saver_preferences_object_required_string is required and must be a string");
    }

    const escapedScreenSaverPreferencesObject = escapeForAppleScript(target_screen_saver_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedScreenSaverPreferencesObject}
          return delay interval of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      screen_saver_preferences_object: target_screen_saver_preferences_object_required_string
    };
  }

  async setDelayIntervalOfScreenSaverPreferencesObject(target_screen_saver_preferences_object_required_string, value_required_integer) {
    if (!target_screen_saver_preferences_object_required_string || typeof target_screen_saver_preferences_object_required_string !== "string") {
      throw new Error("target_screen_saver_preferences_object_required_string is required and must be a string");
    }
    if (value_required_integer === undefined || value_required_integer === null) {
      throw new Error("value_required_integer is required");
    }

    const castedScreenSaverPreferencesObject = castAndEscape(target_screen_saver_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_integer, 'integer');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedScreenSaverPreferencesObject}
          set delay interval of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_integer,
      script: script,
      screen_saver_preferences_object: target_screen_saver_preferences_object_required_string
    };
  }

  async getMainScreenOnlyOfScreenSaverPreferencesObject(target_screen_saver_preferences_object_required_string) {
    if (!target_screen_saver_preferences_object_required_string || typeof target_screen_saver_preferences_object_required_string !== "string") {
      throw new Error("target_screen_saver_preferences_object_required_string is required and must be a string");
    }

    const escapedScreenSaverPreferencesObject = escapeForAppleScript(target_screen_saver_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedScreenSaverPreferencesObject}
          return main screen only of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      screen_saver_preferences_object: target_screen_saver_preferences_object_required_string
    };
  }

  async setMainScreenOnlyOfScreenSaverPreferencesObject(target_screen_saver_preferences_object_required_string, value_required_boolean) {
    if (!target_screen_saver_preferences_object_required_string || typeof target_screen_saver_preferences_object_required_string !== "string") {
      throw new Error("target_screen_saver_preferences_object_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedScreenSaverPreferencesObject = castAndEscape(target_screen_saver_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedScreenSaverPreferencesObject}
          set main screen only of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      screen_saver_preferences_object: target_screen_saver_preferences_object_required_string
    };
  }

  async getRunningOfScreenSaverPreferencesObject(target_screen_saver_preferences_object_required_string) {
    if (!target_screen_saver_preferences_object_required_string || typeof target_screen_saver_preferences_object_required_string !== "string") {
      throw new Error("target_screen_saver_preferences_object_required_string is required and must be a string");
    }

    const escapedScreenSaverPreferencesObject = escapeForAppleScript(target_screen_saver_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedScreenSaverPreferencesObject}
          return running of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      screen_saver_preferences_object: target_screen_saver_preferences_object_required_string
    };
  }

  async getShowClockOfScreenSaverPreferencesObject(target_screen_saver_preferences_object_required_string) {
    if (!target_screen_saver_preferences_object_required_string || typeof target_screen_saver_preferences_object_required_string !== "string") {
      throw new Error("target_screen_saver_preferences_object_required_string is required and must be a string");
    }

    const escapedScreenSaverPreferencesObject = escapeForAppleScript(target_screen_saver_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedScreenSaverPreferencesObject}
          return show clock of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      screen_saver_preferences_object: target_screen_saver_preferences_object_required_string
    };
  }

  async setShowClockOfScreenSaverPreferencesObject(target_screen_saver_preferences_object_required_string, value_required_boolean) {
    if (!target_screen_saver_preferences_object_required_string || typeof target_screen_saver_preferences_object_required_string !== "string") {
      throw new Error("target_screen_saver_preferences_object_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedScreenSaverPreferencesObject = castAndEscape(target_screen_saver_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedScreenSaverPreferencesObject}
          set show clock of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      screen_saver_preferences_object: target_screen_saver_preferences_object_required_string
    };
  }

  async getSecurityPreferencesOfApplication() {
    const script = `
      tell application "System Events"
        return security preferences
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async setSecurityPreferencesOfApplication(value_required_security_preferences_object) {
    if (value_required_security_preferences_object === undefined || value_required_security_preferences_object === null) {
      throw new Error("value_required_security_preferences_object is required");
    }

    const castedValue = castAndEscape(value_required_security_preferences_object, 'security preferences object');
    // Determine value format for AppleScript
    let valueForScript;
    // Property type 'security preferences object' is a class reference - treat as object
    valueForScript = castedValue; // Object reference - no quotes

    const script = `
      tell application "System Events"
        set security preferences to ${valueForScript}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_security_preferences_object,
      script: script
    };
  }

  async getAutomaticLoginOfSecurityPreferencesObject(target_security_preferences_object_required_string) {
    if (!target_security_preferences_object_required_string || typeof target_security_preferences_object_required_string !== "string") {
      throw new Error("target_security_preferences_object_required_string is required and must be a string");
    }

    const escapedSecurityPreferencesObject = escapeForAppleScript(target_security_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedSecurityPreferencesObject}
          return automatic login of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      security_preferences_object: target_security_preferences_object_required_string
    };
  }

  async setAutomaticLoginOfSecurityPreferencesObject(target_security_preferences_object_required_string, value_required_boolean) {
    if (!target_security_preferences_object_required_string || typeof target_security_preferences_object_required_string !== "string") {
      throw new Error("target_security_preferences_object_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedSecurityPreferencesObject = castAndEscape(target_security_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedSecurityPreferencesObject}
          set automatic login of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      security_preferences_object: target_security_preferences_object_required_string
    };
  }

  async getLogOutWhenInactiveOfSecurityPreferencesObject(target_security_preferences_object_required_string) {
    if (!target_security_preferences_object_required_string || typeof target_security_preferences_object_required_string !== "string") {
      throw new Error("target_security_preferences_object_required_string is required and must be a string");
    }

    const escapedSecurityPreferencesObject = escapeForAppleScript(target_security_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedSecurityPreferencesObject}
          return log out when inactive of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      security_preferences_object: target_security_preferences_object_required_string
    };
  }

  async setLogOutWhenInactiveOfSecurityPreferencesObject(target_security_preferences_object_required_string, value_required_boolean) {
    if (!target_security_preferences_object_required_string || typeof target_security_preferences_object_required_string !== "string") {
      throw new Error("target_security_preferences_object_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedSecurityPreferencesObject = castAndEscape(target_security_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedSecurityPreferencesObject}
          set log out when inactive of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      security_preferences_object: target_security_preferences_object_required_string
    };
  }

  async getLogOutWhenInactiveIntervalOfSecurityPreferences(target_security_preferences_object_required_string) {
    if (!target_security_preferences_object_required_string || typeof target_security_preferences_object_required_string !== "string") {
      throw new Error("target_security_preferences_object_required_string is required and must be a string");
    }

    const escapedSecurityPreferencesObject = escapeForAppleScript(target_security_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedSecurityPreferencesObject}
          return log out when inactive interval of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      security_preferences_object: target_security_preferences_object_required_string
    };
  }

  async setLogOutWhenInactiveIntervalOfSecurityPreferences(target_security_preferences_object_required_string, value_required_integer) {
    if (!target_security_preferences_object_required_string || typeof target_security_preferences_object_required_string !== "string") {
      throw new Error("target_security_preferences_object_required_string is required and must be a string");
    }
    if (value_required_integer === undefined || value_required_integer === null) {
      throw new Error("value_required_integer is required");
    }

    const castedSecurityPreferencesObject = castAndEscape(target_security_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_integer, 'integer');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedSecurityPreferencesObject}
          set log out when inactive interval of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_integer,
      script: script,
      security_preferences_object: target_security_preferences_object_required_string
    };
  }

  async getRequirePasswordToUnlockOfSecurityPreferencesObject(target_security_preferences_object_required_string) {
    if (!target_security_preferences_object_required_string || typeof target_security_preferences_object_required_string !== "string") {
      throw new Error("target_security_preferences_object_required_string is required and must be a string");
    }

    const escapedSecurityPreferencesObject = escapeForAppleScript(target_security_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedSecurityPreferencesObject}
          return require password to unlock of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      security_preferences_object: target_security_preferences_object_required_string
    };
  }

  async setRequirePasswordToUnlockOfSecurityPreferencesObject(target_security_preferences_object_required_string, value_required_boolean) {
    if (!target_security_preferences_object_required_string || typeof target_security_preferences_object_required_string !== "string") {
      throw new Error("target_security_preferences_object_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedSecurityPreferencesObject = castAndEscape(target_security_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedSecurityPreferencesObject}
          set require password to unlock of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      security_preferences_object: target_security_preferences_object_required_string
    };
  }

  async getRequirePasswordToWakeOfSecurityPreferencesObject(target_security_preferences_object_required_string) {
    if (!target_security_preferences_object_required_string || typeof target_security_preferences_object_required_string !== "string") {
      throw new Error("target_security_preferences_object_required_string is required and must be a string");
    }

    const escapedSecurityPreferencesObject = escapeForAppleScript(target_security_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedSecurityPreferencesObject}
          return require password to wake of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      security_preferences_object: target_security_preferences_object_required_string
    };
  }

  async setRequirePasswordToWakeOfSecurityPreferencesObject(target_security_preferences_object_required_string, value_required_boolean) {
    if (!target_security_preferences_object_required_string || typeof target_security_preferences_object_required_string !== "string") {
      throw new Error("target_security_preferences_object_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedSecurityPreferencesObject = castAndEscape(target_security_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedSecurityPreferencesObject}
          set require password to wake of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      security_preferences_object: target_security_preferences_object_required_string
    };
  }

  async getSecureVirtualMemoryOfSecurityPreferencesObject(target_security_preferences_object_required_string) {
    if (!target_security_preferences_object_required_string || typeof target_security_preferences_object_required_string !== "string") {
      throw new Error("target_security_preferences_object_required_string is required and must be a string");
    }

    const escapedSecurityPreferencesObject = escapeForAppleScript(target_security_preferences_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedSecurityPreferencesObject}
          return secure virtual memory of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      security_preferences_object: target_security_preferences_object_required_string
    };
  }

  async setSecureVirtualMemoryOfSecurityPreferencesObject(target_security_preferences_object_required_string, value_required_boolean) {
    if (!target_security_preferences_object_required_string || typeof target_security_preferences_object_required_string !== "string") {
      throw new Error("target_security_preferences_object_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedSecurityPreferencesObject = castAndEscape(target_security_preferences_object_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedSecurityPreferencesObject}
          set secure virtual memory of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      security_preferences_object: target_security_preferences_object_required_string
    };
  }

  async deleteForDisk(direct_parameter_required_disk_item, target_disk_required_string) {
    if (direct_parameter_required_disk_item === undefined || direct_parameter_required_disk_item === null) {
      throw new Error("direct_parameter_required_disk_item is required");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const castedDirect_parameter = castAndEscape(direct_parameter_required_disk_item);
    const valueForScriptDirect_parameter = castedDirect_parameter && typeof castedDirect_parameter === 'string' && !castedDirect_parameter.startsWith('{') && !castedDirect_parameter.startsWith('date') ? `"${castedDirect_parameter.replace(/"/g, "'")}"` : castedDirect_parameter;
    const castedDisk = castAndEscape(target_disk_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedDisk}
          delete ${castedDirect_parameter} in it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_disk_item,
      disk: target_disk_required_string
    };
  }

  async deleteForAliasOfDisk(direct_parameter_required_disk_item, target_alias_required_string, target_disk_required_string) {
    if (direct_parameter_required_disk_item === undefined || direct_parameter_required_disk_item === null) {
      throw new Error("direct_parameter_required_disk_item is required");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const castedDirect_parameter = castAndEscape(direct_parameter_required_disk_item);
    const valueForScriptDirect_parameter = castedDirect_parameter && typeof castedDirect_parameter === 'string' && !castedDirect_parameter.startsWith('{') && !castedDirect_parameter.startsWith('date') ? `"${castedDirect_parameter.replace(/"/g, "'")}"` : castedDirect_parameter;
    const castedAlias = castAndEscape(target_alias_required_string);
    const castedDisk = castAndEscape(target_disk_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell (${castedAlias} of ${castedDisk})
          delete ${castedDirect_parameter} in it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_disk_item,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async deleteForFilePackageOfAliasOfDisk(direct_parameter_required_disk_item, target_file_package_required_string, target_alias_required_string, target_disk_required_string) {
    if (direct_parameter_required_disk_item === undefined || direct_parameter_required_disk_item === null) {
      throw new Error("direct_parameter_required_disk_item is required");
    }
    if (!target_file_package_required_string || typeof target_file_package_required_string !== "string") {
      throw new Error("target_file_package_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const castedDirect_parameter = castAndEscape(direct_parameter_required_disk_item);
    const valueForScriptDirect_parameter = castedDirect_parameter && typeof castedDirect_parameter === 'string' && !castedDirect_parameter.startsWith('{') && !castedDirect_parameter.startsWith('date') ? `"${castedDirect_parameter.replace(/"/g, "'")}"` : castedDirect_parameter;
    const castedFilePackage = castAndEscape(target_file_package_required_string);
    const castedAlias = castAndEscape(target_alias_required_string);
    const castedDisk = castAndEscape(target_disk_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell (${castedFilePackage} of ${castedAlias} of ${castedDisk})
          delete ${castedDirect_parameter} in it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_disk_item,
      file_package: target_file_package_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async deleteForFolderOfAliasOfDisk(direct_parameter_required_disk_item, target_folder_required_string, target_alias_required_string, target_disk_required_string) {
    if (direct_parameter_required_disk_item === undefined || direct_parameter_required_disk_item === null) {
      throw new Error("direct_parameter_required_disk_item is required");
    }
    if (!target_folder_required_string || typeof target_folder_required_string !== "string") {
      throw new Error("target_folder_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const castedDirect_parameter = castAndEscape(direct_parameter_required_disk_item);
    const valueForScriptDirect_parameter = castedDirect_parameter && typeof castedDirect_parameter === 'string' && !castedDirect_parameter.startsWith('{') && !castedDirect_parameter.startsWith('date') ? `"${castedDirect_parameter.replace(/"/g, "'")}"` : castedDirect_parameter;
    const castedFolder = castAndEscape(target_folder_required_string);
    const castedAlias = castAndEscape(target_alias_required_string);
    const castedDisk = castAndEscape(target_disk_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell (${castedFolder} of ${castedAlias} of ${castedDisk})
          delete ${castedDirect_parameter} in it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_disk_item,
      folder: target_folder_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async moveDiskItem(direct_parameter_required_disk_item, to_required_location_specifier) {
    if (direct_parameter_required_disk_item === undefined || direct_parameter_required_disk_item === null) {
      throw new Error("direct_parameter_required_disk_item is required");
    }

    if (to_required_location_specifier === undefined || to_required_location_specifier === null) {
      throw new Error("to_required_location_specifier is required");
    }

    const castedDirect_parameter = direct_parameter_required_disk_item ? castAndEscape(direct_parameter_required_disk_item) : null;
    const castedTo = to_required_location_specifier ? castAndEscape(to_required_location_specifier) : null;

    const script = `
      tell application "System Events"
        move ${castedDirect_parameter} to ${castedTo}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_disk_item || null,
      to: to_required_location_specifier || null
    };
  }

  async moveDiskItem(direct_parameter_required_list_of_disk_item, to_required_location_specifier) {
    if (direct_parameter_required_list_of_disk_item === undefined || direct_parameter_required_list_of_disk_item === null) {
      throw new Error("direct_parameter_required_list_of_disk_item is required");
    }

    if (to_required_location_specifier === undefined || to_required_location_specifier === null) {
      throw new Error("to_required_location_specifier is required");
    }

    const castedDirect_parameter = direct_parameter_required_list_of_disk_item ? castAndEscape(direct_parameter_required_list_of_disk_item) : null;
    const castedTo = to_required_location_specifier ? castAndEscape(to_required_location_specifier) : null;

    const script = `
      tell application "System Events"
        move ${castedDirect_parameter} to ${castedTo}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_list_of_disk_item || null,
      to: to_required_location_specifier || null
    };
  }

  async moveText(direct_parameter_required_text, to_required_location_specifier) {
    if (direct_parameter_required_text === undefined || direct_parameter_required_text === null) {
      throw new Error("direct_parameter_required_text is required");
    }

    if (to_required_location_specifier === undefined || to_required_location_specifier === null) {
      throw new Error("to_required_location_specifier is required");
    }

    const castedDirect_parameter = direct_parameter_required_text ? castAndEscape(direct_parameter_required_text) : null;
    const castedTo = to_required_location_specifier ? castAndEscape(to_required_location_specifier) : null;

    const script = `
      tell application "System Events"
        move "${castedDirect_parameter}" to ${castedTo}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_text || null,
      to: to_required_location_specifier || null
    };
  }

  async moveText(direct_parameter_required_list_of_text, to_required_location_specifier) {
    if (direct_parameter_required_list_of_text === undefined || direct_parameter_required_list_of_text === null) {
      throw new Error("direct_parameter_required_list_of_text is required");
    }

    if (to_required_location_specifier === undefined || to_required_location_specifier === null) {
      throw new Error("to_required_location_specifier is required");
    }

    const castedDirect_parameter = direct_parameter_required_list_of_text ? castAndEscape(direct_parameter_required_list_of_text) : null;
    const castedTo = to_required_location_specifier ? castAndEscape(to_required_location_specifier) : null;

    const script = `
      tell application "System Events"
        move ${castedDirect_parameter} to ${castedTo}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_list_of_text || null,
      to: to_required_location_specifier || null
    };
  }

  async openFile(direct_parameter_required_file) {
    if (direct_parameter_required_file === undefined || direct_parameter_required_file === null) {
      throw new Error("direct_parameter_required_file is required");
    }

    const castedDirect_parameter = direct_parameter_required_file ? castAndEscape(direct_parameter_required_file) : null;

    const script = `
      tell application "System Events"
        open "${castedDirect_parameter}"
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_file || null
    };
  }

  async openText(direct_parameter_required_text) {
    if (direct_parameter_required_text === undefined || direct_parameter_required_text === null) {
      throw new Error("direct_parameter_required_text is required");
    }

    const castedDirect_parameter = direct_parameter_required_text ? castAndEscape(direct_parameter_required_text) : null;

    const script = `
      tell application "System Events"
        open "${castedDirect_parameter}"
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_text || null
    };
  }

  async getApplicationSupportFolderOfApplication() {
    const script = `
      tell application "System Events"
        return application support folder
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getApplicationsFolderOfApplication() {
    const script = `
      tell application "System Events"
        return applications folder
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getClassicDomainOfApplication() {
    const script = `
      tell application "System Events"
        return Classic domain
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getDesktopFolderOfApplication() {
    const script = `
      tell application "System Events"
        return desktop folder
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getDesktopPicturesFolderOfApplication() {
    const script = `
      tell application "System Events"
        return desktop pictures folder
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getDocumentsFolderOfApplication() {
    const script = `
      tell application "System Events"
        return documents folder
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getDownloadsFolderOfApplication() {
    const script = `
      tell application "System Events"
        return downloads folder
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getFavoritesFolderOfApplication() {
    const script = `
      tell application "System Events"
        return favorites folder
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getFolderActionScriptsFolderOfApplication() {
    const script = `
      tell application "System Events"
        return Folder Action scripts folder
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getFontsFolderOfApplication() {
    const script = `
      tell application "System Events"
        return fonts folder
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getHomeFolderOfApplication() {
    const script = `
      tell application "System Events"
        return home folder
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getLibraryFolderOfApplication() {
    const script = `
      tell application "System Events"
        return library folder
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getLocalDomainOfApplication() {
    const script = `
      tell application "System Events"
        return local domain
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getMoviesFolderOfApplication() {
    const script = `
      tell application "System Events"
        return movies folder
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getMusicFolderOfApplication() {
    const script = `
      tell application "System Events"
        return music folder
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getNetworkDomainOfApplication() {
    const script = `
      tell application "System Events"
        return network domain
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getPicturesFolderOfApplication() {
    const script = `
      tell application "System Events"
        return pictures folder
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getPreferencesFolderOfApplication() {
    const script = `
      tell application "System Events"
        return preferences folder
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getPublicFolderOfApplication() {
    const script = `
      tell application "System Events"
        return public folder
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getScriptingAdditionsFolderOfApplication() {
    const script = `
      tell application "System Events"
        return scripting additions folder
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getScriptsFolderOfApplication() {
    const script = `
      tell application "System Events"
        return scripts folder
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getSharedDocumentsFolderOfApplication() {
    const script = `
      tell application "System Events"
        return shared documents folder
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getSitesFolderOfApplication() {
    const script = `
      tell application "System Events"
        return sites folder
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getSpeakableItemsFolderOfApplication() {
    const script = `
      tell application "System Events"
        return speakable items folder
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getStartupDiskOfApplication() {
    const script = `
      tell application "System Events"
        return startup disk
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getSystemDomainOfApplication() {
    const script = `
      tell application "System Events"
        return system domain
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getTemporaryItemsFolderOfApplication() {
    const script = `
      tell application "System Events"
        return temporary items folder
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getTrashOfApplication() {
    const script = `
      tell application "System Events"
        return trash
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getUserDomainOfApplication() {
    const script = `
      tell application "System Events"
        return user domain
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getUtilitiesFolderOfApplication() {
    const script = `
      tell application "System Events"
        return utilities folder
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getWorkflowsFolderOfApplication() {
    const script = `
      tell application "System Events"
        return workflows folder
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getCreatorTypeOfAliasOfDisk(target_alias_required_string, target_disk_required_string) {
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedAlias} of ${escapedDisk})
          return creator type of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async setCreatorTypeOfAliasOfDisk(target_alias_required_string, target_disk_required_string, value_required_text) {
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }
    if (value_required_text === undefined || value_required_text === null) {
      throw new Error("value_required_text is required");
    }

    const castedAlias = castAndEscape(target_alias_required_string, 'string');
    const castedDisk = castAndEscape(target_disk_required_string, 'string');
    const castedValue = castAndEscape(value_required_text, 'text');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedAlias} of ${castedDisk})
          set creator type of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_text,
      script: script,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getDefaultApplicationOfAliasOfDisk(target_alias_required_string, target_disk_required_string) {
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedAlias} of ${escapedDisk})
          return default application of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async setDefaultApplicationOfAliasOfDisk(target_alias_required_string, target_disk_required_string, value_required_disk_item) {
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }
    if (value_required_disk_item === undefined || value_required_disk_item === null) {
      throw new Error("value_required_disk_item is required");
    }

    const castedAlias = castAndEscape(target_alias_required_string, 'string');
    const castedDisk = castAndEscape(target_disk_required_string, 'string');
    const castedValue = castAndEscape(value_required_disk_item, 'disk item');
    // Determine value format for AppleScript
    let valueForScript;
    // Property type 'disk item' is a class reference - treat as object
    valueForScript = castedValue; // Object reference - no quotes

    const script = `
      tell application "System Events"
        tell (${castedAlias} of ${castedDisk})
          set default application of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_disk_item,
      script: script,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getFileTypeOfAliasOfDisk(target_alias_required_string, target_disk_required_string) {
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedAlias} of ${escapedDisk})
          return file type of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async setFileTypeOfAliasOfDisk(target_alias_required_string, target_disk_required_string, value_required_text) {
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }
    if (value_required_text === undefined || value_required_text === null) {
      throw new Error("value_required_text is required");
    }

    const castedAlias = castAndEscape(target_alias_required_string, 'string');
    const castedDisk = castAndEscape(target_disk_required_string, 'string');
    const castedValue = castAndEscape(value_required_text, 'text');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedAlias} of ${castedDisk})
          set file type of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_text,
      script: script,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getKindOfAliasOfDisk(target_alias_required_string, target_disk_required_string) {
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedAlias} of ${escapedDisk})
          return kind of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getProductVersionOfAliasOfDisk(target_alias_required_string, target_disk_required_string) {
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedAlias} of ${escapedDisk})
          return product version of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getShortVersionOfAliasOfDisk(target_alias_required_string, target_disk_required_string) {
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedAlias} of ${escapedDisk})
          return short version of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getStationeryOfAliasOfDisk(target_alias_required_string, target_disk_required_string) {
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedAlias} of ${escapedDisk})
          return stationery of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async setStationeryOfAliasOfDisk(target_alias_required_string, target_disk_required_string, value_required_boolean) {
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedAlias = castAndEscape(target_alias_required_string, 'string');
    const castedDisk = castAndEscape(target_disk_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedAlias} of ${castedDisk})
          set stationery of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getTypeIdentifierOfAliasOfDisk(target_alias_required_string, target_disk_required_string) {
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedAlias} of ${escapedDisk})
          return type identifier of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getVersionOfAliasOfDisk(target_alias_required_string, target_disk_required_string) {
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedAlias} of ${escapedDisk})
          return version of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getAppleMenuFolderOfClassicDomainObject(target_classic_domain_object_required_string) {
    if (!target_classic_domain_object_required_string || typeof target_classic_domain_object_required_string !== "string") {
      throw new Error("target_classic_domain_object_required_string is required and must be a string");
    }

    const escapedClassicDomainObject = escapeForAppleScript(target_classic_domain_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedClassicDomainObject}
          return apple menu folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      classic_domain_object: target_classic_domain_object_required_string
    };
  }

  async getControlPanelsFolderOfClassicDomainObject(target_classic_domain_object_required_string) {
    if (!target_classic_domain_object_required_string || typeof target_classic_domain_object_required_string !== "string") {
      throw new Error("target_classic_domain_object_required_string is required and must be a string");
    }

    const escapedClassicDomainObject = escapeForAppleScript(target_classic_domain_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedClassicDomainObject}
          return control panels folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      classic_domain_object: target_classic_domain_object_required_string
    };
  }

  async getControlStripModulesFolderOfClassicDomainObject(target_classic_domain_object_required_string) {
    if (!target_classic_domain_object_required_string || typeof target_classic_domain_object_required_string !== "string") {
      throw new Error("target_classic_domain_object_required_string is required and must be a string");
    }

    const escapedClassicDomainObject = escapeForAppleScript(target_classic_domain_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedClassicDomainObject}
          return control strip modules folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      classic_domain_object: target_classic_domain_object_required_string
    };
  }

  async getDesktopFolderOfClassicDomainObject(target_classic_domain_object_required_string) {
    if (!target_classic_domain_object_required_string || typeof target_classic_domain_object_required_string !== "string") {
      throw new Error("target_classic_domain_object_required_string is required and must be a string");
    }

    const escapedClassicDomainObject = escapeForAppleScript(target_classic_domain_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedClassicDomainObject}
          return desktop folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      classic_domain_object: target_classic_domain_object_required_string
    };
  }

  async getExtensionsFolderOfClassicDomainObject(target_classic_domain_object_required_string) {
    if (!target_classic_domain_object_required_string || typeof target_classic_domain_object_required_string !== "string") {
      throw new Error("target_classic_domain_object_required_string is required and must be a string");
    }

    const escapedClassicDomainObject = escapeForAppleScript(target_classic_domain_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedClassicDomainObject}
          return extensions folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      classic_domain_object: target_classic_domain_object_required_string
    };
  }

  async getFontsFolderOfClassicDomainObject(target_classic_domain_object_required_string) {
    if (!target_classic_domain_object_required_string || typeof target_classic_domain_object_required_string !== "string") {
      throw new Error("target_classic_domain_object_required_string is required and must be a string");
    }

    const escapedClassicDomainObject = escapeForAppleScript(target_classic_domain_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedClassicDomainObject}
          return fonts folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      classic_domain_object: target_classic_domain_object_required_string
    };
  }

  async getLauncherItemsFolderOfClassicDomainObject(target_classic_domain_object_required_string) {
    if (!target_classic_domain_object_required_string || typeof target_classic_domain_object_required_string !== "string") {
      throw new Error("target_classic_domain_object_required_string is required and must be a string");
    }

    const escapedClassicDomainObject = escapeForAppleScript(target_classic_domain_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedClassicDomainObject}
          return launcher items folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      classic_domain_object: target_classic_domain_object_required_string
    };
  }

  async getPreferencesFolderOfClassicDomainObject(target_classic_domain_object_required_string) {
    if (!target_classic_domain_object_required_string || typeof target_classic_domain_object_required_string !== "string") {
      throw new Error("target_classic_domain_object_required_string is required and must be a string");
    }

    const escapedClassicDomainObject = escapeForAppleScript(target_classic_domain_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedClassicDomainObject}
          return preferences folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      classic_domain_object: target_classic_domain_object_required_string
    };
  }

  async getShutdownFolderOfClassicDomainObject(target_classic_domain_object_required_string) {
    if (!target_classic_domain_object_required_string || typeof target_classic_domain_object_required_string !== "string") {
      throw new Error("target_classic_domain_object_required_string is required and must be a string");
    }

    const escapedClassicDomainObject = escapeForAppleScript(target_classic_domain_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedClassicDomainObject}
          return shutdown folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      classic_domain_object: target_classic_domain_object_required_string
    };
  }

  async getStartupItemsFolderOfClassicDomainObject(target_classic_domain_object_required_string) {
    if (!target_classic_domain_object_required_string || typeof target_classic_domain_object_required_string !== "string") {
      throw new Error("target_classic_domain_object_required_string is required and must be a string");
    }

    const escapedClassicDomainObject = escapeForAppleScript(target_classic_domain_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedClassicDomainObject}
          return startup items folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      classic_domain_object: target_classic_domain_object_required_string
    };
  }

  async getSystemFolderOfClassicDomainObject(target_classic_domain_object_required_string) {
    if (!target_classic_domain_object_required_string || typeof target_classic_domain_object_required_string !== "string") {
      throw new Error("target_classic_domain_object_required_string is required and must be a string");
    }

    const escapedClassicDomainObject = escapeForAppleScript(target_classic_domain_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedClassicDomainObject}
          return system folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      classic_domain_object: target_classic_domain_object_required_string
    };
  }

  async getCapacityOfDisk(target_disk_required_string) {
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDisk}
          return capacity of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      disk: target_disk_required_string
    };
  }

  async getEjectableOfDisk(target_disk_required_string) {
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDisk}
          return ejectable of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      disk: target_disk_required_string
    };
  }

  async getFormatOfDisk(target_disk_required_string) {
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDisk}
          return format of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      disk: target_disk_required_string
    };
  }

  async getFreeSpaceOfDisk(target_disk_required_string) {
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDisk}
          return free space of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      disk: target_disk_required_string
    };
  }

  async getIgnorePrivilegesOfDisk(target_disk_required_string) {
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDisk}
          return ignore privileges of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      disk: target_disk_required_string
    };
  }

  async setIgnorePrivilegesOfDisk(target_disk_required_string, value_required_boolean) {
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedDisk = castAndEscape(target_disk_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedDisk}
          set ignore privileges of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      disk: target_disk_required_string
    };
  }

  async getLocalVolumeOfDisk(target_disk_required_string) {
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDisk}
          return local volume of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      disk: target_disk_required_string
    };
  }

  async getServerOfDisk(target_disk_required_string) {
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDisk}
          return server of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      disk: target_disk_required_string
    };
  }

  async getStartupOfDisk(target_disk_required_string) {
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDisk}
          return startup of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      disk: target_disk_required_string
    };
  }

  async getZoneOfDisk(target_disk_required_string) {
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDisk}
          return zone of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      disk: target_disk_required_string
    };
  }

  async getBusyStatusOfDiskItemOfAliasOfDisk(target_disk_item_required_string, target_alias_required_string, target_disk_required_string) {
    if (!target_disk_item_required_string || typeof target_disk_item_required_string !== "string") {
      throw new Error("target_disk_item_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedDiskItem = escapeForAppleScript(target_disk_item_required_string);
    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedDiskItem} of ${escapedAlias} of ${escapedDisk})
          return busy status of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      disk_item: target_disk_item_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getContainerOfDiskItemOfAliasOfDisk(target_disk_item_required_string, target_alias_required_string, target_disk_required_string) {
    if (!target_disk_item_required_string || typeof target_disk_item_required_string !== "string") {
      throw new Error("target_disk_item_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedDiskItem = escapeForAppleScript(target_disk_item_required_string);
    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedDiskItem} of ${escapedAlias} of ${escapedDisk})
          return container of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      disk_item: target_disk_item_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getCreationDateOfDiskItemOfAliasOfDisk(target_disk_item_required_string, target_alias_required_string, target_disk_required_string) {
    if (!target_disk_item_required_string || typeof target_disk_item_required_string !== "string") {
      throw new Error("target_disk_item_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedDiskItem = escapeForAppleScript(target_disk_item_required_string);
    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedDiskItem} of ${escapedAlias} of ${escapedDisk})
          return creation date of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      disk_item: target_disk_item_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getDisplayedNameOfDiskItemOfAliasOfDisk(target_disk_item_required_string, target_alias_required_string, target_disk_required_string) {
    if (!target_disk_item_required_string || typeof target_disk_item_required_string !== "string") {
      throw new Error("target_disk_item_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedDiskItem = escapeForAppleScript(target_disk_item_required_string);
    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedDiskItem} of ${escapedAlias} of ${escapedDisk})
          return displayed name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      disk_item: target_disk_item_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getIdOfDiskItemOfAliasOfDisk(target_disk_item_required_string, target_alias_required_string, target_disk_required_string) {
    if (!target_disk_item_required_string || typeof target_disk_item_required_string !== "string") {
      throw new Error("target_disk_item_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedDiskItem = escapeForAppleScript(target_disk_item_required_string);
    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedDiskItem} of ${escapedAlias} of ${escapedDisk})
          return id of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      disk_item: target_disk_item_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getModificationDateOfDiskItemOfAliasOfDisk(target_disk_item_required_string, target_alias_required_string, target_disk_required_string) {
    if (!target_disk_item_required_string || typeof target_disk_item_required_string !== "string") {
      throw new Error("target_disk_item_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedDiskItem = escapeForAppleScript(target_disk_item_required_string);
    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedDiskItem} of ${escapedAlias} of ${escapedDisk})
          return modification date of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      disk_item: target_disk_item_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async setModificationDateOfDiskItemOfAliasOfDisk(target_disk_item_required_string, target_alias_required_string, target_disk_required_string, value_required_date) {
    if (!target_disk_item_required_string || typeof target_disk_item_required_string !== "string") {
      throw new Error("target_disk_item_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }
    if (value_required_date === undefined || value_required_date === null) {
      throw new Error("value_required_date is required");
    }

    const castedDiskItem = castAndEscape(target_disk_item_required_string, 'string');
    const castedAlias = castAndEscape(target_alias_required_string, 'string');
    const castedDisk = castAndEscape(target_disk_required_string, 'string');
    const castedValue = castAndEscape(value_required_date, 'date');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedDiskItem} of ${castedAlias} of ${castedDisk})
          set modification date of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_date,
      script: script,
      disk_item: target_disk_item_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getNameOfDiskItemOfAliasOfDisk(target_disk_item_required_string, target_alias_required_string, target_disk_required_string) {
    if (!target_disk_item_required_string || typeof target_disk_item_required_string !== "string") {
      throw new Error("target_disk_item_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedDiskItem = escapeForAppleScript(target_disk_item_required_string);
    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedDiskItem} of ${escapedAlias} of ${escapedDisk})
          return name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      disk_item: target_disk_item_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async setNameOfDiskItemOfAliasOfDisk(target_disk_item_required_string, target_alias_required_string, target_disk_required_string, value_required_text) {
    if (!target_disk_item_required_string || typeof target_disk_item_required_string !== "string") {
      throw new Error("target_disk_item_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }
    if (value_required_text === undefined || value_required_text === null) {
      throw new Error("value_required_text is required");
    }

    const castedDiskItem = castAndEscape(target_disk_item_required_string, 'string');
    const castedAlias = castAndEscape(target_alias_required_string, 'string');
    const castedDisk = castAndEscape(target_disk_required_string, 'string');
    const castedValue = castAndEscape(value_required_text, 'text');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedDiskItem} of ${castedAlias} of ${castedDisk})
          set name of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_text,
      script: script,
      disk_item: target_disk_item_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getNameExtensionOfDiskItemOfAliasOfDisk(target_disk_item_required_string, target_alias_required_string, target_disk_required_string) {
    if (!target_disk_item_required_string || typeof target_disk_item_required_string !== "string") {
      throw new Error("target_disk_item_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedDiskItem = escapeForAppleScript(target_disk_item_required_string);
    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedDiskItem} of ${escapedAlias} of ${escapedDisk})
          return name extension of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      disk_item: target_disk_item_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getPackageFolderOfDiskItemOfAliasOfDisk(target_disk_item_required_string, target_alias_required_string, target_disk_required_string) {
    if (!target_disk_item_required_string || typeof target_disk_item_required_string !== "string") {
      throw new Error("target_disk_item_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedDiskItem = escapeForAppleScript(target_disk_item_required_string);
    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedDiskItem} of ${escapedAlias} of ${escapedDisk})
          return package folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      disk_item: target_disk_item_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getPathOfDiskItemOfAliasOfDisk(target_disk_item_required_string, target_alias_required_string, target_disk_required_string) {
    if (!target_disk_item_required_string || typeof target_disk_item_required_string !== "string") {
      throw new Error("target_disk_item_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedDiskItem = escapeForAppleScript(target_disk_item_required_string);
    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedDiskItem} of ${escapedAlias} of ${escapedDisk})
          return path of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      disk_item: target_disk_item_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getPhysicalSizeOfDiskItemOfAliasOfDisk(target_disk_item_required_string, target_alias_required_string, target_disk_required_string) {
    if (!target_disk_item_required_string || typeof target_disk_item_required_string !== "string") {
      throw new Error("target_disk_item_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedDiskItem = escapeForAppleScript(target_disk_item_required_string);
    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedDiskItem} of ${escapedAlias} of ${escapedDisk})
          return physical size of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      disk_item: target_disk_item_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getPosixPathOfDiskItemOfAliasOfDisk(target_disk_item_required_string, target_alias_required_string, target_disk_required_string) {
    if (!target_disk_item_required_string || typeof target_disk_item_required_string !== "string") {
      throw new Error("target_disk_item_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedDiskItem = escapeForAppleScript(target_disk_item_required_string);
    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedDiskItem} of ${escapedAlias} of ${escapedDisk})
          return POSIX path of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      disk_item: target_disk_item_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getSizeOfDiskItemOfAliasOfDisk(target_disk_item_required_string, target_alias_required_string, target_disk_required_string) {
    if (!target_disk_item_required_string || typeof target_disk_item_required_string !== "string") {
      throw new Error("target_disk_item_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedDiskItem = escapeForAppleScript(target_disk_item_required_string);
    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedDiskItem} of ${escapedAlias} of ${escapedDisk})
          return size of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      disk_item: target_disk_item_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getUrlOfDiskItemOfAliasOfDisk(target_disk_item_required_string, target_alias_required_string, target_disk_required_string) {
    if (!target_disk_item_required_string || typeof target_disk_item_required_string !== "string") {
      throw new Error("target_disk_item_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedDiskItem = escapeForAppleScript(target_disk_item_required_string);
    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedDiskItem} of ${escapedAlias} of ${escapedDisk})
          return URL of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      disk_item: target_disk_item_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getVisibleOfDiskItemOfAliasOfDisk(target_disk_item_required_string, target_alias_required_string, target_disk_required_string) {
    if (!target_disk_item_required_string || typeof target_disk_item_required_string !== "string") {
      throw new Error("target_disk_item_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedDiskItem = escapeForAppleScript(target_disk_item_required_string);
    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedDiskItem} of ${escapedAlias} of ${escapedDisk})
          return visible of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      disk_item: target_disk_item_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async setVisibleOfDiskItemOfAliasOfDisk(target_disk_item_required_string, target_alias_required_string, target_disk_required_string, value_required_boolean) {
    if (!target_disk_item_required_string || typeof target_disk_item_required_string !== "string") {
      throw new Error("target_disk_item_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedDiskItem = castAndEscape(target_disk_item_required_string, 'string');
    const castedAlias = castAndEscape(target_alias_required_string, 'string');
    const castedDisk = castAndEscape(target_disk_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedDiskItem} of ${castedAlias} of ${castedDisk})
          set visible of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      disk_item: target_disk_item_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getVolumeOfDiskItemOfAliasOfDisk(target_disk_item_required_string, target_alias_required_string, target_disk_required_string) {
    if (!target_disk_item_required_string || typeof target_disk_item_required_string !== "string") {
      throw new Error("target_disk_item_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedDiskItem = escapeForAppleScript(target_disk_item_required_string);
    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedDiskItem} of ${escapedAlias} of ${escapedDisk})
          return volume of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      disk_item: target_disk_item_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getApplicationSupportFolderOfDomain(target_domain_required_string) {
    if (!target_domain_required_string || typeof target_domain_required_string !== "string") {
      throw new Error("target_domain_required_string is required and must be a string");
    }

    const escapedDomain = escapeForAppleScript(target_domain_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDomain}
          return application support folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      domain: target_domain_required_string
    };
  }

  async getApplicationsFolderOfDomain(target_domain_required_string) {
    if (!target_domain_required_string || typeof target_domain_required_string !== "string") {
      throw new Error("target_domain_required_string is required and must be a string");
    }

    const escapedDomain = escapeForAppleScript(target_domain_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDomain}
          return applications folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      domain: target_domain_required_string
    };
  }

  async getDesktopPicturesFolderOfDomain(target_domain_required_string) {
    if (!target_domain_required_string || typeof target_domain_required_string !== "string") {
      throw new Error("target_domain_required_string is required and must be a string");
    }

    const escapedDomain = escapeForAppleScript(target_domain_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDomain}
          return desktop pictures folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      domain: target_domain_required_string
    };
  }

  async getFolderActionScriptsFolderOfDomain(target_domain_required_string) {
    if (!target_domain_required_string || typeof target_domain_required_string !== "string") {
      throw new Error("target_domain_required_string is required and must be a string");
    }

    const escapedDomain = escapeForAppleScript(target_domain_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDomain}
          return Folder Action scripts folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      domain: target_domain_required_string
    };
  }

  async getFontsFolderOfDomain(target_domain_required_string) {
    if (!target_domain_required_string || typeof target_domain_required_string !== "string") {
      throw new Error("target_domain_required_string is required and must be a string");
    }

    const escapedDomain = escapeForAppleScript(target_domain_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDomain}
          return fonts folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      domain: target_domain_required_string
    };
  }

  async getIdOfDomain(target_domain_required_string) {
    if (!target_domain_required_string || typeof target_domain_required_string !== "string") {
      throw new Error("target_domain_required_string is required and must be a string");
    }

    const escapedDomain = escapeForAppleScript(target_domain_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDomain}
          return id of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      domain: target_domain_required_string
    };
  }

  async getLibraryFolderOfDomain(target_domain_required_string) {
    if (!target_domain_required_string || typeof target_domain_required_string !== "string") {
      throw new Error("target_domain_required_string is required and must be a string");
    }

    const escapedDomain = escapeForAppleScript(target_domain_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDomain}
          return library folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      domain: target_domain_required_string
    };
  }

  async getNameOfDomain(target_domain_required_string) {
    if (!target_domain_required_string || typeof target_domain_required_string !== "string") {
      throw new Error("target_domain_required_string is required and must be a string");
    }

    const escapedDomain = escapeForAppleScript(target_domain_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDomain}
          return name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      domain: target_domain_required_string
    };
  }

  async getPreferencesFolderOfDomain(target_domain_required_string) {
    if (!target_domain_required_string || typeof target_domain_required_string !== "string") {
      throw new Error("target_domain_required_string is required and must be a string");
    }

    const escapedDomain = escapeForAppleScript(target_domain_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDomain}
          return preferences folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      domain: target_domain_required_string
    };
  }

  async getScriptingAdditionsFolderOfDomain(target_domain_required_string) {
    if (!target_domain_required_string || typeof target_domain_required_string !== "string") {
      throw new Error("target_domain_required_string is required and must be a string");
    }

    const escapedDomain = escapeForAppleScript(target_domain_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDomain}
          return scripting additions folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      domain: target_domain_required_string
    };
  }

  async getScriptsFolderOfDomain(target_domain_required_string) {
    if (!target_domain_required_string || typeof target_domain_required_string !== "string") {
      throw new Error("target_domain_required_string is required and must be a string");
    }

    const escapedDomain = escapeForAppleScript(target_domain_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDomain}
          return scripts folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      domain: target_domain_required_string
    };
  }

  async getSharedDocumentsFolderOfDomain(target_domain_required_string) {
    if (!target_domain_required_string || typeof target_domain_required_string !== "string") {
      throw new Error("target_domain_required_string is required and must be a string");
    }

    const escapedDomain = escapeForAppleScript(target_domain_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDomain}
          return shared documents folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      domain: target_domain_required_string
    };
  }

  async getSpeakableItemsFolderOfDomain(target_domain_required_string) {
    if (!target_domain_required_string || typeof target_domain_required_string !== "string") {
      throw new Error("target_domain_required_string is required and must be a string");
    }

    const escapedDomain = escapeForAppleScript(target_domain_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDomain}
          return speakable items folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      domain: target_domain_required_string
    };
  }

  async getUtilitiesFolderOfDomain(target_domain_required_string) {
    if (!target_domain_required_string || typeof target_domain_required_string !== "string") {
      throw new Error("target_domain_required_string is required and must be a string");
    }

    const escapedDomain = escapeForAppleScript(target_domain_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDomain}
          return utilities folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      domain: target_domain_required_string
    };
  }

  async getWorkflowsFolderOfDomain(target_domain_required_string) {
    if (!target_domain_required_string || typeof target_domain_required_string !== "string") {
      throw new Error("target_domain_required_string is required and must be a string");
    }

    const escapedDomain = escapeForAppleScript(target_domain_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDomain}
          return workflows folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      domain: target_domain_required_string
    };
  }

  async getCreatorTypeOfFileOfAliasOfDisk(target_file_required_string, target_alias_required_string, target_disk_required_string) {
    if (!target_file_required_string || typeof target_file_required_string !== "string") {
      throw new Error("target_file_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedFile = escapeForAppleScript(target_file_required_string);
    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedFile} of ${escapedAlias} of ${escapedDisk})
          return creator type of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      file: target_file_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async setCreatorTypeOfFileOfAliasOfDisk(target_file_required_string, target_alias_required_string, target_disk_required_string, value_required_text) {
    if (!target_file_required_string || typeof target_file_required_string !== "string") {
      throw new Error("target_file_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }
    if (value_required_text === undefined || value_required_text === null) {
      throw new Error("value_required_text is required");
    }

    const castedFile = castAndEscape(target_file_required_string, 'string');
    const castedAlias = castAndEscape(target_alias_required_string, 'string');
    const castedDisk = castAndEscape(target_disk_required_string, 'string');
    const castedValue = castAndEscape(value_required_text, 'text');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedFile} of ${castedAlias} of ${castedDisk})
          set creator type of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_text,
      script: script,
      file: target_file_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getDefaultApplicationOfFileOfAliasOfDisk(target_file_required_string, target_alias_required_string, target_disk_required_string) {
    if (!target_file_required_string || typeof target_file_required_string !== "string") {
      throw new Error("target_file_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedFile = escapeForAppleScript(target_file_required_string);
    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedFile} of ${escapedAlias} of ${escapedDisk})
          return default application of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      file: target_file_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async setDefaultApplicationOfFileOfAliasOfDisk(target_file_required_string, target_alias_required_string, target_disk_required_string, value_required_disk_item) {
    if (!target_file_required_string || typeof target_file_required_string !== "string") {
      throw new Error("target_file_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }
    if (value_required_disk_item === undefined || value_required_disk_item === null) {
      throw new Error("value_required_disk_item is required");
    }

    const castedFile = castAndEscape(target_file_required_string, 'string');
    const castedAlias = castAndEscape(target_alias_required_string, 'string');
    const castedDisk = castAndEscape(target_disk_required_string, 'string');
    const castedValue = castAndEscape(value_required_disk_item, 'disk item');
    // Determine value format for AppleScript
    let valueForScript;
    // Property type 'disk item' is a class reference - treat as object
    valueForScript = castedValue; // Object reference - no quotes

    const script = `
      tell application "System Events"
        tell (${castedFile} of ${castedAlias} of ${castedDisk})
          set default application of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_disk_item,
      script: script,
      file: target_file_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getFileTypeOfFileOfAliasOfDisk(target_file_required_string, target_alias_required_string, target_disk_required_string) {
    if (!target_file_required_string || typeof target_file_required_string !== "string") {
      throw new Error("target_file_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedFile = escapeForAppleScript(target_file_required_string);
    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedFile} of ${escapedAlias} of ${escapedDisk})
          return file type of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      file: target_file_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async setFileTypeOfFileOfAliasOfDisk(target_file_required_string, target_alias_required_string, target_disk_required_string, value_required_text) {
    if (!target_file_required_string || typeof target_file_required_string !== "string") {
      throw new Error("target_file_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }
    if (value_required_text === undefined || value_required_text === null) {
      throw new Error("value_required_text is required");
    }

    const castedFile = castAndEscape(target_file_required_string, 'string');
    const castedAlias = castAndEscape(target_alias_required_string, 'string');
    const castedDisk = castAndEscape(target_disk_required_string, 'string');
    const castedValue = castAndEscape(value_required_text, 'text');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedFile} of ${castedAlias} of ${castedDisk})
          set file type of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_text,
      script: script,
      file: target_file_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getKindOfFileOfAliasOfDisk(target_file_required_string, target_alias_required_string, target_disk_required_string) {
    if (!target_file_required_string || typeof target_file_required_string !== "string") {
      throw new Error("target_file_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedFile = escapeForAppleScript(target_file_required_string);
    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedFile} of ${escapedAlias} of ${escapedDisk})
          return kind of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      file: target_file_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getProductVersionOfFileOfAliasOfDisk(target_file_required_string, target_alias_required_string, target_disk_required_string) {
    if (!target_file_required_string || typeof target_file_required_string !== "string") {
      throw new Error("target_file_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedFile = escapeForAppleScript(target_file_required_string);
    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedFile} of ${escapedAlias} of ${escapedDisk})
          return product version of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      file: target_file_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getShortVersionOfFileOfAliasOfDisk(target_file_required_string, target_alias_required_string, target_disk_required_string) {
    if (!target_file_required_string || typeof target_file_required_string !== "string") {
      throw new Error("target_file_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedFile = escapeForAppleScript(target_file_required_string);
    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedFile} of ${escapedAlias} of ${escapedDisk})
          return short version of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      file: target_file_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getStationeryOfFileOfAliasOfDisk(target_file_required_string, target_alias_required_string, target_disk_required_string) {
    if (!target_file_required_string || typeof target_file_required_string !== "string") {
      throw new Error("target_file_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedFile = escapeForAppleScript(target_file_required_string);
    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedFile} of ${escapedAlias} of ${escapedDisk})
          return stationery of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      file: target_file_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async setStationeryOfFileOfAliasOfDisk(target_file_required_string, target_alias_required_string, target_disk_required_string, value_required_boolean) {
    if (!target_file_required_string || typeof target_file_required_string !== "string") {
      throw new Error("target_file_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedFile = castAndEscape(target_file_required_string, 'string');
    const castedAlias = castAndEscape(target_alias_required_string, 'string');
    const castedDisk = castAndEscape(target_disk_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedFile} of ${castedAlias} of ${castedDisk})
          set stationery of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      file: target_file_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getTypeIdentifierOfFileOfAliasOfDisk(target_file_required_string, target_alias_required_string, target_disk_required_string) {
    if (!target_file_required_string || typeof target_file_required_string !== "string") {
      throw new Error("target_file_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedFile = escapeForAppleScript(target_file_required_string);
    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedFile} of ${escapedAlias} of ${escapedDisk})
          return type identifier of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      file: target_file_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getVersionOfFileOfAliasOfDisk(target_file_required_string, target_alias_required_string, target_disk_required_string) {
    if (!target_file_required_string || typeof target_file_required_string !== "string") {
      throw new Error("target_file_required_string is required and must be a string");
    }
    if (!target_alias_required_string || typeof target_alias_required_string !== "string") {
      throw new Error("target_alias_required_string is required and must be a string");
    }
    if (!target_disk_required_string || typeof target_disk_required_string !== "string") {
      throw new Error("target_disk_required_string is required and must be a string");
    }

    const escapedFile = escapeForAppleScript(target_file_required_string);
    const escapedAlias = escapeForAppleScript(target_alias_required_string);
    const escapedDisk = escapeForAppleScript(target_disk_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedFile} of ${escapedAlias} of ${escapedDisk})
          return version of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      file: target_file_required_string,
      alias: target_alias_required_string,
      disk: target_disk_required_string
    };
  }

  async getDesktopFolderOfUserDomainObject(target_user_domain_object_required_string) {
    if (!target_user_domain_object_required_string || typeof target_user_domain_object_required_string !== "string") {
      throw new Error("target_user_domain_object_required_string is required and must be a string");
    }

    const escapedUserDomainObject = escapeForAppleScript(target_user_domain_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedUserDomainObject}
          return desktop folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      user_domain_object: target_user_domain_object_required_string
    };
  }

  async getDocumentsFolderOfUserDomainObject(target_user_domain_object_required_string) {
    if (!target_user_domain_object_required_string || typeof target_user_domain_object_required_string !== "string") {
      throw new Error("target_user_domain_object_required_string is required and must be a string");
    }

    const escapedUserDomainObject = escapeForAppleScript(target_user_domain_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedUserDomainObject}
          return documents folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      user_domain_object: target_user_domain_object_required_string
    };
  }

  async getDownloadsFolderOfUserDomainObject(target_user_domain_object_required_string) {
    if (!target_user_domain_object_required_string || typeof target_user_domain_object_required_string !== "string") {
      throw new Error("target_user_domain_object_required_string is required and must be a string");
    }

    const escapedUserDomainObject = escapeForAppleScript(target_user_domain_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedUserDomainObject}
          return downloads folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      user_domain_object: target_user_domain_object_required_string
    };
  }

  async getFavoritesFolderOfUserDomainObject(target_user_domain_object_required_string) {
    if (!target_user_domain_object_required_string || typeof target_user_domain_object_required_string !== "string") {
      throw new Error("target_user_domain_object_required_string is required and must be a string");
    }

    const escapedUserDomainObject = escapeForAppleScript(target_user_domain_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedUserDomainObject}
          return favorites folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      user_domain_object: target_user_domain_object_required_string
    };
  }

  async getHomeFolderOfUserDomainObject(target_user_domain_object_required_string) {
    if (!target_user_domain_object_required_string || typeof target_user_domain_object_required_string !== "string") {
      throw new Error("target_user_domain_object_required_string is required and must be a string");
    }

    const escapedUserDomainObject = escapeForAppleScript(target_user_domain_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedUserDomainObject}
          return home folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      user_domain_object: target_user_domain_object_required_string
    };
  }

  async getMoviesFolderOfUserDomainObject(target_user_domain_object_required_string) {
    if (!target_user_domain_object_required_string || typeof target_user_domain_object_required_string !== "string") {
      throw new Error("target_user_domain_object_required_string is required and must be a string");
    }

    const escapedUserDomainObject = escapeForAppleScript(target_user_domain_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedUserDomainObject}
          return movies folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      user_domain_object: target_user_domain_object_required_string
    };
  }

  async getMusicFolderOfUserDomainObject(target_user_domain_object_required_string) {
    if (!target_user_domain_object_required_string || typeof target_user_domain_object_required_string !== "string") {
      throw new Error("target_user_domain_object_required_string is required and must be a string");
    }

    const escapedUserDomainObject = escapeForAppleScript(target_user_domain_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedUserDomainObject}
          return music folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      user_domain_object: target_user_domain_object_required_string
    };
  }

  async getPicturesFolderOfUserDomainObject(target_user_domain_object_required_string) {
    if (!target_user_domain_object_required_string || typeof target_user_domain_object_required_string !== "string") {
      throw new Error("target_user_domain_object_required_string is required and must be a string");
    }

    const escapedUserDomainObject = escapeForAppleScript(target_user_domain_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedUserDomainObject}
          return pictures folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      user_domain_object: target_user_domain_object_required_string
    };
  }

  async getPublicFolderOfUserDomainObject(target_user_domain_object_required_string) {
    if (!target_user_domain_object_required_string || typeof target_user_domain_object_required_string !== "string") {
      throw new Error("target_user_domain_object_required_string is required and must be a string");
    }

    const escapedUserDomainObject = escapeForAppleScript(target_user_domain_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedUserDomainObject}
          return public folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      user_domain_object: target_user_domain_object_required_string
    };
  }

  async getSitesFolderOfUserDomainObject(target_user_domain_object_required_string) {
    if (!target_user_domain_object_required_string || typeof target_user_domain_object_required_string !== "string") {
      throw new Error("target_user_domain_object_required_string is required and must be a string");
    }

    const escapedUserDomainObject = escapeForAppleScript(target_user_domain_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedUserDomainObject}
          return sites folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      user_domain_object: target_user_domain_object_required_string
    };
  }

  async getTemporaryItemsFolderOfUserDomainObject(target_user_domain_object_required_string) {
    if (!target_user_domain_object_required_string || typeof target_user_domain_object_required_string !== "string") {
      throw new Error("target_user_domain_object_required_string is required and must be a string");
    }

    const escapedUserDomainObject = escapeForAppleScript(target_user_domain_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedUserDomainObject}
          return temporary items folder of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      user_domain_object: target_user_domain_object_required_string
    };
  }

  async logOut() {
    const script = `
      tell application "System Events"
        log out
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async restart(state_saving_preference_optional_boolean) {
    const castedState_saving_preference = state_saving_preference_optional_boolean ? castAndEscape(state_saving_preference_optional_boolean) : null;

    const script = `
      tell application "System Events"
        restart${state_saving_preference_optional_boolean ? ' state saving preference ' + castedState_saving_preference : ''}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      state_saving_preference: state_saving_preference_optional_boolean || null
    };
  }

  async shutDown(state_saving_preference_optional_boolean) {
    const castedState_saving_preference = state_saving_preference_optional_boolean ? castAndEscape(state_saving_preference_optional_boolean) : null;

    const script = `
      tell application "System Events"
        shut down${state_saving_preference_optional_boolean ? ' state saving preference ' + castedState_saving_preference : ''}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      state_saving_preference: state_saving_preference_optional_boolean || null
    };
  }

  async sleep() {
    const script = `
      tell application "System Events"
        sleep
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script
    };
  }

  async clickForWindowOfProcess(direct_parameter_optional_ui_element, target_window_required_string, target_process_required_string, at_optional_list_of_number) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const castedDirect_parameter = castAndEscape(direct_parameter_optional_ui_element);
    const valueForScriptDirect_parameter = castedDirect_parameter && typeof castedDirect_parameter === 'string' && !castedDirect_parameter.startsWith('{') && !castedDirect_parameter.startsWith('date') ? `"${castedDirect_parameter.replace(/"/g, "'")}"` : castedDirect_parameter;
    const castedWindow = castAndEscape(target_window_required_string);
    const castedProcess = castAndEscape(target_process_required_string);
    const castedAt = at_optional_list_of_number ? castAndEscape(at_optional_list_of_number) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell (${castedWindow} of ${castedProcess})
          click ${direct_parameter_optional_ui_element ? castedDirect_parameter + ' ' : ''}in it${at_optional_list_of_number ? ' at ' + valueForScriptAt : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_optional_ui_element,
      window: target_window_required_string,
      process: target_process_required_string,
      at: at_optional_list_of_number || null
    };
  }

  async clickForProcess(direct_parameter_optional_ui_element, target_process_required_string, at_optional_list_of_number) {
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const castedDirect_parameter = castAndEscape(direct_parameter_optional_ui_element);
    const valueForScriptDirect_parameter = castedDirect_parameter && typeof castedDirect_parameter === 'string' && !castedDirect_parameter.startsWith('{') && !castedDirect_parameter.startsWith('date') ? `"${castedDirect_parameter.replace(/"/g, "'")}"` : castedDirect_parameter;
    const castedProcess = castAndEscape(target_process_required_string);
    const castedAt = at_optional_list_of_number ? castAndEscape(at_optional_list_of_number) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell ${castedProcess}
          click ${direct_parameter_optional_ui_element ? castedDirect_parameter + ' ' : ''}in it${at_optional_list_of_number ? ' at ' + valueForScriptAt : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_optional_ui_element,
      process: target_process_required_string,
      at: at_optional_list_of_number || null
    };
  }

  async clickForUiElementOfWindowOfProcess(direct_parameter_optional_ui_element, target_ui_element_required_string, target_window_required_string, target_process_required_string, at_optional_list_of_number) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const castedDirect_parameter = castAndEscape(direct_parameter_optional_ui_element);
    const valueForScriptDirect_parameter = castedDirect_parameter && typeof castedDirect_parameter === 'string' && !castedDirect_parameter.startsWith('{') && !castedDirect_parameter.startsWith('date') ? `"${castedDirect_parameter.replace(/"/g, "'")}"` : castedDirect_parameter;
    const castedUiElement = castAndEscape(target_ui_element_required_string);
    const castedWindow = castAndEscape(target_window_required_string);
    const castedProcess = castAndEscape(target_process_required_string);
    const castedAt = at_optional_list_of_number ? castAndEscape(at_optional_list_of_number) : null;
    const valueForScriptAt = castedAt && typeof castedAt === 'string' && !castedAt.startsWith('{') && !castedAt.startsWith('date') ? `"${castedAt.replace(/"/g, "'")}"` : castedAt;

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell (${castedUiElement} of ${castedWindow} of ${castedProcess})
          click ${direct_parameter_optional_ui_element ? castedDirect_parameter + ' ' : ''}in it${at_optional_list_of_number ? ' at ' + valueForScriptAt : ''}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_optional_ui_element,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string,
      at: at_optional_list_of_number || null
    };
  }

  async keyCode(direct_parameter_required_integer, using_optional_emds) {
    if (direct_parameter_required_integer === undefined || direct_parameter_required_integer === null) {
      throw new Error("direct_parameter_required_integer is required");
    }

    const castedDirect_parameter = direct_parameter_required_integer ? castAndEscape(direct_parameter_required_integer) : null;
    const castedUsing = using_optional_emds ? castAndEscape(using_optional_emds) : null;

    const script = `
      tell application "System Events"
        key code ${castedDirect_parameter}${using_optional_emds ? ' using ' + castedUsing : ''}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_integer || null,
      using: using_optional_emds || null
    };
  }

  async keystroke(direct_parameter_required_text, using_optional_emds) {
    if (direct_parameter_required_text === undefined || direct_parameter_required_text === null) {
      throw new Error("direct_parameter_required_text is required");
    }

    const castedDirect_parameter = direct_parameter_required_text ? castAndEscape(direct_parameter_required_text) : null;
    const castedUsing = using_optional_emds ? castAndEscape(using_optional_emds) : null;

    const script = `
      tell application "System Events"
        keystroke "${castedDirect_parameter}"${using_optional_emds ? ' using ' + castedUsing : ''}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_text || null,
      using: using_optional_emds || null
    };
  }

  async performForActionOfUiElementOfWindowOfProcess(direct_parameter_required_action, target_action_required_string, target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (direct_parameter_required_action === undefined || direct_parameter_required_action === null) {
      throw new Error("direct_parameter_required_action is required");
    }
    if (!target_action_required_string || typeof target_action_required_string !== "string") {
      throw new Error("target_action_required_string is required and must be a string");
    }
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const castedDirect_parameter = castAndEscape(direct_parameter_required_action);
    const valueForScriptDirect_parameter = castedDirect_parameter && typeof castedDirect_parameter === 'string' && !castedDirect_parameter.startsWith('{') && !castedDirect_parameter.startsWith('date') ? `"${castedDirect_parameter.replace(/"/g, "'")}"` : castedDirect_parameter;
    const castedAction = castAndEscape(target_action_required_string);
    const castedUiElement = castAndEscape(target_ui_element_required_string);
    const castedWindow = castAndEscape(target_window_required_string);
    const castedProcess = castAndEscape(target_process_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell (${castedAction} of ${castedUiElement} of ${castedWindow} of ${castedProcess})
          perform ${castedDirect_parameter} in it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_action,
      action: target_action_required_string,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async selectForWindowOfProcess(direct_parameter_required_ui_element, target_window_required_string, target_process_required_string) {
    if (direct_parameter_required_ui_element === undefined || direct_parameter_required_ui_element === null) {
      throw new Error("direct_parameter_required_ui_element is required");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const castedDirect_parameter = castAndEscape(direct_parameter_required_ui_element);
    const valueForScriptDirect_parameter = castedDirect_parameter && typeof castedDirect_parameter === 'string' && !castedDirect_parameter.startsWith('{') && !castedDirect_parameter.startsWith('date') ? `"${castedDirect_parameter.replace(/"/g, "'")}"` : castedDirect_parameter;
    const castedWindow = castAndEscape(target_window_required_string);
    const castedProcess = castAndEscape(target_process_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell (${castedWindow} of ${castedProcess})
          select ${castedDirect_parameter} in it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_ui_element,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async selectForUiElementOfWindowOfProcess(direct_parameter_required_ui_element, target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (direct_parameter_required_ui_element === undefined || direct_parameter_required_ui_element === null) {
      throw new Error("direct_parameter_required_ui_element is required");
    }
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const castedDirect_parameter = castAndEscape(direct_parameter_required_ui_element);
    const valueForScriptDirect_parameter = castedDirect_parameter && typeof castedDirect_parameter === 'string' && !castedDirect_parameter.startsWith('{') && !castedDirect_parameter.startsWith('date') ? `"${castedDirect_parameter.replace(/"/g, "'")}"` : castedDirect_parameter;
    const castedUiElement = castAndEscape(target_ui_element_required_string);
    const castedWindow = castAndEscape(target_window_required_string);
    const castedProcess = castAndEscape(target_process_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell (${castedUiElement} of ${castedWindow} of ${castedProcess})
          select ${castedDirect_parameter} in it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_ui_element,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getUiElementsEnabledOfApplication() {
    const script = `
      tell application "System Events"
        return UI elements enabled
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getDescriptionOfActionOfUiElementOfWindowOfProcess(target_action_required_string, target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_action_required_string || typeof target_action_required_string !== "string") {
      throw new Error("target_action_required_string is required and must be a string");
    }
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedAction = escapeForAppleScript(target_action_required_string);
    const escapedUiElement = escapeForAppleScript(target_ui_element_required_string);
    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedAction} of ${escapedUiElement} of ${escapedWindow} of ${escapedProcess})
          return description of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      action: target_action_required_string,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getNameOfActionOfUiElementOfWindowOfProcess(target_action_required_string, target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_action_required_string || typeof target_action_required_string !== "string") {
      throw new Error("target_action_required_string is required and must be a string");
    }
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedAction = escapeForAppleScript(target_action_required_string);
    const escapedUiElement = escapeForAppleScript(target_ui_element_required_string);
    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedAction} of ${escapedUiElement} of ${escapedWindow} of ${escapedProcess})
          return name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      action: target_action_required_string,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getApplicationFileOfApplicationProcess(target_application_process_required_string) {
    if (!target_application_process_required_string || typeof target_application_process_required_string !== "string") {
      throw new Error("target_application_process_required_string is required and must be a string");
    }

    const escapedApplicationProcess = escapeForAppleScript(target_application_process_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedApplicationProcess}
          return application file of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      application_process: target_application_process_required_string
    };
  }

  async getNameOfAttributeOfUiElementOfWindowOfProcess(target_attribute_required_string, target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_attribute_required_string || typeof target_attribute_required_string !== "string") {
      throw new Error("target_attribute_required_string is required and must be a string");
    }
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedAttribute = escapeForAppleScript(target_attribute_required_string);
    const escapedUiElement = escapeForAppleScript(target_ui_element_required_string);
    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedAttribute} of ${escapedUiElement} of ${escapedWindow} of ${escapedProcess})
          return name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      attribute: target_attribute_required_string,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getSettableOfAttributeOfUiElementOfWindowOfProcess(target_attribute_required_string, target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_attribute_required_string || typeof target_attribute_required_string !== "string") {
      throw new Error("target_attribute_required_string is required and must be a string");
    }
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedAttribute = escapeForAppleScript(target_attribute_required_string);
    const escapedUiElement = escapeForAppleScript(target_ui_element_required_string);
    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedAttribute} of ${escapedUiElement} of ${escapedWindow} of ${escapedProcess})
          return settable of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      attribute: target_attribute_required_string,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getValueOfAttributeOfUiElementOfWindowOfProcess(target_attribute_required_string, target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_attribute_required_string || typeof target_attribute_required_string !== "string") {
      throw new Error("target_attribute_required_string is required and must be a string");
    }
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedAttribute = escapeForAppleScript(target_attribute_required_string);
    const escapedUiElement = escapeForAppleScript(target_ui_element_required_string);
    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedAttribute} of ${escapedUiElement} of ${escapedWindow} of ${escapedProcess})
          return value of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      attribute: target_attribute_required_string,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async setValueOfAttributeOfUiElementOfWindowOfProcess(target_attribute_required_string, target_ui_element_required_string, target_window_required_string, target_process_required_string, value_required_specifier) {
    if (!target_attribute_required_string || typeof target_attribute_required_string !== "string") {
      throw new Error("target_attribute_required_string is required and must be a string");
    }
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }
    if (value_required_specifier === undefined || value_required_specifier === null) {
      throw new Error("value_required_specifier is required");
    }

    const castedAttribute = castAndEscape(target_attribute_required_string, 'string');
    const castedUiElement = castAndEscape(target_ui_element_required_string, 'string');
    const castedWindow = castAndEscape(target_window_required_string, 'string');
    const castedProcess = castAndEscape(target_process_required_string, 'string');
    const castedValue = castAndEscape(value_required_specifier, 'specifier');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedAttribute} of ${castedUiElement} of ${castedWindow} of ${castedProcess})
          set value of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_specifier,
      script: script,
      attribute: target_attribute_required_string,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getDeskAccessoryFileOfDeskAccessoryProcess(target_desk_accessory_process_required_string) {
    if (!target_desk_accessory_process_required_string || typeof target_desk_accessory_process_required_string !== "string") {
      throw new Error("target_desk_accessory_process_required_string is required and must be a string");
    }

    const escapedDeskAccessoryProcess = escapeForAppleScript(target_desk_accessory_process_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedDeskAccessoryProcess}
          return desk accessory file of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      desk_accessory_process: target_desk_accessory_process_required_string
    };
  }

  async getAcceptsHighLevelEventsOfProcess(target_process_required_string) {
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedProcess}
          return accepts high level events of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      process: target_process_required_string
    };
  }

  async getAcceptsRemoteEventsOfProcess(target_process_required_string) {
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedProcess}
          return accepts remote events of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      process: target_process_required_string
    };
  }

  async getArchitectureOfProcess(target_process_required_string) {
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedProcess}
          return architecture of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      process: target_process_required_string
    };
  }

  async getBackgroundOnlyOfProcess(target_process_required_string) {
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedProcess}
          return background only of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      process: target_process_required_string
    };
  }

  async getBundleIdentifierOfProcess(target_process_required_string) {
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedProcess}
          return bundle identifier of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      process: target_process_required_string
    };
  }

  async getClassicOfProcess(target_process_required_string) {
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedProcess}
          return Classic of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      process: target_process_required_string
    };
  }

  async getCreatorTypeOfProcess(target_process_required_string) {
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedProcess}
          return creator type of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      process: target_process_required_string
    };
  }

  async getDisplayedNameOfProcess(target_process_required_string) {
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedProcess}
          return displayed name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      process: target_process_required_string
    };
  }

  async getFileOfProcess(target_process_required_string) {
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedProcess}
          return file of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      process: target_process_required_string
    };
  }

  async getFileTypeOfProcess(target_process_required_string) {
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedProcess}
          return file type of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      process: target_process_required_string
    };
  }

  async getFrontmostOfProcess(target_process_required_string) {
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedProcess}
          return frontmost of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      process: target_process_required_string
    };
  }

  async setFrontmostOfProcess(target_process_required_string, value_required_boolean) {
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedProcess = castAndEscape(target_process_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedProcess}
          set frontmost of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      process: target_process_required_string
    };
  }

  async getHasScriptingTerminologyOfProcess(target_process_required_string) {
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedProcess}
          return has scripting terminology of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      process: target_process_required_string
    };
  }

  async getIdOfProcess(target_process_required_string) {
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedProcess}
          return id of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      process: target_process_required_string
    };
  }

  async getNameOfProcess(target_process_required_string) {
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedProcess}
          return name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      process: target_process_required_string
    };
  }

  async getPartitionSpaceUsedOfProcess(target_process_required_string) {
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedProcess}
          return partition space used of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      process: target_process_required_string
    };
  }

  async getShortNameOfProcess(target_process_required_string) {
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedProcess}
          return short name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      process: target_process_required_string
    };
  }

  async getTotalPartitionSizeOfProcess(target_process_required_string) {
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedProcess}
          return total partition size of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      process: target_process_required_string
    };
  }

  async getUnixIdOfProcess(target_process_required_string) {
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedProcess}
          return unix id of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      process: target_process_required_string
    };
  }

  async getVisibleOfProcess(target_process_required_string) {
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedProcess}
          return visible of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      process: target_process_required_string
    };
  }

  async setVisibleOfProcess(target_process_required_string, value_required_boolean) {
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedProcess = castAndEscape(target_process_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedProcess}
          set visible of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      process: target_process_required_string
    };
  }

  async getAccessibilityDescriptionOfUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedUiElement = escapeForAppleScript(target_ui_element_required_string);
    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedUiElement} of ${escapedWindow} of ${escapedProcess})
          return accessibility description of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getClassOfUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedUiElement = escapeForAppleScript(target_ui_element_required_string);
    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedUiElement} of ${escapedWindow} of ${escapedProcess})
          return class of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getDescriptionOfUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedUiElement = escapeForAppleScript(target_ui_element_required_string);
    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedUiElement} of ${escapedWindow} of ${escapedProcess})
          return description of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getEnabledOfUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedUiElement = escapeForAppleScript(target_ui_element_required_string);
    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedUiElement} of ${escapedWindow} of ${escapedProcess})
          return enabled of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getEntireContentsOfUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedUiElement = escapeForAppleScript(target_ui_element_required_string);
    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedUiElement} of ${escapedWindow} of ${escapedProcess})
          return entire contents of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getFocusedOfUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedUiElement = escapeForAppleScript(target_ui_element_required_string);
    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedUiElement} of ${escapedWindow} of ${escapedProcess})
          return focused of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async setFocusedOfUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string, value_required_boolean) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string, 'string');
    const castedWindow = castAndEscape(target_window_required_string, 'string');
    const castedProcess = castAndEscape(target_process_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedUiElement} of ${castedWindow} of ${castedProcess})
          set focused of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getHelpOfUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedUiElement = escapeForAppleScript(target_ui_element_required_string);
    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedUiElement} of ${escapedWindow} of ${escapedProcess})
          return help of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getMaximumValueOfUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedUiElement = escapeForAppleScript(target_ui_element_required_string);
    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedUiElement} of ${escapedWindow} of ${escapedProcess})
          return maximum value of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getMinimumValueOfUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedUiElement = escapeForAppleScript(target_ui_element_required_string);
    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedUiElement} of ${escapedWindow} of ${escapedProcess})
          return minimum value of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getNameOfUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedUiElement = escapeForAppleScript(target_ui_element_required_string);
    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedUiElement} of ${escapedWindow} of ${escapedProcess})
          return name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getOrientationOfUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedUiElement = escapeForAppleScript(target_ui_element_required_string);
    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedUiElement} of ${escapedWindow} of ${escapedProcess})
          return orientation of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getPositionOfUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedUiElement = escapeForAppleScript(target_ui_element_required_string);
    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedUiElement} of ${escapedWindow} of ${escapedProcess})
          return position of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async setPositionOfUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string, value_required_number) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }
    if (value_required_number === undefined || value_required_number === null) {
      throw new Error("value_required_number is required");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string, 'string');
    const castedWindow = castAndEscape(target_window_required_string, 'string');
    const castedProcess = castAndEscape(target_process_required_string, 'string');
    const castedValue = castAndEscape(value_required_number, 'number');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedUiElement} of ${castedWindow} of ${castedProcess})
          set position of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_number,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getRoleOfUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedUiElement = escapeForAppleScript(target_ui_element_required_string);
    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedUiElement} of ${escapedWindow} of ${escapedProcess})
          return role of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getRoleDescriptionOfUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedUiElement = escapeForAppleScript(target_ui_element_required_string);
    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedUiElement} of ${escapedWindow} of ${escapedProcess})
          return role description of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getSelectedOfUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedUiElement = escapeForAppleScript(target_ui_element_required_string);
    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedUiElement} of ${escapedWindow} of ${escapedProcess})
          return selected of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async setSelectedOfUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string, value_required_boolean) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string, 'string');
    const castedWindow = castAndEscape(target_window_required_string, 'string');
    const castedProcess = castAndEscape(target_process_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedUiElement} of ${castedWindow} of ${castedProcess})
          set selected of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getSizeOfUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedUiElement = escapeForAppleScript(target_ui_element_required_string);
    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedUiElement} of ${escapedWindow} of ${escapedProcess})
          return size of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async setSizeOfUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string, value_required_number) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }
    if (value_required_number === undefined || value_required_number === null) {
      throw new Error("value_required_number is required");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string, 'string');
    const castedWindow = castAndEscape(target_window_required_string, 'string');
    const castedProcess = castAndEscape(target_process_required_string, 'string');
    const castedValue = castAndEscape(value_required_number, 'number');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedUiElement} of ${castedWindow} of ${castedProcess})
          set size of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_number,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getSubroleOfUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedUiElement = escapeForAppleScript(target_ui_element_required_string);
    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedUiElement} of ${escapedWindow} of ${escapedProcess})
          return subrole of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getTitleOfUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedUiElement = escapeForAppleScript(target_ui_element_required_string);
    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedUiElement} of ${escapedWindow} of ${escapedProcess})
          return title of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getValueOfUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedUiElement = escapeForAppleScript(target_ui_element_required_string);
    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedUiElement} of ${escapedWindow} of ${escapedProcess})
          return value of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async setValueOfUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string, value_required_specifier) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }
    if (value_required_specifier === undefined || value_required_specifier === null) {
      throw new Error("value_required_specifier is required");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string, 'string');
    const castedWindow = castAndEscape(target_window_required_string, 'string');
    const castedProcess = castAndEscape(target_process_required_string, 'string');
    const castedValue = castAndEscape(value_required_specifier, 'specifier');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedUiElement} of ${castedWindow} of ${castedProcess})
          set value of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_specifier,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getAccessibilityDescriptionOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return accessibility description of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getClassOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return class of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getDescriptionOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return description of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getEnabledOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return enabled of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getEntireContentsOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return entire contents of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getFocusedOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return focused of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async setFocusedOfWindowOfProcess(target_window_required_string, target_process_required_string, value_required_boolean) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedWindow = castAndEscape(target_window_required_string, 'string');
    const castedProcess = castAndEscape(target_process_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedWindow} of ${castedProcess})
          set focused of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getHelpOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return help of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getMaximumValueOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return maximum value of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getMinimumValueOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return minimum value of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getOrientationOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return orientation of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getPositionOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return position of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async setPositionOfWindowOfProcess(target_window_required_string, target_process_required_string, value_required_number) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }
    if (value_required_number === undefined || value_required_number === null) {
      throw new Error("value_required_number is required");
    }

    const castedWindow = castAndEscape(target_window_required_string, 'string');
    const castedProcess = castAndEscape(target_process_required_string, 'string');
    const castedValue = castAndEscape(value_required_number, 'number');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedWindow} of ${castedProcess})
          set position of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_number,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getRoleOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return role of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getRoleDescriptionOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return role description of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getSelectedOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return selected of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async setSelectedOfWindowOfProcess(target_window_required_string, target_process_required_string, value_required_boolean) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedWindow = castAndEscape(target_window_required_string, 'string');
    const castedProcess = castAndEscape(target_process_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedWindow} of ${castedProcess})
          set selected of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getSizeOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return size of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async setSizeOfWindowOfProcess(target_window_required_string, target_process_required_string, value_required_number) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }
    if (value_required_number === undefined || value_required_number === null) {
      throw new Error("value_required_number is required");
    }

    const castedWindow = castAndEscape(target_window_required_string, 'string');
    const castedProcess = castAndEscape(target_process_required_string, 'string');
    const castedValue = castAndEscape(value_required_number, 'number');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedWindow} of ${castedProcess})
          set size of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_number,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getSubroleOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return subrole of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getTitleOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return title of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getValueOfWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const escapedWindow = escapeForAppleScript(target_window_required_string);
    const escapedProcess = escapeForAppleScript(target_process_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedWindow} of ${escapedProcess})
          return value of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async setValueOfWindowOfProcess(target_window_required_string, target_process_required_string, value_required_specifier) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }
    if (value_required_specifier === undefined || value_required_specifier === null) {
      throw new Error("value_required_specifier is required");
    }

    const castedWindow = castAndEscape(target_window_required_string, 'string');
    const castedProcess = castAndEscape(target_process_required_string, 'string');
    const castedValue = castAndEscape(value_required_specifier, 'specifier');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedWindow} of ${castedProcess})
          set value of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_specifier,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async getKindOfPropertyListItem(target_property_list_item_required_string) {
    if (!target_property_list_item_required_string || typeof target_property_list_item_required_string !== "string") {
      throw new Error("target_property_list_item_required_string is required and must be a string");
    }

    const escapedPropertyListItem = escapeForAppleScript(target_property_list_item_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedPropertyListItem}
          return kind of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      property_list_item: target_property_list_item_required_string
    };
  }

  async getNameOfPropertyListItem(target_property_list_item_required_string) {
    if (!target_property_list_item_required_string || typeof target_property_list_item_required_string !== "string") {
      throw new Error("target_property_list_item_required_string is required and must be a string");
    }

    const escapedPropertyListItem = escapeForAppleScript(target_property_list_item_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedPropertyListItem}
          return name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      property_list_item: target_property_list_item_required_string
    };
  }

  async getTextOfPropertyListItem(target_property_list_item_required_string) {
    if (!target_property_list_item_required_string || typeof target_property_list_item_required_string !== "string") {
      throw new Error("target_property_list_item_required_string is required and must be a string");
    }

    const escapedPropertyListItem = escapeForAppleScript(target_property_list_item_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedPropertyListItem}
          return text of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      property_list_item: target_property_list_item_required_string
    };
  }

  async setTextOfPropertyListItem(target_property_list_item_required_string, value_required_text) {
    if (!target_property_list_item_required_string || typeof target_property_list_item_required_string !== "string") {
      throw new Error("target_property_list_item_required_string is required and must be a string");
    }
    if (value_required_text === undefined || value_required_text === null) {
      throw new Error("value_required_text is required");
    }

    const castedPropertyListItem = castAndEscape(target_property_list_item_required_string, 'string');
    const castedValue = castAndEscape(value_required_text, 'text');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedPropertyListItem}
          set text of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_text,
      script: script,
      property_list_item: target_property_list_item_required_string
    };
  }

  async getValueOfPropertyListItem(target_property_list_item_required_string) {
    if (!target_property_list_item_required_string || typeof target_property_list_item_required_string !== "string") {
      throw new Error("target_property_list_item_required_string is required and must be a string");
    }

    const escapedPropertyListItem = escapeForAppleScript(target_property_list_item_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedPropertyListItem}
          return value of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      property_list_item: target_property_list_item_required_string
    };
  }

  async setValueOfPropertyListItem(target_property_list_item_required_string, value_required_any) {
    if (!target_property_list_item_required_string || typeof target_property_list_item_required_string !== "string") {
      throw new Error("target_property_list_item_required_string is required and must be a string");
    }
    if (value_required_any === undefined || value_required_any === null) {
      throw new Error("value_required_any is required");
    }

    const castedPropertyListItem = castAndEscape(target_property_list_item_required_string, 'string');
    const castedValue = castAndEscape(value_required_any, 'any');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedPropertyListItem}
          set value of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_any,
      script: script,
      property_list_item: target_property_list_item_required_string
    };
  }

  async getNameOfXmlAttributeOfXmlElementOfXmlData(target_xml_attribute_required_string, target_xml_element_required_string, target_xml_data_required_string) {
    if (!target_xml_attribute_required_string || typeof target_xml_attribute_required_string !== "string") {
      throw new Error("target_xml_attribute_required_string is required and must be a string");
    }
    if (!target_xml_element_required_string || typeof target_xml_element_required_string !== "string") {
      throw new Error("target_xml_element_required_string is required and must be a string");
    }
    if (!target_xml_data_required_string || typeof target_xml_data_required_string !== "string") {
      throw new Error("target_xml_data_required_string is required and must be a string");
    }

    const escapedXmlAttribute = escapeForAppleScript(target_xml_attribute_required_string);
    const escapedXmlElement = escapeForAppleScript(target_xml_element_required_string);
    const escapedXmlData = escapeForAppleScript(target_xml_data_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedXmlAttribute} of ${escapedXmlElement} of ${escapedXmlData})
          return name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      xml_attribute: target_xml_attribute_required_string,
      xml_element: target_xml_element_required_string,
      xml_data: target_xml_data_required_string
    };
  }

  async getValueOfXmlAttributeOfXmlElementOfXmlData(target_xml_attribute_required_string, target_xml_element_required_string, target_xml_data_required_string) {
    if (!target_xml_attribute_required_string || typeof target_xml_attribute_required_string !== "string") {
      throw new Error("target_xml_attribute_required_string is required and must be a string");
    }
    if (!target_xml_element_required_string || typeof target_xml_element_required_string !== "string") {
      throw new Error("target_xml_element_required_string is required and must be a string");
    }
    if (!target_xml_data_required_string || typeof target_xml_data_required_string !== "string") {
      throw new Error("target_xml_data_required_string is required and must be a string");
    }

    const escapedXmlAttribute = escapeForAppleScript(target_xml_attribute_required_string);
    const escapedXmlElement = escapeForAppleScript(target_xml_element_required_string);
    const escapedXmlData = escapeForAppleScript(target_xml_data_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedXmlAttribute} of ${escapedXmlElement} of ${escapedXmlData})
          return value of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      xml_attribute: target_xml_attribute_required_string,
      xml_element: target_xml_element_required_string,
      xml_data: target_xml_data_required_string
    };
  }

  async setValueOfXmlAttributeOfXmlElementOfXmlData(target_xml_attribute_required_string, target_xml_element_required_string, target_xml_data_required_string, value_required_boolean) {
    if (!target_xml_attribute_required_string || typeof target_xml_attribute_required_string !== "string") {
      throw new Error("target_xml_attribute_required_string is required and must be a string");
    }
    if (!target_xml_element_required_string || typeof target_xml_element_required_string !== "string") {
      throw new Error("target_xml_element_required_string is required and must be a string");
    }
    if (!target_xml_data_required_string || typeof target_xml_data_required_string !== "string") {
      throw new Error("target_xml_data_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedXmlAttribute = castAndEscape(target_xml_attribute_required_string, 'string');
    const castedXmlElement = castAndEscape(target_xml_element_required_string, 'string');
    const castedXmlData = castAndEscape(target_xml_data_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedXmlAttribute} of ${castedXmlElement} of ${castedXmlData})
          set value of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      xml_attribute: target_xml_attribute_required_string,
      xml_element: target_xml_element_required_string,
      xml_data: target_xml_data_required_string
    };
  }

  async getIdOfXmlData(target_xml_data_required_string) {
    if (!target_xml_data_required_string || typeof target_xml_data_required_string !== "string") {
      throw new Error("target_xml_data_required_string is required and must be a string");
    }

    const escapedXmlData = escapeForAppleScript(target_xml_data_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedXmlData}
          return id of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      xml_data: target_xml_data_required_string
    };
  }

  async getNameOfXmlData(target_xml_data_required_string) {
    if (!target_xml_data_required_string || typeof target_xml_data_required_string !== "string") {
      throw new Error("target_xml_data_required_string is required and must be a string");
    }

    const escapedXmlData = escapeForAppleScript(target_xml_data_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedXmlData}
          return name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      xml_data: target_xml_data_required_string
    };
  }

  async setNameOfXmlData(target_xml_data_required_string, value_required_text) {
    if (!target_xml_data_required_string || typeof target_xml_data_required_string !== "string") {
      throw new Error("target_xml_data_required_string is required and must be a string");
    }
    if (value_required_text === undefined || value_required_text === null) {
      throw new Error("value_required_text is required");
    }

    const castedXmlData = castAndEscape(target_xml_data_required_string, 'string');
    const castedValue = castAndEscape(value_required_text, 'text');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedXmlData}
          set name of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_text,
      script: script,
      xml_data: target_xml_data_required_string
    };
  }

  async getTextOfXmlData(target_xml_data_required_string) {
    if (!target_xml_data_required_string || typeof target_xml_data_required_string !== "string") {
      throw new Error("target_xml_data_required_string is required and must be a string");
    }

    const escapedXmlData = escapeForAppleScript(target_xml_data_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedXmlData}
          return text of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      xml_data: target_xml_data_required_string
    };
  }

  async setTextOfXmlData(target_xml_data_required_string, value_required_text) {
    if (!target_xml_data_required_string || typeof target_xml_data_required_string !== "string") {
      throw new Error("target_xml_data_required_string is required and must be a string");
    }
    if (value_required_text === undefined || value_required_text === null) {
      throw new Error("value_required_text is required");
    }

    const castedXmlData = castAndEscape(target_xml_data_required_string, 'string');
    const castedValue = castAndEscape(value_required_text, 'text');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedXmlData}
          set text of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_text,
      script: script,
      xml_data: target_xml_data_required_string
    };
  }

  async getIdOfXmlElementOfXmlData(target_xml_element_required_string, target_xml_data_required_string) {
    if (!target_xml_element_required_string || typeof target_xml_element_required_string !== "string") {
      throw new Error("target_xml_element_required_string is required and must be a string");
    }
    if (!target_xml_data_required_string || typeof target_xml_data_required_string !== "string") {
      throw new Error("target_xml_data_required_string is required and must be a string");
    }

    const escapedXmlElement = escapeForAppleScript(target_xml_element_required_string);
    const escapedXmlData = escapeForAppleScript(target_xml_data_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedXmlElement} of ${escapedXmlData})
          return id of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      xml_element: target_xml_element_required_string,
      xml_data: target_xml_data_required_string
    };
  }

  async getNameOfXmlElementOfXmlData(target_xml_element_required_string, target_xml_data_required_string) {
    if (!target_xml_element_required_string || typeof target_xml_element_required_string !== "string") {
      throw new Error("target_xml_element_required_string is required and must be a string");
    }
    if (!target_xml_data_required_string || typeof target_xml_data_required_string !== "string") {
      throw new Error("target_xml_data_required_string is required and must be a string");
    }

    const escapedXmlElement = escapeForAppleScript(target_xml_element_required_string);
    const escapedXmlData = escapeForAppleScript(target_xml_data_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedXmlElement} of ${escapedXmlData})
          return name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      xml_element: target_xml_element_required_string,
      xml_data: target_xml_data_required_string
    };
  }

  async getValueOfXmlElementOfXmlData(target_xml_element_required_string, target_xml_data_required_string) {
    if (!target_xml_element_required_string || typeof target_xml_element_required_string !== "string") {
      throw new Error("target_xml_element_required_string is required and must be a string");
    }
    if (!target_xml_data_required_string || typeof target_xml_data_required_string !== "string") {
      throw new Error("target_xml_data_required_string is required and must be a string");
    }

    const escapedXmlElement = escapeForAppleScript(target_xml_element_required_string);
    const escapedXmlData = escapeForAppleScript(target_xml_data_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedXmlElement} of ${escapedXmlData})
          return value of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      xml_element: target_xml_element_required_string,
      xml_data: target_xml_data_required_string
    };
  }

  async setValueOfXmlElementOfXmlData(target_xml_element_required_string, target_xml_data_required_string, value_required_boolean) {
    if (!target_xml_element_required_string || typeof target_xml_element_required_string !== "string") {
      throw new Error("target_xml_element_required_string is required and must be a string");
    }
    if (!target_xml_data_required_string || typeof target_xml_data_required_string !== "string") {
      throw new Error("target_xml_data_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedXmlElement = castAndEscape(target_xml_element_required_string, 'string');
    const castedXmlData = castAndEscape(target_xml_data_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell (${castedXmlElement} of ${castedXmlData})
          set value of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      xml_element: target_xml_element_required_string,
      xml_data: target_xml_data_required_string
    };
  }

  async getCopiesOfPrintSettings(target_print_settings_required_string) {
    if (!target_print_settings_required_string || typeof target_print_settings_required_string !== "string") {
      throw new Error("target_print_settings_required_string is required and must be a string");
    }

    const escapedPrintSettings = escapeForAppleScript(target_print_settings_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedPrintSettings}
          return copies of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      print_settings: target_print_settings_required_string
    };
  }

  async setCopiesOfPrintSettings(target_print_settings_required_string, value_required_integer) {
    if (!target_print_settings_required_string || typeof target_print_settings_required_string !== "string") {
      throw new Error("target_print_settings_required_string is required and must be a string");
    }
    if (value_required_integer === undefined || value_required_integer === null) {
      throw new Error("value_required_integer is required");
    }

    const castedPrintSettings = castAndEscape(target_print_settings_required_string, 'string');
    const castedValue = castAndEscape(value_required_integer, 'integer');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedPrintSettings}
          set copies of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_integer,
      script: script,
      print_settings: target_print_settings_required_string
    };
  }

  async getCollatingOfPrintSettings(target_print_settings_required_string) {
    if (!target_print_settings_required_string || typeof target_print_settings_required_string !== "string") {
      throw new Error("target_print_settings_required_string is required and must be a string");
    }

    const escapedPrintSettings = escapeForAppleScript(target_print_settings_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedPrintSettings}
          return collating of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      print_settings: target_print_settings_required_string
    };
  }

  async setCollatingOfPrintSettings(target_print_settings_required_string, value_required_boolean) {
    if (!target_print_settings_required_string || typeof target_print_settings_required_string !== "string") {
      throw new Error("target_print_settings_required_string is required and must be a string");
    }
    if (value_required_boolean === undefined || value_required_boolean === null) {
      throw new Error("value_required_boolean is required");
    }

    const castedPrintSettings = castAndEscape(target_print_settings_required_string, 'string');
    const castedValue = castAndEscape(value_required_boolean, 'boolean');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedPrintSettings}
          set collating of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_boolean,
      script: script,
      print_settings: target_print_settings_required_string
    };
  }

  async getStartingPageOfPrintSettings(target_print_settings_required_string) {
    if (!target_print_settings_required_string || typeof target_print_settings_required_string !== "string") {
      throw new Error("target_print_settings_required_string is required and must be a string");
    }

    const escapedPrintSettings = escapeForAppleScript(target_print_settings_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedPrintSettings}
          return starting page of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      print_settings: target_print_settings_required_string
    };
  }

  async setStartingPageOfPrintSettings(target_print_settings_required_string, value_required_integer) {
    if (!target_print_settings_required_string || typeof target_print_settings_required_string !== "string") {
      throw new Error("target_print_settings_required_string is required and must be a string");
    }
    if (value_required_integer === undefined || value_required_integer === null) {
      throw new Error("value_required_integer is required");
    }

    const castedPrintSettings = castAndEscape(target_print_settings_required_string, 'string');
    const castedValue = castAndEscape(value_required_integer, 'integer');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedPrintSettings}
          set starting page of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_integer,
      script: script,
      print_settings: target_print_settings_required_string
    };
  }

  async getEndingPageOfPrintSettings(target_print_settings_required_string) {
    if (!target_print_settings_required_string || typeof target_print_settings_required_string !== "string") {
      throw new Error("target_print_settings_required_string is required and must be a string");
    }

    const escapedPrintSettings = escapeForAppleScript(target_print_settings_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedPrintSettings}
          return ending page of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      print_settings: target_print_settings_required_string
    };
  }

  async setEndingPageOfPrintSettings(target_print_settings_required_string, value_required_integer) {
    if (!target_print_settings_required_string || typeof target_print_settings_required_string !== "string") {
      throw new Error("target_print_settings_required_string is required and must be a string");
    }
    if (value_required_integer === undefined || value_required_integer === null) {
      throw new Error("value_required_integer is required");
    }

    const castedPrintSettings = castAndEscape(target_print_settings_required_string, 'string');
    const castedValue = castAndEscape(value_required_integer, 'integer');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedPrintSettings}
          set ending page of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_integer,
      script: script,
      print_settings: target_print_settings_required_string
    };
  }

  async getPagesAcrossOfPrintSettings(target_print_settings_required_string) {
    if (!target_print_settings_required_string || typeof target_print_settings_required_string !== "string") {
      throw new Error("target_print_settings_required_string is required and must be a string");
    }

    const escapedPrintSettings = escapeForAppleScript(target_print_settings_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedPrintSettings}
          return pages across of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      print_settings: target_print_settings_required_string
    };
  }

  async setPagesAcrossOfPrintSettings(target_print_settings_required_string, value_required_integer) {
    if (!target_print_settings_required_string || typeof target_print_settings_required_string !== "string") {
      throw new Error("target_print_settings_required_string is required and must be a string");
    }
    if (value_required_integer === undefined || value_required_integer === null) {
      throw new Error("value_required_integer is required");
    }

    const castedPrintSettings = castAndEscape(target_print_settings_required_string, 'string');
    const castedValue = castAndEscape(value_required_integer, 'integer');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedPrintSettings}
          set pages across of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_integer,
      script: script,
      print_settings: target_print_settings_required_string
    };
  }

  async getPagesDownOfPrintSettings(target_print_settings_required_string) {
    if (!target_print_settings_required_string || typeof target_print_settings_required_string !== "string") {
      throw new Error("target_print_settings_required_string is required and must be a string");
    }

    const escapedPrintSettings = escapeForAppleScript(target_print_settings_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedPrintSettings}
          return pages down of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      print_settings: target_print_settings_required_string
    };
  }

  async setPagesDownOfPrintSettings(target_print_settings_required_string, value_required_integer) {
    if (!target_print_settings_required_string || typeof target_print_settings_required_string !== "string") {
      throw new Error("target_print_settings_required_string is required and must be a string");
    }
    if (value_required_integer === undefined || value_required_integer === null) {
      throw new Error("value_required_integer is required");
    }

    const castedPrintSettings = castAndEscape(target_print_settings_required_string, 'string');
    const castedValue = castAndEscape(value_required_integer, 'integer');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedPrintSettings}
          set pages down of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_integer,
      script: script,
      print_settings: target_print_settings_required_string
    };
  }

  async getRequestedPrintTimeOfPrintSettings(target_print_settings_required_string) {
    if (!target_print_settings_required_string || typeof target_print_settings_required_string !== "string") {
      throw new Error("target_print_settings_required_string is required and must be a string");
    }

    const escapedPrintSettings = escapeForAppleScript(target_print_settings_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedPrintSettings}
          return requested print time of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      print_settings: target_print_settings_required_string
    };
  }

  async setRequestedPrintTimeOfPrintSettings(target_print_settings_required_string, value_required_date) {
    if (!target_print_settings_required_string || typeof target_print_settings_required_string !== "string") {
      throw new Error("target_print_settings_required_string is required and must be a string");
    }
    if (value_required_date === undefined || value_required_date === null) {
      throw new Error("value_required_date is required");
    }

    const castedPrintSettings = castAndEscape(target_print_settings_required_string, 'string');
    const castedValue = castAndEscape(value_required_date, 'date');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedPrintSettings}
          set requested print time of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_date,
      script: script,
      print_settings: target_print_settings_required_string
    };
  }

  async getErrorHandlingOfPrintSettings(target_print_settings_required_string) {
    if (!target_print_settings_required_string || typeof target_print_settings_required_string !== "string") {
      throw new Error("target_print_settings_required_string is required and must be a string");
    }

    const escapedPrintSettings = escapeForAppleScript(target_print_settings_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedPrintSettings}
          return error handling of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      print_settings: target_print_settings_required_string
    };
  }

  async setErrorHandlingOfPrintSettings(target_print_settings_required_string, value_required_enum) {
    if (!target_print_settings_required_string || typeof target_print_settings_required_string !== "string") {
      throw new Error("target_print_settings_required_string is required and must be a string");
    }
    if (value_required_enum === undefined || value_required_enum === null) {
      throw new Error("value_required_enum is required");
    }

    const castedPrintSettings = castAndEscape(target_print_settings_required_string, 'string');
    const castedValue = castAndEscape(value_required_enum, 'enum');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedPrintSettings}
          set error handling of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_enum,
      script: script,
      print_settings: target_print_settings_required_string
    };
  }

  async getFaxNumberOfPrintSettings(target_print_settings_required_string) {
    if (!target_print_settings_required_string || typeof target_print_settings_required_string !== "string") {
      throw new Error("target_print_settings_required_string is required and must be a string");
    }

    const escapedPrintSettings = escapeForAppleScript(target_print_settings_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedPrintSettings}
          return fax number of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      print_settings: target_print_settings_required_string
    };
  }

  async setFaxNumberOfPrintSettings(target_print_settings_required_string, value_required_text) {
    if (!target_print_settings_required_string || typeof target_print_settings_required_string !== "string") {
      throw new Error("target_print_settings_required_string is required and must be a string");
    }
    if (value_required_text === undefined || value_required_text === null) {
      throw new Error("value_required_text is required");
    }

    const castedPrintSettings = castAndEscape(target_print_settings_required_string, 'string');
    const castedValue = castAndEscape(value_required_text, 'text');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedPrintSettings}
          set fax number of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_text,
      script: script,
      print_settings: target_print_settings_required_string
    };
  }

  async getTargetPrinterOfPrintSettings(target_print_settings_required_string) {
    if (!target_print_settings_required_string || typeof target_print_settings_required_string !== "string") {
      throw new Error("target_print_settings_required_string is required and must be a string");
    }

    const escapedPrintSettings = escapeForAppleScript(target_print_settings_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedPrintSettings}
          return target printer of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      print_settings: target_print_settings_required_string
    };
  }

  async setTargetPrinterOfPrintSettings(target_print_settings_required_string, value_required_text) {
    if (!target_print_settings_required_string || typeof target_print_settings_required_string !== "string") {
      throw new Error("target_print_settings_required_string is required and must be a string");
    }
    if (value_required_text === undefined || value_required_text === null) {
      throw new Error("value_required_text is required");
    }

    const castedPrintSettings = castAndEscape(target_print_settings_required_string, 'string');
    const castedValue = castAndEscape(value_required_text, 'text');
    // Determine value format for AppleScript
    let valueForScript;
    if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
      valueForScript = `"${castedValue}"`; // Wrap strings in quotes
    } else {
      valueForScript = castedValue; // Use as-is for numbers, booleans, lists, records
    }

    const script = `
      tell application "System Events"
        tell ${castedPrintSettings}
          set target printer of it to ${valueForScript}
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: "Property set successfully",
      value: value_required_text,
      script: script,
      print_settings: target_print_settings_required_string
    };
  }

  async attachActionTo(direct_parameter_required_specifier, using_required_text) {
    if (direct_parameter_required_specifier === undefined || direct_parameter_required_specifier === null) {
      throw new Error("direct_parameter_required_specifier is required");
    }

    if (using_required_text === undefined || using_required_text === null) {
      throw new Error("using_required_text is required");
    }

    const castedDirect_parameter = direct_parameter_required_specifier ? castAndEscape(direct_parameter_required_specifier) : null;
    const castedUsing = using_required_text ? castAndEscape(using_required_text) : null;

    const script = `
      tell application "System Events"
        attach action to ${castedDirect_parameter} using "${castedUsing}"
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_specifier || null,
      using: using_required_text || null
    };
  }

  async attachedScripts(direct_parameter_required_specifier) {
    if (direct_parameter_required_specifier === undefined || direct_parameter_required_specifier === null) {
      throw new Error("direct_parameter_required_specifier is required");
    }

    const castedDirect_parameter = direct_parameter_required_specifier ? castAndEscape(direct_parameter_required_specifier) : null;

    const script = `
      tell application "System Events"
        attached scripts ${castedDirect_parameter}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_specifier || null
    };
  }

  async cancelForWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const castedWindow = castAndEscape(target_window_required_string);
    const castedProcess = castAndEscape(target_process_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell (${castedWindow} of ${castedProcess})
          cancel it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async cancelForUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);
    const castedWindow = castAndEscape(target_window_required_string);
    const castedProcess = castAndEscape(target_process_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell (${castedUiElement} of ${castedWindow} of ${castedProcess})
          cancel it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async confirmForWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const castedWindow = castAndEscape(target_window_required_string);
    const castedProcess = castAndEscape(target_process_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell (${castedWindow} of ${castedProcess})
          confirm it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async confirmForUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);
    const castedWindow = castAndEscape(target_window_required_string);
    const castedProcess = castAndEscape(target_process_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell (${castedUiElement} of ${castedWindow} of ${castedProcess})
          confirm it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async decrementForWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const castedWindow = castAndEscape(target_window_required_string);
    const castedProcess = castAndEscape(target_process_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell (${castedWindow} of ${castedProcess})
          decrement it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async decrementForUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);
    const castedWindow = castAndEscape(target_window_required_string);
    const castedProcess = castAndEscape(target_process_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell (${castedUiElement} of ${castedWindow} of ${castedProcess})
          decrement it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async doFolderAction(direct_parameter_required_specifier, folder_action_code_required_actn, with_item_list_optional_any, with_window_size_optional_rectangle) {
    if (direct_parameter_required_specifier === undefined || direct_parameter_required_specifier === null) {
      throw new Error("direct_parameter_required_specifier is required");
    }

    if (folder_action_code_required_actn === undefined || folder_action_code_required_actn === null) {
      throw new Error("folder_action_code_required_actn is required");
    }

    const castedDirect_parameter = direct_parameter_required_specifier ? castAndEscape(direct_parameter_required_specifier) : null;
    const castedFolder_action_code = folder_action_code_required_actn ? castAndEscape(folder_action_code_required_actn) : null;
    const castedWith_item_list = with_item_list_optional_any ? castAndEscape(with_item_list_optional_any) : null;
    const castedWith_window_size = with_window_size_optional_rectangle ? castAndEscape(with_window_size_optional_rectangle) : null;

    const script = `
      tell application "System Events"
        do folder action ${castedDirect_parameter} folder action code ${castedFolder_action_code}${with_item_list_optional_any ? ' with item list ' + castedWith_item_list : ''}${with_window_size_optional_rectangle ? ' with window size ' + castedWith_window_size : ''}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_specifier || null,
      folder_action_code: folder_action_code_required_actn || null,
      with_item_list: with_item_list_optional_any || null,
      with_window_size: with_window_size_optional_rectangle || null
    };
  }

  async editActionOf(direct_parameter_required_specifier, using_action_name_optional_text, using_action_number_optional_integer) {
    if (direct_parameter_required_specifier === undefined || direct_parameter_required_specifier === null) {
      throw new Error("direct_parameter_required_specifier is required");
    }

    const castedDirect_parameter = direct_parameter_required_specifier ? castAndEscape(direct_parameter_required_specifier) : null;
    const castedUsing_action_name = using_action_name_optional_text ? castAndEscape(using_action_name_optional_text) : null;
    const castedUsing_action_number = using_action_number_optional_integer ? castAndEscape(using_action_number_optional_integer) : null;

    const script = `
      tell application "System Events"
        edit action of ${castedDirect_parameter}${using_action_name_optional_text ? ' using action name "' + castedUsing_action_name + '"' : ''}${using_action_number_optional_integer ? ' using action number ' + castedUsing_action_number : ''}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_specifier || null,
      using_action_name: using_action_name_optional_text || null,
      using_action_number: using_action_number_optional_integer || null
    };
  }

  async incrementForWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const castedWindow = castAndEscape(target_window_required_string);
    const castedProcess = castAndEscape(target_process_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell (${castedWindow} of ${castedProcess})
          increment it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async incrementForUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);
    const castedWindow = castAndEscape(target_window_required_string);
    const castedProcess = castAndEscape(target_process_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell (${castedUiElement} of ${castedWindow} of ${castedProcess})
          increment it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async keyDown(direct_parameter_required_text) {
    if (direct_parameter_required_text === undefined || direct_parameter_required_text === null) {
      throw new Error("direct_parameter_required_text is required");
    }

    const castedDirect_parameter = direct_parameter_required_text ? castAndEscape(direct_parameter_required_text) : null;

    const script = `
      tell application "System Events"
        key down "${castedDirect_parameter}"
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_text || null
    };
  }

  async keyUp(direct_parameter_required_text) {
    if (direct_parameter_required_text === undefined || direct_parameter_required_text === null) {
      throw new Error("direct_parameter_required_text is required");
    }

    const castedDirect_parameter = direct_parameter_required_text ? castAndEscape(direct_parameter_required_text) : null;

    const script = `
      tell application "System Events"
        key up "${castedDirect_parameter}"
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_text || null
    };
  }

  async pickForWindowOfProcess(target_window_required_string, target_process_required_string) {
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const castedWindow = castAndEscape(target_window_required_string);
    const castedProcess = castAndEscape(target_process_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell (${castedWindow} of ${castedProcess})
          pick it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async pickForUiElementOfWindowOfProcess(target_ui_element_required_string, target_window_required_string, target_process_required_string) {
    if (!target_ui_element_required_string || typeof target_ui_element_required_string !== "string") {
      throw new Error("target_ui_element_required_string is required and must be a string");
    }
    if (!target_window_required_string || typeof target_window_required_string !== "string") {
      throw new Error("target_window_required_string is required and must be a string");
    }
    if (!target_process_required_string || typeof target_process_required_string !== "string") {
      throw new Error("target_process_required_string is required and must be a string");
    }

    const castedUiElement = castAndEscape(target_ui_element_required_string);
    const castedWindow = castAndEscape(target_window_required_string);
    const castedProcess = castAndEscape(target_process_required_string);

    // Helper function to build properties record from individual property parameters
    function buildPropertiesRecord(propertyParams) {
      const definedProps = propertyParams.filter(p => p.value !== undefined && p.value !== null && p.value !== '');
      if (definedProps.length === 0) return '';
      const propStrings = definedProps.map(p => {
        const castedValue = castAndEscape(p.value, p.type || null);
        // For strings that got escaped, wrap in quotes and replace inner quotes
        if (typeof castedValue === 'string' && !castedValue.startsWith('{') && !castedValue.startsWith('date')) {
          return `${p.prop}:"${castedValue.replace(/"/g, "'")}"`;
        }
        // For numbers, booleans, lists, records, dates - no quotes
        return `${p.prop}:${castedValue}`;
      });
      return ` with properties {${propStrings.join(', ')}}`;
    }

    const script = `
      tell application "System Events"
        tell (${castedUiElement} of ${castedWindow} of ${castedProcess})
          pick it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      ui_element: target_ui_element_required_string,
      window: target_window_required_string,
      process: target_process_required_string
    };
  }

  async removeActionFrom(direct_parameter_required_specifier, using_action_name_optional_text, using_action_number_optional_integer) {
    if (direct_parameter_required_specifier === undefined || direct_parameter_required_specifier === null) {
      throw new Error("direct_parameter_required_specifier is required");
    }

    const castedDirect_parameter = direct_parameter_required_specifier ? castAndEscape(direct_parameter_required_specifier) : null;
    const castedUsing_action_name = using_action_name_optional_text ? castAndEscape(using_action_name_optional_text) : null;
    const castedUsing_action_number = using_action_number_optional_integer ? castAndEscape(using_action_number_optional_integer) : null;

    const script = `
      tell application "System Events"
        remove action from ${castedDirect_parameter}${using_action_name_optional_text ? ' using action name "' + castedUsing_action_name + '"' : ''}${using_action_number_optional_integer ? ' using action number ' + castedUsing_action_number : ''}
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      message: result,
      script: script,
      direct_parameter: direct_parameter_required_specifier || null,
      using_action_name: using_action_name_optional_text || null,
      using_action_number: using_action_number_optional_integer || null
    };
  }

  async getScriptingDefinitionOfApplication() {
    const script = `
      tell application "System Events"
        return scripting definition
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script
    };
  }

  async getNameOfScriptingClassOfScriptingSuiteOfScripting(target_scripting_class_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_class_required_string || typeof target_scripting_class_required_string !== "string") {
      throw new Error("target_scripting_class_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingClass = escapeForAppleScript(target_scripting_class_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingClass} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_class: target_scripting_class_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getIdOfScriptingClassOfScriptingSuiteOfScripting(target_scripting_class_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_class_required_string || typeof target_scripting_class_required_string !== "string") {
      throw new Error("target_scripting_class_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingClass = escapeForAppleScript(target_scripting_class_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingClass} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return id of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_class: target_scripting_class_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getDescriptionOfScriptingClassOfScriptingSuiteOf(target_scripting_class_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_class_required_string || typeof target_scripting_class_required_string !== "string") {
      throw new Error("target_scripting_class_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingClass = escapeForAppleScript(target_scripting_class_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingClass} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return description of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_class: target_scripting_class_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getHiddenOfScriptingClassOfScriptingSuiteOfScripting(target_scripting_class_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_class_required_string || typeof target_scripting_class_required_string !== "string") {
      throw new Error("target_scripting_class_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingClass = escapeForAppleScript(target_scripting_class_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingClass} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return hidden of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_class: target_scripting_class_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getPluralNameOfScriptingClassOfScriptingSuiteOf(target_scripting_class_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_class_required_string || typeof target_scripting_class_required_string !== "string") {
      throw new Error("target_scripting_class_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingClass = escapeForAppleScript(target_scripting_class_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingClass} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return plural name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_class: target_scripting_class_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getSuiteNameOfScriptingClassOfScriptingSuiteOf(target_scripting_class_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_class_required_string || typeof target_scripting_class_required_string !== "string") {
      throw new Error("target_scripting_class_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingClass = escapeForAppleScript(target_scripting_class_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingClass} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return suite name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_class: target_scripting_class_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getSuperclassOfScriptingClassOfScriptingSuiteOf(target_scripting_class_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_class_required_string || typeof target_scripting_class_required_string !== "string") {
      throw new Error("target_scripting_class_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingClass = escapeForAppleScript(target_scripting_class_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingClass} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return superclass of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_class: target_scripting_class_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getNameOfScriptingCommandOfScriptingSuiteOfScripting(target_scripting_command_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_command_required_string || typeof target_scripting_command_required_string !== "string") {
      throw new Error("target_scripting_command_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingCommand = escapeForAppleScript(target_scripting_command_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingCommand} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_command: target_scripting_command_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getIdOfScriptingCommandOfScriptingSuiteOfScripting(target_scripting_command_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_command_required_string || typeof target_scripting_command_required_string !== "string") {
      throw new Error("target_scripting_command_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingCommand = escapeForAppleScript(target_scripting_command_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingCommand} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return id of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_command: target_scripting_command_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getDescriptionOfScriptingCommandOfScriptingSuiteOf(target_scripting_command_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_command_required_string || typeof target_scripting_command_required_string !== "string") {
      throw new Error("target_scripting_command_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingCommand = escapeForAppleScript(target_scripting_command_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingCommand} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return description of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_command: target_scripting_command_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getDirectParameterOfScriptingCommandOfScriptingSuiteOf(target_scripting_command_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_command_required_string || typeof target_scripting_command_required_string !== "string") {
      throw new Error("target_scripting_command_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingCommand = escapeForAppleScript(target_scripting_command_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingCommand} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return direct parameter of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_command: target_scripting_command_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getHiddenOfScriptingCommandOfScriptingSuiteOfScripting(target_scripting_command_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_command_required_string || typeof target_scripting_command_required_string !== "string") {
      throw new Error("target_scripting_command_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingCommand = escapeForAppleScript(target_scripting_command_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingCommand} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return hidden of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_command: target_scripting_command_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getScriptingResultOfScriptingCommandOfScriptingSuiteOf(target_scripting_command_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_command_required_string || typeof target_scripting_command_required_string !== "string") {
      throw new Error("target_scripting_command_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingCommand = escapeForAppleScript(target_scripting_command_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingCommand} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return scripting result of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_command: target_scripting_command_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getSuiteNameOfScriptingCommandOfScriptingSuiteOf(target_scripting_command_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_command_required_string || typeof target_scripting_command_required_string !== "string") {
      throw new Error("target_scripting_command_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingCommand = escapeForAppleScript(target_scripting_command_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingCommand} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return suite name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_command: target_scripting_command_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getNameOfScriptingEnumerationOfScriptingSuiteOf(target_scripting_enumeration_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_enumeration_required_string || typeof target_scripting_enumeration_required_string !== "string") {
      throw new Error("target_scripting_enumeration_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingEnumeration = escapeForAppleScript(target_scripting_enumeration_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingEnumeration} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_enumeration: target_scripting_enumeration_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getIdOfScriptingEnumerationOfScriptingSuiteOfScripting(target_scripting_enumeration_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_enumeration_required_string || typeof target_scripting_enumeration_required_string !== "string") {
      throw new Error("target_scripting_enumeration_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingEnumeration = escapeForAppleScript(target_scripting_enumeration_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingEnumeration} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return id of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_enumeration: target_scripting_enumeration_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getHiddenOfScriptingEnumerationOfScriptingSuiteOf(target_scripting_enumeration_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_enumeration_required_string || typeof target_scripting_enumeration_required_string !== "string") {
      throw new Error("target_scripting_enumeration_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingEnumeration = escapeForAppleScript(target_scripting_enumeration_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingEnumeration} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return hidden of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_enumeration: target_scripting_enumeration_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getNameOfScriptingEnumeratorOfScriptingEnumerationOf(target_scripting_enumerator_required_string, target_scripting_enumeration_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_enumerator_required_string || typeof target_scripting_enumerator_required_string !== "string") {
      throw new Error("target_scripting_enumerator_required_string is required and must be a string");
    }
    if (!target_scripting_enumeration_required_string || typeof target_scripting_enumeration_required_string !== "string") {
      throw new Error("target_scripting_enumeration_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingEnumerator = escapeForAppleScript(target_scripting_enumerator_required_string);
    const escapedScriptingEnumeration = escapeForAppleScript(target_scripting_enumeration_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingEnumerator} of ${escapedScriptingEnumeration} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_enumerator: target_scripting_enumerator_required_string,
      scripting_enumeration: target_scripting_enumeration_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getIdOfScriptingEnumeratorOfScriptingEnumerationOf(target_scripting_enumerator_required_string, target_scripting_enumeration_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_enumerator_required_string || typeof target_scripting_enumerator_required_string !== "string") {
      throw new Error("target_scripting_enumerator_required_string is required and must be a string");
    }
    if (!target_scripting_enumeration_required_string || typeof target_scripting_enumeration_required_string !== "string") {
      throw new Error("target_scripting_enumeration_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingEnumerator = escapeForAppleScript(target_scripting_enumerator_required_string);
    const escapedScriptingEnumeration = escapeForAppleScript(target_scripting_enumeration_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingEnumerator} of ${escapedScriptingEnumeration} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return id of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_enumerator: target_scripting_enumerator_required_string,
      scripting_enumeration: target_scripting_enumeration_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getDescriptionOfScriptingEnumeratorOfScripting(target_scripting_enumerator_required_string, target_scripting_enumeration_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_enumerator_required_string || typeof target_scripting_enumerator_required_string !== "string") {
      throw new Error("target_scripting_enumerator_required_string is required and must be a string");
    }
    if (!target_scripting_enumeration_required_string || typeof target_scripting_enumeration_required_string !== "string") {
      throw new Error("target_scripting_enumeration_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingEnumerator = escapeForAppleScript(target_scripting_enumerator_required_string);
    const escapedScriptingEnumeration = escapeForAppleScript(target_scripting_enumeration_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingEnumerator} of ${escapedScriptingEnumeration} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return description of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_enumerator: target_scripting_enumerator_required_string,
      scripting_enumeration: target_scripting_enumeration_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getHiddenOfScriptingEnumeratorOfScriptingEnumerationOf(target_scripting_enumerator_required_string, target_scripting_enumeration_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_enumerator_required_string || typeof target_scripting_enumerator_required_string !== "string") {
      throw new Error("target_scripting_enumerator_required_string is required and must be a string");
    }
    if (!target_scripting_enumeration_required_string || typeof target_scripting_enumeration_required_string !== "string") {
      throw new Error("target_scripting_enumeration_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingEnumerator = escapeForAppleScript(target_scripting_enumerator_required_string);
    const escapedScriptingEnumeration = escapeForAppleScript(target_scripting_enumeration_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingEnumerator} of ${escapedScriptingEnumeration} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return hidden of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_enumerator: target_scripting_enumerator_required_string,
      scripting_enumeration: target_scripting_enumeration_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getNameOfScriptingParameterOfScriptingCommandOf(target_scripting_parameter_required_string, target_scripting_command_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_parameter_required_string || typeof target_scripting_parameter_required_string !== "string") {
      throw new Error("target_scripting_parameter_required_string is required and must be a string");
    }
    if (!target_scripting_command_required_string || typeof target_scripting_command_required_string !== "string") {
      throw new Error("target_scripting_command_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingParameter = escapeForAppleScript(target_scripting_parameter_required_string);
    const escapedScriptingCommand = escapeForAppleScript(target_scripting_command_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingParameter} of ${escapedScriptingCommand} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_parameter: target_scripting_parameter_required_string,
      scripting_command: target_scripting_command_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getIdOfScriptingParameterOfScriptingCommandOfScripting(target_scripting_parameter_required_string, target_scripting_command_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_parameter_required_string || typeof target_scripting_parameter_required_string !== "string") {
      throw new Error("target_scripting_parameter_required_string is required and must be a string");
    }
    if (!target_scripting_command_required_string || typeof target_scripting_command_required_string !== "string") {
      throw new Error("target_scripting_command_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingParameter = escapeForAppleScript(target_scripting_parameter_required_string);
    const escapedScriptingCommand = escapeForAppleScript(target_scripting_command_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingParameter} of ${escapedScriptingCommand} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return id of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_parameter: target_scripting_parameter_required_string,
      scripting_command: target_scripting_command_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getDescriptionOfScriptingParameterOfScriptingCommandOf(target_scripting_parameter_required_string, target_scripting_command_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_parameter_required_string || typeof target_scripting_parameter_required_string !== "string") {
      throw new Error("target_scripting_parameter_required_string is required and must be a string");
    }
    if (!target_scripting_command_required_string || typeof target_scripting_command_required_string !== "string") {
      throw new Error("target_scripting_command_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingParameter = escapeForAppleScript(target_scripting_parameter_required_string);
    const escapedScriptingCommand = escapeForAppleScript(target_scripting_command_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingParameter} of ${escapedScriptingCommand} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return description of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_parameter: target_scripting_parameter_required_string,
      scripting_command: target_scripting_command_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getHiddenOfScriptingParameterOfScriptingCommandOf(target_scripting_parameter_required_string, target_scripting_command_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_parameter_required_string || typeof target_scripting_parameter_required_string !== "string") {
      throw new Error("target_scripting_parameter_required_string is required and must be a string");
    }
    if (!target_scripting_command_required_string || typeof target_scripting_command_required_string !== "string") {
      throw new Error("target_scripting_command_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingParameter = escapeForAppleScript(target_scripting_parameter_required_string);
    const escapedScriptingCommand = escapeForAppleScript(target_scripting_command_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingParameter} of ${escapedScriptingCommand} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return hidden of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_parameter: target_scripting_parameter_required_string,
      scripting_command: target_scripting_command_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getKindOfScriptingParameterOfScriptingCommandOf(target_scripting_parameter_required_string, target_scripting_command_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_parameter_required_string || typeof target_scripting_parameter_required_string !== "string") {
      throw new Error("target_scripting_parameter_required_string is required and must be a string");
    }
    if (!target_scripting_command_required_string || typeof target_scripting_command_required_string !== "string") {
      throw new Error("target_scripting_command_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingParameter = escapeForAppleScript(target_scripting_parameter_required_string);
    const escapedScriptingCommand = escapeForAppleScript(target_scripting_command_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingParameter} of ${escapedScriptingCommand} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return kind of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_parameter: target_scripting_parameter_required_string,
      scripting_command: target_scripting_command_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getOptionalOfScriptingParameterOfScriptingCommandOf(target_scripting_parameter_required_string, target_scripting_command_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_parameter_required_string || typeof target_scripting_parameter_required_string !== "string") {
      throw new Error("target_scripting_parameter_required_string is required and must be a string");
    }
    if (!target_scripting_command_required_string || typeof target_scripting_command_required_string !== "string") {
      throw new Error("target_scripting_command_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingParameter = escapeForAppleScript(target_scripting_parameter_required_string);
    const escapedScriptingCommand = escapeForAppleScript(target_scripting_command_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingParameter} of ${escapedScriptingCommand} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return optional of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_parameter: target_scripting_parameter_required_string,
      scripting_command: target_scripting_command_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getNameOfScriptingPropertyOfScriptingClassOfScripting(target_scripting_property_required_string, target_scripting_class_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_property_required_string || typeof target_scripting_property_required_string !== "string") {
      throw new Error("target_scripting_property_required_string is required and must be a string");
    }
    if (!target_scripting_class_required_string || typeof target_scripting_class_required_string !== "string") {
      throw new Error("target_scripting_class_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingProperty = escapeForAppleScript(target_scripting_property_required_string);
    const escapedScriptingClass = escapeForAppleScript(target_scripting_class_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingProperty} of ${escapedScriptingClass} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_property: target_scripting_property_required_string,
      scripting_class: target_scripting_class_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getIdOfScriptingPropertyOfScriptingClassOfScripting(target_scripting_property_required_string, target_scripting_class_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_property_required_string || typeof target_scripting_property_required_string !== "string") {
      throw new Error("target_scripting_property_required_string is required and must be a string");
    }
    if (!target_scripting_class_required_string || typeof target_scripting_class_required_string !== "string") {
      throw new Error("target_scripting_class_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingProperty = escapeForAppleScript(target_scripting_property_required_string);
    const escapedScriptingClass = escapeForAppleScript(target_scripting_class_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingProperty} of ${escapedScriptingClass} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return id of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_property: target_scripting_property_required_string,
      scripting_class: target_scripting_class_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getAccessOfScriptingPropertyOfScriptingClassOf(target_scripting_property_required_string, target_scripting_class_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_property_required_string || typeof target_scripting_property_required_string !== "string") {
      throw new Error("target_scripting_property_required_string is required and must be a string");
    }
    if (!target_scripting_class_required_string || typeof target_scripting_class_required_string !== "string") {
      throw new Error("target_scripting_class_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingProperty = escapeForAppleScript(target_scripting_property_required_string);
    const escapedScriptingClass = escapeForAppleScript(target_scripting_class_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingProperty} of ${escapedScriptingClass} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return access of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_property: target_scripting_property_required_string,
      scripting_class: target_scripting_class_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getDescriptionOfScriptingPropertyOfScriptingClassOf(target_scripting_property_required_string, target_scripting_class_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_property_required_string || typeof target_scripting_property_required_string !== "string") {
      throw new Error("target_scripting_property_required_string is required and must be a string");
    }
    if (!target_scripting_class_required_string || typeof target_scripting_class_required_string !== "string") {
      throw new Error("target_scripting_class_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingProperty = escapeForAppleScript(target_scripting_property_required_string);
    const escapedScriptingClass = escapeForAppleScript(target_scripting_class_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingProperty} of ${escapedScriptingClass} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return description of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_property: target_scripting_property_required_string,
      scripting_class: target_scripting_class_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getEnumeratedOfScriptingPropertyOfScriptingClassOf(target_scripting_property_required_string, target_scripting_class_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_property_required_string || typeof target_scripting_property_required_string !== "string") {
      throw new Error("target_scripting_property_required_string is required and must be a string");
    }
    if (!target_scripting_class_required_string || typeof target_scripting_class_required_string !== "string") {
      throw new Error("target_scripting_class_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingProperty = escapeForAppleScript(target_scripting_property_required_string);
    const escapedScriptingClass = escapeForAppleScript(target_scripting_class_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingProperty} of ${escapedScriptingClass} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return enumerated of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_property: target_scripting_property_required_string,
      scripting_class: target_scripting_class_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getHiddenOfScriptingPropertyOfScriptingClassOf(target_scripting_property_required_string, target_scripting_class_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_property_required_string || typeof target_scripting_property_required_string !== "string") {
      throw new Error("target_scripting_property_required_string is required and must be a string");
    }
    if (!target_scripting_class_required_string || typeof target_scripting_class_required_string !== "string") {
      throw new Error("target_scripting_class_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingProperty = escapeForAppleScript(target_scripting_property_required_string);
    const escapedScriptingClass = escapeForAppleScript(target_scripting_class_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingProperty} of ${escapedScriptingClass} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return hidden of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_property: target_scripting_property_required_string,
      scripting_class: target_scripting_class_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getKindOfScriptingPropertyOfScriptingClassOfScripting(target_scripting_property_required_string, target_scripting_class_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_property_required_string || typeof target_scripting_property_required_string !== "string") {
      throw new Error("target_scripting_property_required_string is required and must be a string");
    }
    if (!target_scripting_class_required_string || typeof target_scripting_class_required_string !== "string") {
      throw new Error("target_scripting_class_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingProperty = escapeForAppleScript(target_scripting_property_required_string);
    const escapedScriptingClass = escapeForAppleScript(target_scripting_class_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingProperty} of ${escapedScriptingClass} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return kind of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_property: target_scripting_property_required_string,
      scripting_class: target_scripting_class_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getListedOfScriptingPropertyOfScriptingClassOf(target_scripting_property_required_string, target_scripting_class_required_string, target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_property_required_string || typeof target_scripting_property_required_string !== "string") {
      throw new Error("target_scripting_property_required_string is required and must be a string");
    }
    if (!target_scripting_class_required_string || typeof target_scripting_class_required_string !== "string") {
      throw new Error("target_scripting_class_required_string is required and must be a string");
    }
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingProperty = escapeForAppleScript(target_scripting_property_required_string);
    const escapedScriptingClass = escapeForAppleScript(target_scripting_class_required_string);
    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingProperty} of ${escapedScriptingClass} of ${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return listed of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_property: target_scripting_property_required_string,
      scripting_class: target_scripting_class_required_string,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getDescriptionOfScriptingResultObject(target_scripting_result_object_required_string) {
    if (!target_scripting_result_object_required_string || typeof target_scripting_result_object_required_string !== "string") {
      throw new Error("target_scripting_result_object_required_string is required and must be a string");
    }

    const escapedScriptingResultObject = escapeForAppleScript(target_scripting_result_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedScriptingResultObject}
          return description of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_result_object: target_scripting_result_object_required_string
    };
  }

  async getEnumeratedOfScriptingResultObject(target_scripting_result_object_required_string) {
    if (!target_scripting_result_object_required_string || typeof target_scripting_result_object_required_string !== "string") {
      throw new Error("target_scripting_result_object_required_string is required and must be a string");
    }

    const escapedScriptingResultObject = escapeForAppleScript(target_scripting_result_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedScriptingResultObject}
          return enumerated of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_result_object: target_scripting_result_object_required_string
    };
  }

  async getKindOfScriptingResultObject(target_scripting_result_object_required_string) {
    if (!target_scripting_result_object_required_string || typeof target_scripting_result_object_required_string !== "string") {
      throw new Error("target_scripting_result_object_required_string is required and must be a string");
    }

    const escapedScriptingResultObject = escapeForAppleScript(target_scripting_result_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedScriptingResultObject}
          return kind of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_result_object: target_scripting_result_object_required_string
    };
  }

  async getListedOfScriptingResultObject(target_scripting_result_object_required_string) {
    if (!target_scripting_result_object_required_string || typeof target_scripting_result_object_required_string !== "string") {
      throw new Error("target_scripting_result_object_required_string is required and must be a string");
    }

    const escapedScriptingResultObject = escapeForAppleScript(target_scripting_result_object_required_string);

    const script = `
      tell application "System Events"
        tell ${escapedScriptingResultObject}
          return listed of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_result_object: target_scripting_result_object_required_string
    };
  }

  async getNameOfScriptingSuiteOfScriptingDefinitionObject(target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return name of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getIdOfScriptingSuiteOfScriptingDefinitionObject(target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return id of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getDescriptionOfScriptingSuiteOfScriptingDefinition(target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return description of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  async getHiddenOfScriptingSuiteOfScriptingDefinitionObject(target_scripting_suite_required_string, target_scripting_definition_object_required_string) {
    if (!target_scripting_suite_required_string || typeof target_scripting_suite_required_string !== "string") {
      throw new Error("target_scripting_suite_required_string is required and must be a string");
    }
    if (!target_scripting_definition_object_required_string || typeof target_scripting_definition_object_required_string !== "string") {
      throw new Error("target_scripting_definition_object_required_string is required and must be a string");
    }

    const escapedScriptingSuite = escapeForAppleScript(target_scripting_suite_required_string);
    const escapedScriptingDefinitionObject = escapeForAppleScript(target_scripting_definition_object_required_string);

    const script = `
      tell application "System Events"
        tell (${escapedScriptingSuite} of ${escapedScriptingDefinitionObject})
          return hidden of it
        end tell
      end tell
    `;

    const result = await executeAppleScript(script);
    return {
      success: result !== "Error",
      value: result,
      script: script,
      scripting_suite: target_scripting_suite_required_string,
      scripting_definition_object: target_scripting_definition_object_required_string
    };
  }

  sendResponse(response) {
    const responseStr = JSON.stringify(response);
    console.error("Sending response:", response.method || 'result', response.id);
    process.stdout.write(responseStr + '\n');
  }
}

// Start the server
async function startServer() {
  console.error("Testing System Events availability...");
  await checkSystemEventsAvailable();
  
  console.error("Creating System Events MCP server...");
  const server = new SystemEventsMCPServer();
  
  console.error("System Events AppleScript MCP server running on stdio");
  
  // Keep the process alive
  process.on('SIGINT', () => {
    console.error("Shutting down System Events AppleScript MCP server");
    process.exit(0);
  });
  
  process.on('SIGTERM', () => {
    console.error("Shutting down System Events AppleScript MCP server");
    process.exit(0);
  });
}

startServer().catch(error => {
  console.error("Fatal error starting server:", error);
  process.exit(1);
});
